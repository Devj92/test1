
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000015f4  00001688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  0080020c  0080020c  00001694  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000950  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00004918  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141c  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000377  00000000  00000000  00005e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000816  00000000  00000000  0000618b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  000069a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00006dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae9  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_25>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_45>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e4 ef       	ldi	r30, 0xF4	; 244
     12a:	f5 e1       	ldi	r31, 0x15	; 21
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	ac 30       	cpi	r26, 0x0C	; 12
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	ac e0       	ldi	r26, 0x0C	; 12
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a6 35       	cpi	r26, 0x56	; 86
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 67 07 	call	0xece	; 0xece <main>
     150:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
     158:	10 92 3c 02 	sts	0x023C, r1
	TCCR4B = 0x00; //stop
     15c:	e1 ea       	ldi	r30, 0xA1	; 161
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
     162:	86 ec       	ldi	r24, 0xC6	; 198
     164:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //Counter lower 8 bit value
     168:	87 e6       	ldi	r24, 0x67	; 103
     16a:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
     16e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
     172:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
     176:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
     17a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
     17e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
     182:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     186:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     18a:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
     18e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
     192:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 83       	st	Z, r24
}
     19a:	08 95       	ret

0000019c <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
     19c:	1f 92       	push	r1
     19e:	0f 92       	push	r0
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	0f 92       	push	r0
     1a4:	11 24       	eor	r1, r1
     1a6:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
     1a8:	80 91 3c 02 	lds	r24, 0x023C
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	80 93 3c 02 	sts	0x023C, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
     1b2:	86 ec       	ldi	r24, 0xC6	; 198
     1b4:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //reload counter low value
     1b8:	87 e6       	ldi	r24, 0x67	; 103
     1ba:	80 93 a4 00 	sts	0x00A4, r24
}
     1be:	8f 91       	pop	r24
     1c0:	0f 90       	pop	r0
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	0f 90       	pop	r0
     1c6:	1f 90       	pop	r1
     1c8:	18 95       	reti

000001ca <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
     1ca:	f8 94       	cli
	timer4_init();
     1cc:	0e 94 ac 00 	call	0x158	; 0x158 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
     1d6:	78 94       	sei

}
     1d8:	08 95       	ret

000001da <millis>:

int millis(void)
{
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
	int time =0;
	time=tot_overflow + (TCNT4-50791)/14745;
     1e0:	10 91 3c 02 	lds	r17, 0x023C
     1e4:	c0 91 a4 00 	lds	r28, 0x00A4
     1e8:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     1ec:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
}

int millis(void)
{
	int time =0;
	time=tot_overflow + (TCNT4-50791)/14745;
     1f0:	ce 01       	movw	r24, r28
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	bc 01       	movw	r22, r24
     1f8:	cd 01       	movw	r24, r26
     1fa:	67 56       	subi	r22, 0x67	; 103
     1fc:	76 4c       	sbci	r23, 0xC6	; 198
     1fe:	80 40       	sbci	r24, 0x00	; 0
     200:	90 40       	sbci	r25, 0x00	; 0
     202:	29 e9       	ldi	r18, 0x99	; 153
     204:	39 e3       	ldi	r19, 0x39	; 57
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__divmodsi4>
     20e:	81 2f       	mov	r24, r17
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	28 0f       	add	r18, r24
     214:	39 1f       	adc	r19, r25
	start_timer4();
	return time;

}
     216:	82 2f       	mov	r24, r18
     218:	93 2f       	mov	r25, r19
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	08 95       	ret

00000222 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     222:	86 e6       	ldi	r24, 0x66	; 102
     224:	9e e0       	ldi	r25, 0x0E	; 14
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x4>
     22a:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     22c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     22e:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     230:	80 e3       	ldi	r24, 0x30	; 48
     232:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     234:	42 9a       	sbi	0x08, 2	; 8
     236:	ef ef       	ldi	r30, 0xFF	; 255
     238:	f7 e4       	ldi	r31, 0x47	; 71
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_set_4bit+0x18>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_set_4bit+0x1e>
     240:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     242:	42 98       	cbi	0x08, 2	; 8
     244:	e6 e6       	ldi	r30, 0x66	; 102
     246:	fe e0       	ldi	r31, 0x0E	; 14
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_set_4bit+0x26>
     24c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     24e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     250:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     252:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     254:	42 9a       	sbi	0x08, 2	; 8
     256:	ef ef       	ldi	r30, 0xFF	; 255
     258:	f7 e4       	ldi	r31, 0x47	; 71
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_set_4bit+0x38>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_set_4bit+0x3e>
     260:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     262:	42 98       	cbi	0x08, 2	; 8
     264:	e6 e6       	ldi	r30, 0x66	; 102
     266:	fe e0       	ldi	r31, 0x0E	; 14
     268:	31 97       	sbiw	r30, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_set_4bit+0x46>
     26c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     26e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     270:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     272:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     274:	42 9a       	sbi	0x08, 2	; 8
     276:	8f ef       	ldi	r24, 0xFF	; 255
     278:	97 e4       	ldi	r25, 0x47	; 71
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_set_4bit+0x58>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_set_4bit+0x5e>
     280:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     282:	42 98       	cbi	0x08, 2	; 8
     284:	e6 e6       	ldi	r30, 0x66	; 102
     286:	fe e0       	ldi	r31, 0x0E	; 14
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_set_4bit+0x66>
     28c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     28e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     290:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     292:	80 e2       	ldi	r24, 0x20	; 32
     294:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     296:	42 9a       	sbi	0x08, 2	; 8
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	97 e4       	ldi	r25, 0x47	; 71
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x7a>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_set_4bit+0x80>
     2a2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2a4:	42 98       	cbi	0x08, 2	; 8
}
     2a6:	08 95       	ret

000002a8 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     2a8:	98 b1       	in	r25, 0x08	; 8
     2aa:	9f 70       	andi	r25, 0x0F	; 15
     2ac:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2ae:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     2b0:	28 2f       	mov	r18, r24
     2b2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b4:	92 2b       	or	r25, r18
     2b6:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     2b8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ba:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2bc:	42 9a       	sbi	0x08, 2	; 8
     2be:	ef ef       	ldi	r30, 0xFF	; 255
     2c0:	f7 e4       	ldi	r31, 0x47	; 71
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcd_wr_command+0x1a>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <lcd_wr_command+0x20>
     2c8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2ca:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     2cc:	98 b1       	in	r25, 0x08	; 8
     2ce:	9f 70       	andi	r25, 0x0F	; 15
     2d0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     2d2:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     2d4:	82 95       	swap	r24
     2d6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     2d8:	89 2b       	or	r24, r25
     2da:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     2dc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2de:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2e0:	42 9a       	sbi	0x08, 2	; 8
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	97 e4       	ldi	r25, 0x47	; 71
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_wr_command+0x3e>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_wr_command+0x44>
     2ec:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2ee:	42 98       	cbi	0x08, 2	; 8
}
     2f0:	08 95       	ret

000002f2 <lcd_init>:
     2f2:	86 e6       	ldi	r24, 0x66	; 102
     2f4:	9e e0       	ldi	r25, 0x0E	; 14
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_init+0x4>
     2fa:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     2fc:	88 e2       	ldi	r24, 0x28	; 40
     2fe:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     308:	86 e0       	ldi	r24, 0x06	; 6
     30a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     30e:	8e e0       	ldi	r24, 0x0E	; 14
     310:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     314:	80 e8       	ldi	r24, 0x80	; 128
     316:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
}
     31a:	08 95       	ret

0000031c <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     31c:	98 b1       	in	r25, 0x08	; 8
     31e:	9f 70       	andi	r25, 0x0F	; 15
     320:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     322:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     324:	28 2f       	mov	r18, r24
     326:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     328:	92 2b       	or	r25, r18
     32a:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     32c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     32e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     330:	42 9a       	sbi	0x08, 2	; 8
     332:	ef ef       	ldi	r30, 0xFF	; 255
     334:	f7 e4       	ldi	r31, 0x47	; 71
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <lcd_wr_char+0x1a>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <lcd_wr_char+0x20>
     33c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     33e:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     340:	98 b1       	in	r25, 0x08	; 8
     342:	9f 70       	andi	r25, 0x0F	; 15
     344:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     346:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     348:	82 95       	swap	r24
     34a:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     34c:	89 2b       	or	r24, r25
     34e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     350:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     352:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     354:	42 9a       	sbi	0x08, 2	; 8
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	97 e4       	ldi	r25, 0x47	; 71
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <lcd_wr_char+0x3e>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <lcd_wr_char+0x44>
     360:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     362:	42 98       	cbi	0x08, 2	; 8
}
     364:	08 95       	ret

00000366 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     366:	80 e8       	ldi	r24, 0x80	; 128
     368:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
}
     36c:	08 95       	ret

0000036e <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	ec 01       	movw	r28, r24
	while(*str != '\0')
     374:	88 81       	ld	r24, Y
     376:	88 23       	and	r24, r24
     378:	31 f0       	breq	.+12     	; 0x386 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     37a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     37c:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     380:	89 91       	ld	r24, Y+
     382:	88 23       	and	r24, r24
     384:	d9 f7       	brne	.-10     	; 0x37c <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     38c:	82 30       	cpi	r24, 0x02	; 2
     38e:	79 f0       	breq	.+30     	; 0x3ae <lcd_cursor+0x22>
     390:	83 30       	cpi	r24, 0x03	; 3
     392:	18 f4       	brcc	.+6      	; 0x39a <lcd_cursor+0xe>
     394:	81 30       	cpi	r24, 0x01	; 1
     396:	c9 f4       	brne	.+50     	; 0x3ca <lcd_cursor+0x3e>
     398:	05 c0       	rjmp	.+10     	; 0x3a4 <lcd_cursor+0x18>
     39a:	83 30       	cpi	r24, 0x03	; 3
     39c:	69 f0       	breq	.+26     	; 0x3b8 <lcd_cursor+0x2c>
     39e:	84 30       	cpi	r24, 0x04	; 4
     3a0:	a1 f4       	brne	.+40     	; 0x3ca <lcd_cursor+0x3e>
     3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     3a4:	86 2f       	mov	r24, r22
     3a6:	81 58       	subi	r24, 0x81	; 129
     3a8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
     3ac:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     3ae:	86 2f       	mov	r24, r22
     3b0:	81 54       	subi	r24, 0x41	; 65
     3b2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
     3b6:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     3b8:	86 2f       	mov	r24, r22
     3ba:	8d 56       	subi	r24, 0x6D	; 109
     3bc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
     3c0:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     3c2:	86 2f       	mov	r24, r22
     3c4:	8d 52       	subi	r24, 0x2D	; 45
     3c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
     3ca:	08 95       	ret

000003cc <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	8a 01       	movw	r16, r20
     3d6:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     3d8:	88 23       	and	r24, r24
     3da:	11 f0       	breq	.+4      	; 0x3e0 <lcd_print+0x14>
     3dc:	66 23       	and	r22, r22
     3de:	19 f4       	brne	.+6      	; 0x3e6 <lcd_print+0x1a>
	{
		lcd_home();
     3e0:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_home>
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     3e6:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_cursor>
	}
	if(digits==5 || flag==1)
     3ea:	c5 30       	cpi	r28, 0x05	; 5
     3ec:	d1 05       	cpc	r29, r1
     3ee:	71 f4       	brne	.+28     	; 0x40c <lcd_print+0x40>
	{
		million=value/10000+48;
     3f0:	c8 01       	movw	r24, r16
     3f2:	60 e1       	ldi	r22, 0x10	; 16
     3f4:	77 e2       	ldi	r23, 0x27	; 39
     3f6:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     3fa:	cb 01       	movw	r24, r22
     3fc:	c0 96       	adiw	r24, 0x30	; 48
     3fe:	90 93 37 02 	sts	0x0237, r25
     402:	80 93 36 02 	sts	0x0236, r24
		lcd_wr_char(million);
     406:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_wr_char>
     40a:	03 c0       	rjmp	.+6      	; 0x412 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     40c:	c4 30       	cpi	r28, 0x04	; 4
     40e:	d1 05       	cpc	r29, r1
     410:	b9 f4       	brne	.+46     	; 0x440 <lcd_print+0x74>
	{
		temp = value/1000;
     412:	c8 01       	movw	r24, r16
     414:	68 ee       	ldi	r22, 0xE8	; 232
     416:	73 e0       	ldi	r23, 0x03	; 3
     418:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     41c:	cb 01       	movw	r24, r22
     41e:	70 93 39 02 	sts	0x0239, r23
     422:	60 93 38 02 	sts	0x0238, r22
		thousand = temp%10 + 48;
     426:	6a e0       	ldi	r22, 0x0A	; 10
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     42e:	c0 96       	adiw	r24, 0x30	; 48
     430:	90 93 51 02 	sts	0x0251, r25
     434:	80 93 50 02 	sts	0x0250, r24
		lcd_wr_char(thousand);
     438:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_wr_char>
		flag=1;
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	01 c0       	rjmp	.+2      	; 0x442 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     440:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     442:	c3 30       	cpi	r28, 0x03	; 3
     444:	d1 05       	cpc	r29, r1
     446:	11 f0       	breq	.+4      	; 0x44c <lcd_print+0x80>
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	b1 f4       	brne	.+44     	; 0x478 <lcd_print+0xac>
	{
		temp = value/100;
     44c:	c8 01       	movw	r24, r16
     44e:	64 e6       	ldi	r22, 0x64	; 100
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     456:	cb 01       	movw	r24, r22
     458:	70 93 39 02 	sts	0x0239, r23
     45c:	60 93 38 02 	sts	0x0238, r22
		hundred = temp%10 + 48;
     460:	6a e0       	ldi	r22, 0x0A	; 10
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     468:	c0 96       	adiw	r24, 0x30	; 48
     46a:	90 93 49 02 	sts	0x0249, r25
     46e:	80 93 48 02 	sts	0x0248, r24
		lcd_wr_char(hundred);
     472:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_wr_char>
		flag=1;
     476:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     478:	c2 30       	cpi	r28, 0x02	; 2
     47a:	d1 05       	cpc	r29, r1
     47c:	11 f0       	breq	.+4      	; 0x482 <lcd_print+0xb6>
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	b1 f4       	brne	.+44     	; 0x4ae <lcd_print+0xe2>
	{
		temp = value/10;
     482:	2a e0       	ldi	r18, 0x0A	; 10
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	c8 01       	movw	r24, r16
     488:	b9 01       	movw	r22, r18
     48a:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     48e:	cb 01       	movw	r24, r22
     490:	70 93 39 02 	sts	0x0239, r23
     494:	60 93 38 02 	sts	0x0238, r22
		tens = temp%10 + 48;
     498:	b9 01       	movw	r22, r18
     49a:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     49e:	c0 96       	adiw	r24, 0x30	; 48
     4a0:	90 93 42 02 	sts	0x0242, r25
     4a4:	80 93 41 02 	sts	0x0241, r24
		lcd_wr_char(tens);
     4a8:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_wr_char>
		flag=1;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     4ae:	c1 30       	cpi	r28, 0x01	; 1
     4b0:	d1 05       	cpc	r29, r1
     4b2:	11 f0       	breq	.+4      	; 0x4b8 <lcd_print+0xec>
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	61 f4       	brne	.+24     	; 0x4d0 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     4b8:	c8 01       	movw	r24, r16
     4ba:	6a e0       	ldi	r22, 0x0A	; 10
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	0e 94 a7 0a 	call	0x154e	; 0x154e <__udivmodhi4>
     4c2:	c0 96       	adiw	r24, 0x30	; 48
     4c4:	90 93 4f 02 	sts	0x024F, r25
     4c8:	80 93 4e 02 	sts	0x024E, r24
		lcd_wr_char(unit);
     4cc:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_wr_char>
	}
	if(digits>5)
     4d0:	c6 30       	cpi	r28, 0x06	; 6
     4d2:	d1 05       	cpc	r29, r1
     4d4:	1c f0       	brlt	.+6      	; 0x4dc <lcd_print+0x110>
	{
		lcd_wr_char('E');
     4d6:	85 e4       	ldi	r24, 0x45	; 69
     4d8:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_wr_char>
	}
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	08 95       	ret

000004e6 <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_wr_command>
}	
     4ec:	08 95       	ret

000004ee <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
     4ee:	87 b1       	in	r24, 0x07	; 7
     4f0:	87 6f       	ori	r24, 0xF7	; 247
     4f2:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
     4f4:	88 b1       	in	r24, 0x08	; 8
     4f6:	80 78       	andi	r24, 0x80	; 128
     4f8:	88 b9       	out	0x08, r24	; 8
}
     4fa:	08 95       	ret

000004fc <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
     4fc:	ec eb       	ldi	r30, 0xBC	; 188
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
     502:	80 e1       	ldi	r24, 0x10	; 16
     504:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
     508:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
     50c:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	80 83       	st	Z, r24
}
     514:	08 95       	ret

00000516 <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     516:	94 ea       	ldi	r25, 0xA4	; 164
     518:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     51c:	ec eb       	ldi	r30, 0xBC	; 188
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	90 81       	ld	r25, Z
     522:	99 23       	and	r25, r25
     524:	ec f7       	brge	.-6      	; 0x520 <write_byte+0xa>
     526:	ef ef       	ldi	r30, 0xFF	; 255
     528:	ff e8       	ldi	r31, 0x8F	; 143
     52a:	31 97       	sbiw	r30, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <write_byte+0x14>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <write_byte+0x1a>
     530:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
     532:	96 ea       	ldi	r25, 0xA6	; 166
     534:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     538:	94 e8       	ldi	r25, 0x84	; 132
     53a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     53e:	ec eb       	ldi	r30, 0xBC	; 188
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	90 81       	ld	r25, Z
     544:	99 23       	and	r25, r25
     546:	ec f7       	brge	.-6      	; 0x542 <write_byte+0x2c>
     548:	ef ef       	ldi	r30, 0xFF	; 255
     54a:	ff e8       	ldi	r31, 0x8F	; 143
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	f1 f7       	brne	.-4      	; 0x54c <write_byte+0x36>
     550:	00 c0       	rjmp	.+0      	; 0x552 <write_byte+0x3c>
     552:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     554:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     558:	94 e8       	ldi	r25, 0x84	; 132
     55a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     55e:	ec eb       	ldi	r30, 0xBC	; 188
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	90 81       	ld	r25, Z
     564:	99 23       	and	r25, r25
     566:	ec f7       	brge	.-6      	; 0x562 <write_byte+0x4c>
     568:	ef ef       	ldi	r30, 0xFF	; 255
     56a:	ff e8       	ldi	r31, 0x8F	; 143
     56c:	31 97       	sbiw	r30, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <write_byte+0x56>
     570:	00 c0       	rjmp	.+0      	; 0x572 <write_byte+0x5c>
     572:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     574:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     578:	84 e8       	ldi	r24, 0x84	; 132
     57a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     57e:	ec eb       	ldi	r30, 0xBC	; 188
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	88 23       	and	r24, r24
     586:	ec f7       	brge	.-6      	; 0x582 <write_byte+0x6c>
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	9f e8       	ldi	r25, 0x8F	; 143
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <write_byte+0x76>
     590:	00 c0       	rjmp	.+0      	; 0x592 <write_byte+0x7c>
     592:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     594:	84 e9       	ldi	r24, 0x94	; 148
     596:	80 93 bc 00 	sts	0x00BC, r24
}
     59a:	08 95       	ret

0000059c <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     59c:	94 ea       	ldi	r25, 0xA4	; 164
     59e:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5a2:	ec eb       	ldi	r30, 0xBC	; 188
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	90 81       	ld	r25, Z
     5a8:	99 23       	and	r25, r25
     5aa:	ec f7       	brge	.-6      	; 0x5a6 <read_byte+0xa>

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
     5ac:	96 ea       	ldi	r25, 0xA6	; 166
     5ae:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     5b2:	94 e8       	ldi	r25, 0x84	; 132
     5b4:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5b8:	ec eb       	ldi	r30, 0xBC	; 188
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	90 81       	ld	r25, Z
     5be:	99 23       	and	r25, r25
     5c0:	ec f7       	brge	.-6      	; 0x5bc <read_byte+0x20>

 TWDR = address;                                   // send address of register byte want to access register
     5c2:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     5c6:	84 e8       	ldi	r24, 0x84	; 132
     5c8:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5cc:	ec eb       	ldi	r30, 0xBC	; 188
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	88 23       	and	r24, r24
     5d4:	ec f7       	brge	.-6      	; 0x5d0 <read_byte+0x34>
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     5d6:	84 ea       	ldi	r24, 0xA4	; 164
     5d8:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5dc:	ec eb       	ldi	r30, 0xBC	; 188
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	88 23       	and	r24, r24
     5e4:	ec f7       	brge	.-6      	; 0x5e0 <read_byte+0x44>


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
     5e6:	87 ea       	ldi	r24, 0xA7	; 167
     5e8:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     5ec:	84 e8       	ldi	r24, 0x84	; 132
     5ee:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5f2:	ec eb       	ldi	r30, 0xBC	; 188
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	88 23       	and	r24, r24
     5fa:	ec f7       	brge	.-6      	; 0x5f6 <read_byte+0x5a>
 
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     5fc:	84 e8       	ldi	r24, 0x84	; 132
     5fe:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     602:	ec eb       	ldi	r30, 0xBC	; 188
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	88 23       	and	r24, r24
     60a:	ec f7       	brge	.-6      	; 0x606 <read_byte+0x6a>
 rtc_recv_data = TWDR;
     60c:	eb eb       	ldi	r30, 0xBB	; 187
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	80 81       	ld	r24, Z
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     612:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     614:	94 e8       	ldi	r25, 0x84	; 132
     616:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     61a:	ec eb       	ldi	r30, 0xBC	; 188
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	90 81       	ld	r25, Z
     620:	99 23       	and	r25, r25
     622:	ec f7       	brge	.-6      	; 0x61e <read_byte+0x82>
  
 return(rtc_recv_data);                            // return the read value to called function
}
     624:	08 95       	ret

00000626 <init_devices>:


// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
     626:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
     628:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_port_config>
 lcd_set_4bit();
     62c:	0e 94 11 01 	call	0x222	; 0x222 <lcd_set_4bit>
 lcd_init();
     630:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_init>
 twi_init();         // configur the I2cC, i.e TWI module 
     634:	0e 94 7e 02 	call	0x4fc	; 0x4fc <twi_init>
 sei();              // re-enable interrupts
     638:	78 94       	sei
 //all peripherals are now initialized
}
     63a:	08 95       	ret

0000063c <pr_int>:

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	c8 2f       	mov	r28, r24
     64a:	d6 2f       	mov	r29, r22
     64c:	8a 01       	movw	r16, r20
     64e:	79 01       	movw	r14, r18
	if (c<0)
     650:	55 23       	and	r21, r21
     652:	a4 f4       	brge	.+40     	; 0x67c <pr_int+0x40>
	{
		lcd_cursor(a,b);
     654:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_cursor>
		lcd_string("-");
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string>
		lcd_print(a,b+1,abs(c),d);
     660:	6d 2f       	mov	r22, r29
     662:	6f 5f       	subi	r22, 0xFF	; 255
     664:	a8 01       	movw	r20, r16
     666:	11 23       	and	r17, r17
     668:	24 f4       	brge	.+8      	; 0x672 <pr_int+0x36>
     66a:	44 27       	eor	r20, r20
     66c:	55 27       	eor	r21, r21
     66e:	40 1b       	sub	r20, r16
     670:	51 0b       	sbc	r21, r17
     672:	8c 2f       	mov	r24, r28
     674:	97 01       	movw	r18, r14
     676:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_print>
     67a:	0d c0       	rjmp	.+26     	; 0x696 <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
     67c:	0e 94 c6 01 	call	0x38c	; 0x38c <lcd_cursor>
		lcd_string("+");
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	0e 94 b7 01 	call	0x36e	; 0x36e <lcd_string>
		lcd_print(a,b+1,c,d);
     688:	6d 2f       	mov	r22, r29
     68a:	6f 5f       	subi	r22, 0xFF	; 255
     68c:	8c 2f       	mov	r24, r28
     68e:	a8 01       	movw	r20, r16
     690:	97 01       	movw	r18, r14
     692:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_print>
	}
}
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	08 95       	ret

000006a4 <sign>:
		return (n-65536);
	}
	else
		return n;
		
}
     6a4:	08 95       	ret

000006a6 <init_adxl>:
// Main Programme start here.
//-------------------------------------------------------------------------------
void init_adxl(void)
{   
 
 init_devices();
     6a6:	0e 94 13 03 	call	0x626	; 0x626 <init_devices>

	write_byte(0x0,0x2D);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	6d e2       	ldi	r22, 0x2D	; 45
     6ae:	0e 94 8b 02 	call	0x516	; 0x516 <write_byte>
	write_byte(0x8,0x2D);
     6b2:	88 e0       	ldi	r24, 0x08	; 8
     6b4:	6d e2       	ldi	r22, 0x2D	; 45
     6b6:	0e 94 8b 02 	call	0x516	; 0x516 <write_byte>
}
     6ba:	08 95       	ret

000006bc <acc_angle>:

int acc_angle(void)
{
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ef 92       	push	r14
     6c2:	ff 92       	push	r15
     6c4:	0f 93       	push	r16
     6c6:	1f 93       	push	r17
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
		int x_acc,y_acc,z_acc;
		//long x,y,z;
		float angle;
 
	  
	   x_byte1 = read_byte(X1);
     6cc:	82 e3       	ldi	r24, 0x32	; 50
     6ce:	0e 94 ce 02 	call	0x59c	; 0x59c <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
     6d2:	83 e3       	ldi	r24, 0x33	; 51
     6d4:	0e 94 ce 02 	call	0x59c	; 0x59c <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
     6d8:	84 e3       	ldi	r24, 0x34	; 52
     6da:	0e 94 ce 02 	call	0x59c	; 0x59c <read_byte>
     6de:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
     6e0:	85 e3       	ldi	r24, 0x35	; 53
     6e2:	0e 94 ce 02 	call	0x59c	; 0x59c <read_byte>
     6e6:	d8 2f       	mov	r29, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
     6e8:	86 e3       	ldi	r24, 0x36	; 54
     6ea:	0e 94 ce 02 	call	0x59c	; 0x59c <read_byte>
     6ee:	c8 2f       	mov	r28, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
     6f0:	87 e3       	ldi	r24, 0x37	; 55
     6f2:	0e 94 ce 02 	call	0x59c	; 0x59c <read_byte>
     6f6:	c8 2e       	mov	r12, r24
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
     6f8:	3d 2f       	mov	r19, r29
     6fa:	20 e0       	ldi	r18, 0x00	; 0
	  y_byte |= y_byte1;
     6fc:	80 2f       	mov	r24, r16
     6fe:	90 e0       	ldi	r25, 0x00	; 0
	  y_acc=sign(y_byte);
     700:	82 2b       	or	r24, r18
     702:	93 2b       	or	r25, r19
     704:	0e 94 52 03 	call	0x6a4	; 0x6a4 <sign>
     708:	8c 01       	movw	r16, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
     70a:	3c 2d       	mov	r19, r12
     70c:	20 e0       	ldi	r18, 0x00	; 0
	  z_byte |= z_byte1;
     70e:	8c 2f       	mov	r24, r28
     710:	90 e0       	ldi	r25, 0x00	; 0
	  z_acc=sign(z_byte);
     712:	82 2b       	or	r24, r18
     714:	93 2b       	or	r25, r19
     716:	0e 94 52 03 	call	0x6a4	; 0x6a4 <sign>
     71a:	ec 01       	movw	r28, r24
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
     71c:	b8 01       	movw	r22, r16
     71e:	88 27       	eor	r24, r24
     720:	77 fd       	sbrc	r23, 7
     722:	80 95       	com	r24
     724:	98 2f       	mov	r25, r24
     726:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__floatsisf>
     72a:	6b 01       	movw	r12, r22
     72c:	7c 01       	movw	r14, r24
     72e:	be 01       	movw	r22, r28
     730:	88 27       	eor	r24, r24
     732:	77 fd       	sbrc	r23, 7
     734:	80 95       	com	r24
     736:	98 2f       	mov	r25, r24
     738:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__floatsisf>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c7 01       	movw	r24, r14
     742:	b6 01       	movw	r22, r12
     744:	0e 94 c6 08 	call	0x118c	; 0x118c <__divsf3>
     748:	0e 94 9a 08 	call	0x1134	; 0x1134 <atan>
	  angle *= 180.0/3.14;
     74c:	23 ea       	ldi	r18, 0xA3	; 163
     74e:	3c e4       	ldi	r19, 0x4C	; 76
     750:	45 e6       	ldi	r20, 0x65	; 101
     752:	52 e4       	ldi	r21, 0x42	; 66
     754:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
	  //pr_int(1,1,angle,3);
	  
	return angle;
     758:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixsfsi>
}
     75c:	86 2f       	mov	r24, r22
     75e:	97 2f       	mov	r25, r23
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	df 90       	pop	r13
     76e:	cf 90       	pop	r12
     770:	08 95       	ret

00000772 <Compute>:
double error =0;



void Compute()
{
     772:	4f 92       	push	r4
     774:	5f 92       	push	r5
     776:	6f 92       	push	r6
     778:	7f 92       	push	r7
     77a:	af 92       	push	r10
     77c:	bf 92       	push	r11
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
	/*How long since we last calculated*/
	double timeChange = (double)millis();
     78e:	0e 94 ed 00 	call	0x1da	; 0x1da <millis>
     792:	9c 01       	movw	r18, r24
     794:	b9 01       	movw	r22, r18
     796:	88 27       	eor	r24, r24
     798:	77 fd       	sbrc	r23, 7
     79a:	80 95       	com	r24
     79c:	98 2f       	mov	r25, r24
     79e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__floatsisf>
     7a2:	d6 2f       	mov	r29, r22
     7a4:	c7 2f       	mov	r28, r23
     7a6:	b8 2e       	mov	r11, r24
     7a8:	a9 2e       	mov	r10, r25
	
	/*Compute all the working error variables*/
	error = Input - Setpoint;
     7aa:	20 91 4a 02 	lds	r18, 0x024A
     7ae:	30 91 4b 02 	lds	r19, 0x024B
     7b2:	40 91 4c 02 	lds	r20, 0x024C
     7b6:	50 91 4d 02 	lds	r21, 0x024D
     7ba:	20 93 0c 02 	sts	0x020C, r18
     7be:	30 93 0d 02 	sts	0x020D, r19
     7c2:	40 93 0e 02 	sts	0x020E, r20
     7c6:	50 93 0f 02 	sts	0x020F, r21
	errSum += (error * timeChange);//+(lastErr*lastTime)+(lastErr2*lastTime2);
     7ca:	78 2f       	mov	r23, r24
     7cc:	8d 2f       	mov	r24, r29
     7ce:	9c 2f       	mov	r25, r28
     7d0:	a7 2f       	mov	r26, r23
     7d2:	ba 2d       	mov	r27, r10
     7d4:	bc 01       	movw	r22, r24
     7d6:	cd 01       	movw	r24, r26
     7d8:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     7dc:	20 91 22 02 	lds	r18, 0x0222
     7e0:	30 91 23 02 	lds	r19, 0x0223
     7e4:	40 91 24 02 	lds	r20, 0x0224
     7e8:	50 91 25 02 	lds	r21, 0x0225
     7ec:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     7f0:	c6 2e       	mov	r12, r22
     7f2:	f7 2e       	mov	r15, r23
     7f4:	08 2f       	mov	r16, r24
     7f6:	19 2f       	mov	r17, r25
     7f8:	86 2f       	mov	r24, r22
     7fa:	9f 2d       	mov	r25, r15
     7fc:	a0 2f       	mov	r26, r16
     7fe:	b1 2f       	mov	r27, r17
     800:	80 93 22 02 	sts	0x0222, r24
     804:	90 93 23 02 	sts	0x0223, r25
     808:	a0 93 24 02 	sts	0x0224, r26
     80c:	b0 93 25 02 	sts	0x0225, r27
	if (errSum >= 255)
     810:	bc 01       	movw	r22, r24
     812:	cd 01       	movw	r24, r26
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	4f e7       	ldi	r20, 0x7F	; 127
     81a:	53 e4       	ldi	r21, 0x43	; 67
     81c:	0e 94 36 0a 	call	0x146c	; 0x146c <__gesf2>
     820:	88 23       	and	r24, r24
     822:	6c f0       	brlt	.+26     	; 0x83e <Compute+0xcc>
	{
		errSum = 255;
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	af e7       	ldi	r26, 0x7F	; 127
     82a:	b3 e4       	ldi	r27, 0x43	; 67
     82c:	80 93 22 02 	sts	0x0222, r24
     830:	90 93 23 02 	sts	0x0223, r25
     834:	a0 93 24 02 	sts	0x0224, r26
     838:	b0 93 25 02 	sts	0x0225, r27
     83c:	1a c0       	rjmp	.+52     	; 0x872 <Compute+0x100>
	}
	else if (errSum <= -255)
     83e:	8c 2d       	mov	r24, r12
     840:	9f 2d       	mov	r25, r15
     842:	a0 2f       	mov	r26, r16
     844:	b1 2f       	mov	r27, r17
     846:	bc 01       	movw	r22, r24
     848:	cd 01       	movw	r24, r26
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	4f e7       	ldi	r20, 0x7F	; 127
     850:	53 ec       	ldi	r21, 0xC3	; 195
     852:	0e 94 c2 08 	call	0x1184	; 0x1184 <__cmpsf2>
     856:	18 16       	cp	r1, r24
     858:	64 f0       	brlt	.+24     	; 0x872 <Compute+0x100>
	{
		errSum = -255;
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	af e7       	ldi	r26, 0x7F	; 127
     860:	b3 ec       	ldi	r27, 0xC3	; 195
     862:	80 93 22 02 	sts	0x0222, r24
     866:	90 93 23 02 	sts	0x0223, r25
     86a:	a0 93 24 02 	sts	0x0224, r26
     86e:	b0 93 25 02 	sts	0x0225, r27
	}
	double dErr = (error - lastErr) / timeChange;
     872:	c0 90 0c 02 	lds	r12, 0x020C
     876:	d0 90 0d 02 	lds	r13, 0x020D
     87a:	e0 90 0e 02 	lds	r14, 0x020E
     87e:	f0 90 0f 02 	lds	r15, 0x020F
	
	/*Compute PID Output*/
	Output = kp * error + ki * errSum + kd * dErr;
     882:	c7 01       	movw	r24, r14
     884:	b6 01       	movw	r22, r12
     886:	20 91 52 02 	lds	r18, 0x0252
     88a:	30 91 53 02 	lds	r19, 0x0253
     88e:	40 91 54 02 	lds	r20, 0x0254
     892:	50 91 55 02 	lds	r21, 0x0255
     896:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     89a:	2b 01       	movw	r4, r22
     89c:	3c 01       	movw	r6, r24
     89e:	60 91 43 02 	lds	r22, 0x0243
     8a2:	70 91 44 02 	lds	r23, 0x0244
     8a6:	80 91 45 02 	lds	r24, 0x0245
     8aa:	90 91 46 02 	lds	r25, 0x0246
     8ae:	20 91 22 02 	lds	r18, 0x0222
     8b2:	30 91 23 02 	lds	r19, 0x0223
     8b6:	40 91 24 02 	lds	r20, 0x0224
     8ba:	50 91 25 02 	lds	r21, 0x0225
     8be:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     8c2:	9b 01       	movw	r18, r22
     8c4:	ac 01       	movw	r20, r24
     8c6:	c3 01       	movw	r24, r6
     8c8:	b2 01       	movw	r22, r4
     8ca:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     8ce:	2b 01       	movw	r4, r22
     8d0:	3c 01       	movw	r6, r24
	}
	else if (errSum <= -255)
	{
		errSum = -255;
	}
	double dErr = (error - lastErr) / timeChange;
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	20 91 1e 02 	lds	r18, 0x021E
     8da:	30 91 1f 02 	lds	r19, 0x021F
     8de:	40 91 20 02 	lds	r20, 0x0220
     8e2:	50 91 21 02 	lds	r21, 0x0221
     8e6:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     8ea:	0d 2f       	mov	r16, r29
     8ec:	1c 2f       	mov	r17, r28
     8ee:	2b 2d       	mov	r18, r11
     8f0:	3a 2d       	mov	r19, r10
     8f2:	a9 01       	movw	r20, r18
     8f4:	98 01       	movw	r18, r16
     8f6:	0e 94 c6 08 	call	0x118c	; 0x118c <__divsf3>
	
	/*Compute PID Output*/
	Output = kp * error + ki * errSum + kd * dErr;
     8fa:	20 91 32 02 	lds	r18, 0x0232
     8fe:	30 91 33 02 	lds	r19, 0x0233
     902:	40 91 34 02 	lds	r20, 0x0234
     906:	50 91 35 02 	lds	r21, 0x0235
     90a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     90e:	9b 01       	movw	r18, r22
     910:	ac 01       	movw	r20, r24
     912:	c3 01       	movw	r24, r6
     914:	b2 01       	movw	r22, r4
     916:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     91a:	f6 2e       	mov	r15, r22
     91c:	17 2f       	mov	r17, r23
     91e:	c8 2e       	mov	r12, r24
     920:	09 2f       	mov	r16, r25
     922:	86 2f       	mov	r24, r22
     924:	91 2f       	mov	r25, r17
     926:	ac 2d       	mov	r26, r12
     928:	b0 2f       	mov	r27, r16
     92a:	80 93 3d 02 	sts	0x023D, r24
     92e:	90 93 3e 02 	sts	0x023E, r25
     932:	a0 93 3f 02 	sts	0x023F, r26
     936:	b0 93 40 02 	sts	0x0240, r27
 	if (Output >= 255)
     93a:	bc 01       	movw	r22, r24
     93c:	cd 01       	movw	r24, r26
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	4f e7       	ldi	r20, 0x7F	; 127
     944:	53 e4       	ldi	r21, 0x43	; 67
     946:	0e 94 36 0a 	call	0x146c	; 0x146c <__gesf2>
     94a:	88 23       	and	r24, r24
     94c:	6c f0       	brlt	.+26     	; 0x968 <Compute+0x1f6>
 	{
 		Output = 255;
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	af e7       	ldi	r26, 0x7F	; 127
     954:	b3 e4       	ldi	r27, 0x43	; 67
     956:	80 93 3d 02 	sts	0x023D, r24
     95a:	90 93 3e 02 	sts	0x023E, r25
     95e:	a0 93 3f 02 	sts	0x023F, r26
     962:	b0 93 40 02 	sts	0x0240, r27
     966:	1a c0       	rjmp	.+52     	; 0x99c <Compute+0x22a>
 	}
 	else if (Output <= -255)
     968:	8f 2d       	mov	r24, r15
     96a:	91 2f       	mov	r25, r17
     96c:	ac 2d       	mov	r26, r12
     96e:	b0 2f       	mov	r27, r16
     970:	bc 01       	movw	r22, r24
     972:	cd 01       	movw	r24, r26
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	4f e7       	ldi	r20, 0x7F	; 127
     97a:	53 ec       	ldi	r21, 0xC3	; 195
     97c:	0e 94 c2 08 	call	0x1184	; 0x1184 <__cmpsf2>
     980:	18 16       	cp	r1, r24
     982:	64 f0       	brlt	.+24     	; 0x99c <Compute+0x22a>
 	{
 		Output = -255;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	af e7       	ldi	r26, 0x7F	; 127
     98a:	b3 ec       	ldi	r27, 0xC3	; 195
     98c:	80 93 3d 02 	sts	0x023D, r24
     990:	90 93 3e 02 	sts	0x023E, r25
     994:	a0 93 3f 02 	sts	0x023F, r26
     998:	b0 93 40 02 	sts	0x0240, r27
 	}
	
	/*Remember some variables for next time*/
	lastErr2=lastErr;
     99c:	80 91 1e 02 	lds	r24, 0x021E
     9a0:	90 91 1f 02 	lds	r25, 0x021F
     9a4:	a0 91 20 02 	lds	r26, 0x0220
     9a8:	b0 91 21 02 	lds	r27, 0x0221
     9ac:	80 93 1a 02 	sts	0x021A, r24
     9b0:	90 93 1b 02 	sts	0x021B, r25
     9b4:	a0 93 1c 02 	sts	0x021C, r26
     9b8:	b0 93 1d 02 	sts	0x021D, r27
	lastErr = error;
     9bc:	80 91 0c 02 	lds	r24, 0x020C
     9c0:	90 91 0d 02 	lds	r25, 0x020D
     9c4:	a0 91 0e 02 	lds	r26, 0x020E
     9c8:	b0 91 0f 02 	lds	r27, 0x020F
     9cc:	80 93 1e 02 	sts	0x021E, r24
     9d0:	90 93 1f 02 	sts	0x021F, r25
     9d4:	a0 93 20 02 	sts	0x0220, r26
     9d8:	b0 93 21 02 	sts	0x0221, r27
	
	lastTime2=lastTime;
     9dc:	80 91 2e 02 	lds	r24, 0x022E
     9e0:	90 91 2f 02 	lds	r25, 0x022F
     9e4:	a0 91 30 02 	lds	r26, 0x0230
     9e8:	b0 91 31 02 	lds	r27, 0x0231
     9ec:	80 93 2a 02 	sts	0x022A, r24
     9f0:	90 93 2b 02 	sts	0x022B, r25
     9f4:	a0 93 2c 02 	sts	0x022C, r26
     9f8:	b0 93 2d 02 	sts	0x022D, r27
	lastTime = timeChange;
     9fc:	8d 2f       	mov	r24, r29
     9fe:	9c 2f       	mov	r25, r28
     a00:	ab 2d       	mov	r26, r11
     a02:	ba 2d       	mov	r27, r10
     a04:	80 93 2e 02 	sts	0x022E, r24
     a08:	90 93 2f 02 	sts	0x022F, r25
     a0c:	a0 93 30 02 	sts	0x0230, r26
     a10:	b0 93 31 02 	sts	0x0231, r27
}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	7f 90       	pop	r7
     a2a:	6f 90       	pop	r6
     a2c:	5f 90       	pop	r5
     a2e:	4f 90       	pop	r4
     a30:	08 95       	ret

00000a32 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     a32:	e1 ec       	ldi	r30, 0xC1	; 193
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     a38:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     a3c:	86 e0       	ldi	r24, 0x06	; 6
     a3e:	80 93 c2 00 	sts	0x00C2, r24
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
     a42:	8f e5       	ldi	r24, 0x5F	; 95
     a44:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     a48:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     a4c:	88 e9       	ldi	r24, 0x98	; 152
     a4e:	80 83       	st	Z, r24
}
     a50:	08 95       	ret

00000a52 <__vector_25>:

ISR(USART0_RX_vect)
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	0b b6       	in	r0, 0x3b	; 59
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	2f 93       	push	r18
     a66:	3f 93       	push	r19
     a68:	4f 93       	push	r20
     a6a:	5f 93       	push	r21
     a6c:	6f 93       	push	r22
     a6e:	7f 93       	push	r23
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	af 93       	push	r26
     a76:	bf 93       	push	r27
     a78:	ef 93       	push	r30
     a7a:	ff 93       	push	r31
	data = UDR0;
     a7c:	80 91 c6 00 	lds	r24, 0x00C6
     a80:	80 93 47 02 	sts	0x0247, r24
	//UDR0=data;
	if (data == 55)
     a84:	87 33       	cpi	r24, 0x37	; 55
     a86:	b9 f4       	brne	.+46     	; 0xab6 <__vector_25+0x64>
	{
		para = kp;
     a88:	80 91 52 02 	lds	r24, 0x0252
     a8c:	90 91 53 02 	lds	r25, 0x0253
     a90:	a0 91 54 02 	lds	r26, 0x0254
     a94:	b0 91 55 02 	lds	r27, 0x0255
     a98:	80 93 12 02 	sts	0x0212, r24
     a9c:	90 93 13 02 	sts	0x0213, r25
     aa0:	a0 93 14 02 	sts	0x0214, r26
     aa4:	b0 93 15 02 	sts	0x0215, r27
		para_flag=1;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	90 93 11 02 	sts	0x0211, r25
     ab0:	80 93 10 02 	sts	0x0210, r24
     ab4:	31 c0       	rjmp	.+98     	; 0xb18 <__vector_25+0xc6>
		
	}
	else if (data == 56)
     ab6:	88 33       	cpi	r24, 0x38	; 56
     ab8:	b9 f4       	brne	.+46     	; 0xae8 <__vector_25+0x96>
	{
		para = ki;
     aba:	80 91 43 02 	lds	r24, 0x0243
     abe:	90 91 44 02 	lds	r25, 0x0244
     ac2:	a0 91 45 02 	lds	r26, 0x0245
     ac6:	b0 91 46 02 	lds	r27, 0x0246
     aca:	80 93 12 02 	sts	0x0212, r24
     ace:	90 93 13 02 	sts	0x0213, r25
     ad2:	a0 93 14 02 	sts	0x0214, r26
     ad6:	b0 93 15 02 	sts	0x0215, r27
		para_flag=2;
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	90 93 11 02 	sts	0x0211, r25
     ae2:	80 93 10 02 	sts	0x0210, r24
     ae6:	18 c0       	rjmp	.+48     	; 0xb18 <__vector_25+0xc6>
	}
	else if (data == 57)
     ae8:	89 33       	cpi	r24, 0x39	; 57
     aea:	b1 f4       	brne	.+44     	; 0xb18 <__vector_25+0xc6>
	{
		para = kd;
     aec:	80 91 32 02 	lds	r24, 0x0232
     af0:	90 91 33 02 	lds	r25, 0x0233
     af4:	a0 91 34 02 	lds	r26, 0x0234
     af8:	b0 91 35 02 	lds	r27, 0x0235
     afc:	80 93 12 02 	sts	0x0212, r24
     b00:	90 93 13 02 	sts	0x0213, r25
     b04:	a0 93 14 02 	sts	0x0214, r26
     b08:	b0 93 15 02 	sts	0x0215, r27
		para_flag=3;
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	90 93 11 02 	sts	0x0211, r25
     b14:	80 93 10 02 	sts	0x0210, r24
	}
	
	
	if (data==49)
     b18:	80 91 47 02 	lds	r24, 0x0247
     b1c:	81 33       	cpi	r24, 0x31	; 49
     b1e:	c9 f4       	brne	.+50     	; 0xb52 <__vector_25+0x100>
	{
		para++;
     b20:	60 91 12 02 	lds	r22, 0x0212
     b24:	70 91 13 02 	lds	r23, 0x0213
     b28:	80 91 14 02 	lds	r24, 0x0214
     b2c:	90 91 15 02 	lds	r25, 0x0215
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e8       	ldi	r20, 0x80	; 128
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     b3c:	dc 01       	movw	r26, r24
     b3e:	cb 01       	movw	r24, r22
     b40:	80 93 12 02 	sts	0x0212, r24
     b44:	90 93 13 02 	sts	0x0213, r25
     b48:	a0 93 14 02 	sts	0x0214, r26
     b4c:	b0 93 15 02 	sts	0x0215, r27
     b50:	86 c0       	rjmp	.+268    	; 0xc5e <__vector_25+0x20c>
	}
	else if (data==50)
     b52:	82 33       	cpi	r24, 0x32	; 50
     b54:	c9 f4       	brne	.+50     	; 0xb88 <__vector_25+0x136>
	{
		para += 5;
     b56:	60 91 12 02 	lds	r22, 0x0212
     b5a:	70 91 13 02 	lds	r23, 0x0213
     b5e:	80 91 14 02 	lds	r24, 0x0214
     b62:	90 91 15 02 	lds	r25, 0x0215
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	40 ea       	ldi	r20, 0xA0	; 160
     b6c:	50 e4       	ldi	r21, 0x40	; 64
     b6e:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	80 93 12 02 	sts	0x0212, r24
     b7a:	90 93 13 02 	sts	0x0213, r25
     b7e:	a0 93 14 02 	sts	0x0214, r26
     b82:	b0 93 15 02 	sts	0x0215, r27
     b86:	6b c0       	rjmp	.+214    	; 0xc5e <__vector_25+0x20c>
	}
	else if (data==52)
     b88:	84 33       	cpi	r24, 0x34	; 52
     b8a:	c9 f4       	brne	.+50     	; 0xbbe <__vector_25+0x16c>
	{
		para--;
     b8c:	60 91 12 02 	lds	r22, 0x0212
     b90:	70 91 13 02 	lds	r23, 0x0213
     b94:	80 91 14 02 	lds	r24, 0x0214
     b98:	90 91 15 02 	lds	r25, 0x0215
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	80 93 12 02 	sts	0x0212, r24
     bb0:	90 93 13 02 	sts	0x0213, r25
     bb4:	a0 93 14 02 	sts	0x0214, r26
     bb8:	b0 93 15 02 	sts	0x0215, r27
     bbc:	50 c0       	rjmp	.+160    	; 0xc5e <__vector_25+0x20c>
	}
	else if (data==53)
     bbe:	85 33       	cpi	r24, 0x35	; 53
     bc0:	c9 f4       	brne	.+50     	; 0xbf4 <__vector_25+0x1a2>
	{
		para -= 5;
     bc2:	60 91 12 02 	lds	r22, 0x0212
     bc6:	70 91 13 02 	lds	r23, 0x0213
     bca:	80 91 14 02 	lds	r24, 0x0214
     bce:	90 91 15 02 	lds	r25, 0x0215
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 ea       	ldi	r20, 0xA0	; 160
     bd8:	50 e4       	ldi	r21, 0x40	; 64
     bda:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	80 93 12 02 	sts	0x0212, r24
     be6:	90 93 13 02 	sts	0x0213, r25
     bea:	a0 93 14 02 	sts	0x0214, r26
     bee:	b0 93 15 02 	sts	0x0215, r27
     bf2:	35 c0       	rjmp	.+106    	; 0xc5e <__vector_25+0x20c>
	}
	else if (data == 51)
     bf4:	83 33       	cpi	r24, 0x33	; 51
     bf6:	c9 f4       	brne	.+50     	; 0xc2a <__vector_25+0x1d8>
	{
		para += 0.1;
     bf8:	60 91 12 02 	lds	r22, 0x0212
     bfc:	70 91 13 02 	lds	r23, 0x0213
     c00:	80 91 14 02 	lds	r24, 0x0214
     c04:	90 91 15 02 	lds	r25, 0x0215
     c08:	2d ec       	ldi	r18, 0xCD	; 205
     c0a:	3c ec       	ldi	r19, 0xCC	; 204
     c0c:	4c ec       	ldi	r20, 0xCC	; 204
     c0e:	5d e3       	ldi	r21, 0x3D	; 61
     c10:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	80 93 12 02 	sts	0x0212, r24
     c1c:	90 93 13 02 	sts	0x0213, r25
     c20:	a0 93 14 02 	sts	0x0214, r26
     c24:	b0 93 15 02 	sts	0x0215, r27
     c28:	1a c0       	rjmp	.+52     	; 0xc5e <__vector_25+0x20c>
	}
	else if (data == 54)
     c2a:	86 33       	cpi	r24, 0x36	; 54
     c2c:	c1 f4       	brne	.+48     	; 0xc5e <__vector_25+0x20c>
	{
		para -=0.1;
     c2e:	60 91 12 02 	lds	r22, 0x0212
     c32:	70 91 13 02 	lds	r23, 0x0213
     c36:	80 91 14 02 	lds	r24, 0x0214
     c3a:	90 91 15 02 	lds	r25, 0x0215
     c3e:	2d ec       	ldi	r18, 0xCD	; 205
     c40:	3c ec       	ldi	r19, 0xCC	; 204
     c42:	4c ec       	ldi	r20, 0xCC	; 204
     c44:	5d e3       	ldi	r21, 0x3D	; 61
     c46:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	80 93 12 02 	sts	0x0212, r24
     c52:	90 93 13 02 	sts	0x0213, r25
     c56:	a0 93 14 02 	sts	0x0214, r26
     c5a:	b0 93 15 02 	sts	0x0215, r27
	}
	
	
	
	if (para_flag == 1)
     c5e:	80 91 10 02 	lds	r24, 0x0210
     c62:	90 91 11 02 	lds	r25, 0x0211
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	11 f5       	brne	.+68     	; 0xcb0 <__vector_25+0x25e>
	{
		kp = para;
     c6c:	60 91 12 02 	lds	r22, 0x0212
     c70:	70 91 13 02 	lds	r23, 0x0213
     c74:	80 91 14 02 	lds	r24, 0x0214
     c78:	90 91 15 02 	lds	r25, 0x0215
     c7c:	60 93 52 02 	sts	0x0252, r22
     c80:	70 93 53 02 	sts	0x0253, r23
     c84:	80 93 54 02 	sts	0x0254, r24
     c88:	90 93 55 02 	sts	0x0255, r25
		lcd_print(1,1,kp*10,4);
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e2       	ldi	r20, 0x20	; 32
     c92:	51 e4       	ldi	r21, 0x41	; 65
     c94:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     c98:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     c9c:	8b 01       	movw	r16, r22
     c9e:	9c 01       	movw	r18, r24
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	a8 01       	movw	r20, r16
     ca6:	24 e0       	ldi	r18, 0x04	; 4
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_print>
     cae:	49 c0       	rjmp	.+146    	; 0xd42 <__vector_25+0x2f0>
	}
	else if (para_flag == 2)
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	91 05       	cpc	r25, r1
     cb4:	11 f5       	brne	.+68     	; 0xcfa <__vector_25+0x2a8>
	{
		ki = para;
     cb6:	60 91 12 02 	lds	r22, 0x0212
     cba:	70 91 13 02 	lds	r23, 0x0213
     cbe:	80 91 14 02 	lds	r24, 0x0214
     cc2:	90 91 15 02 	lds	r25, 0x0215
     cc6:	60 93 43 02 	sts	0x0243, r22
     cca:	70 93 44 02 	sts	0x0244, r23
     cce:	80 93 45 02 	sts	0x0245, r24
     cd2:	90 93 46 02 	sts	0x0246, r25
		lcd_print(1,6,ki*10,4);
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e2       	ldi	r20, 0x20	; 32
     cdc:	51 e4       	ldi	r21, 0x41	; 65
     cde:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     ce2:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     ce6:	8b 01       	movw	r16, r22
     ce8:	9c 01       	movw	r18, r24
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	66 e0       	ldi	r22, 0x06	; 6
     cee:	a8 01       	movw	r20, r16
     cf0:	24 e0       	ldi	r18, 0x04	; 4
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_print>
     cf8:	24 c0       	rjmp	.+72     	; 0xd42 <__vector_25+0x2f0>
	}
	else if (para_flag == 3)
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	91 05       	cpc	r25, r1
     cfe:	09 f5       	brne	.+66     	; 0xd42 <__vector_25+0x2f0>
	{
		kd = para;
     d00:	60 91 12 02 	lds	r22, 0x0212
     d04:	70 91 13 02 	lds	r23, 0x0213
     d08:	80 91 14 02 	lds	r24, 0x0214
     d0c:	90 91 15 02 	lds	r25, 0x0215
     d10:	60 93 32 02 	sts	0x0232, r22
     d14:	70 93 33 02 	sts	0x0233, r23
     d18:	80 93 34 02 	sts	0x0234, r24
     d1c:	90 93 35 02 	sts	0x0235, r25
		lcd_print(1,11,kd*10,4);
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     d2c:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     d30:	8b 01       	movw	r16, r22
     d32:	9c 01       	movw	r18, r24
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	6b e0       	ldi	r22, 0x0B	; 11
     d38:	a8 01       	movw	r20, r16
     d3a:	24 e0       	ldi	r18, 0x04	; 4
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_print>
	}
	
}
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	0f 90       	pop	r0
     d60:	0b be       	out	0x3b, r0	; 59
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <motion_pin_config>:



void motion_pin_config (void)
{
	DDRL = DDRL | 0xE4;    //set direction of the PORTL2.5,6,7 pins as output
     d6c:	aa e0       	ldi	r26, 0x0A	; 10
     d6e:	b1 e0       	ldi	r27, 0x01	; 1
     d70:	8c 91       	ld	r24, X
     d72:	84 6e       	ori	r24, 0xE4	; 228
     d74:	8c 93       	st	X, r24
	PORTL = PORTL & 0x18;  //set initial value of the PORTL2.5,6,7 pins to logic 0
     d76:	eb e0       	ldi	r30, 0x0B	; 11
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	80 81       	ld	r24, Z
     d7c:	88 71       	andi	r24, 0x18	; 24
     d7e:	80 83       	st	Z, r24
	DDRL = DDRL | 0x18;    //Setting PL3 and PL4 pins as output for PWM generation
     d80:	8c 91       	ld	r24, X
     d82:	88 61       	ori	r24, 0x18	; 24
     d84:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18;  //PL3 and PL4 pins are for velocity control using PWM
     d86:	80 81       	ld	r24, Z
     d88:	88 61       	ori	r24, 0x18	; 24
     d8a:	80 83       	st	Z, r24
}
     d8c:	08 95       	ret

00000d8e <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
     d8e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <motion_pin_config>
}
     d92:	08 95       	ret

00000d94 <timer5_init>:
// TIMER5 initialize - prescale:1024
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// timer5 value: 56.250Hz
void timer5_init(void)
{
	TCCR5B = 0x00; //stop
     d94:	e1 e2       	ldi	r30, 0x21	; 33
     d96:	f1 e0       	ldi	r31, 0x01	; 1
     d98:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //setup
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
     da6:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
     daa:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
     dae:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
     db2:	80 93 2a 01 	sts	0x012A, r24
	TCCR5A = 0xA1;
     db6:	81 ea       	ldi	r24, 0xA1	; 161
     db8:	80 93 20 01 	sts	0x0120, r24
	TCCR5C = 0x00;
     dbc:	10 92 22 01 	sts	0x0122, r1
	TCCR5B = 0x0D; //start Timer
     dc0:	8d e0       	ldi	r24, 0x0D	; 13
     dc2:	80 83       	st	Z, r24
}
     dc4:	08 95       	ret

00000dc6 <set_PWM_value>:

// Function for robot velocity control
void set_PWM_value(unsigned char value) 	//set 8 bit PWM value
{
	OCR5AH = 0x00;
     dc6:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = value;
     dca:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
     dce:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = value;
     dd2:	80 93 2a 01 	sts	0x012A, r24
}
     dd6:	08 95       	ret

00000dd8 <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortLRestore = 0;

	PortLRestore = PORTL; 			// reading the PORTL's original status
     dd8:	eb e0       	ldi	r30, 0x0B	; 11
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	90 81       	ld	r25, Z
	PortLRestore &= 0x18; 			// setting lower direction nibbel to 0
     dde:	98 71       	andi	r25, 0x18	; 24
	PortLRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTL status
     de0:	89 2b       	or	r24, r25
	PORTL = PortLRestore; 			// setting the command to the port
     de2:	80 83       	st	Z, r24
}
     de4:	08 95       	ret

00000de6 <forward>:

void forward (void) 		//both inputs forward
{
	motion_set(0xA0);
     de6:	80 ea       	ldi	r24, 0xA0	; 160
     de8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     dec:	08 95       	ret

00000dee <back>:

void back (void) 			//both inputs backward
{
	motion_set(0x44);
     dee:	84 e4       	ldi	r24, 0x44	; 68
     df0:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     df4:	08 95       	ret

00000df6 <left>:

void left (void) 			//input12 backward, input34 forward
{
	motion_set(0x84);
     df6:	84 e8       	ldi	r24, 0x84	; 132
     df8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     dfc:	08 95       	ret

00000dfe <right>:

void right (void) 			//input34 backward, input12 forward
{
	motion_set(0x60);
     dfe:	80 e6       	ldi	r24, 0x60	; 96
     e00:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     e04:	08 95       	ret

00000e06 <soft_left>:

void soft_left (void) 		//input12 stationary, input34 forward
{
	motion_set(0x80);
     e06:	80 e8       	ldi	r24, 0x80	; 128
     e08:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     e0c:	08 95       	ret

00000e0e <soft_right>:

void soft_right (void)      //input12 forward, input34 stationary
{
	motion_set(0x20);
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     e14:	08 95       	ret

00000e16 <soft_left_2>:

void soft_left_2 (void)     //input12 backward, input34 stationary
{
	motion_set(0x40);
     e16:	80 e4       	ldi	r24, 0x40	; 64
     e18:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     e1c:	08 95       	ret

00000e1e <soft_right_2>:

void soft_right_2 (void)    //input12 stationary, input34 backward
{
	motion_set(0x04);
     e1e:	84 e0       	ldi	r24, 0x04	; 4
     e20:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     e24:	08 95       	ret

00000e26 <stop>:

void stop (void)            // both input stationary
{
	motion_set(0x00);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <motion_set>
}
     e2c:	08 95       	ret

00000e2e <init_devices1>:

void init_devices1 (void)
{
	cli(); //Clears the global interrupts
     e2e:	f8 94       	cli
	
	lcd_port_config();  // configure the LCD port
     e30:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_port_config>
	lcd_set_4bit();
     e34:	0e 94 11 01 	call	0x222	; 0x222 <lcd_set_4bit>
	lcd_init();
     e38:	0e 94 79 01 	call	0x2f2	; 0x2f2 <lcd_init>
	port_init();
     e3c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <port_init>
	timer5_init();
     e40:	0e 94 ca 06 	call	0xd94	; 0xd94 <timer5_init>
	sei(); //Enables the global interrupts
     e44:	78 94       	sei
}
     e46:	08 95       	ret

00000e48 <min>:

uint32_t min(uint32_t a, uint32_t b)
{
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	02 2f       	mov	r16, r18
     e52:	13 2f       	mov	r17, r19
     e54:	24 2f       	mov	r18, r20
     e56:	35 2f       	mov	r19, r21
     e58:	80 17       	cp	r24, r16
     e5a:	91 07       	cpc	r25, r17
     e5c:	a2 07       	cpc	r26, r18
     e5e:	b3 07       	cpc	r27, r19
     e60:	10 f4       	brcc	.+4      	; 0xe66 <min+0x1e>
     e62:	8c 01       	movw	r16, r24
     e64:	9d 01       	movw	r18, r26
	if(a < b)
		return a;
	else
		return b;
}
     e66:	60 2f       	mov	r22, r16
     e68:	71 2f       	mov	r23, r17
     e6a:	82 2f       	mov	r24, r18
     e6c:	93 2f       	mov	r25, r19
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	08 95       	ret

00000e74 <SetTunings>:

void SetTunings(double Kp, double Ki, double Kd)
{
     e74:	8f 92       	push	r8
     e76:	9f 92       	push	r9
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	4b 01       	movw	r8, r22
     e86:	5c 01       	movw	r10, r24
     e88:	da 01       	movw	r26, r20
     e8a:	c9 01       	movw	r24, r18
	kp = Kp;
     e8c:	80 92 52 02 	sts	0x0252, r8
     e90:	90 92 53 02 	sts	0x0253, r9
     e94:	a0 92 54 02 	sts	0x0254, r10
     e98:	b0 92 55 02 	sts	0x0255, r11
	ki = Ki;
     e9c:	80 93 43 02 	sts	0x0243, r24
     ea0:	90 93 44 02 	sts	0x0244, r25
     ea4:	a0 93 45 02 	sts	0x0245, r26
     ea8:	b0 93 46 02 	sts	0x0246, r27
	kd = Kd;
     eac:	e0 92 32 02 	sts	0x0232, r14
     eb0:	f0 92 33 02 	sts	0x0233, r15
     eb4:	00 93 34 02 	sts	0x0234, r16
     eb8:	10 93 35 02 	sts	0x0235, r17
}
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	9f 90       	pop	r9
     eca:	8f 90       	pop	r8
     ecc:	08 95       	ret

00000ece <main>:

int main(void)
{
	int acc_Angle;
	unsigned char pwm_value = 0;   // variable for velocity control
	init_adxl();
     ece:	0e 94 53 03 	call	0x6a6	; 0x6a6 <init_adxl>
	init_devices1();
     ed2:	0e 94 17 07 	call	0xe2e	; 0xe2e <init_devices1>
	uart0_init(); //Initailize UART1 for serial communiaction
     ed6:	0e 94 19 05 	call	0xa32	; 0xa32 <uart0_init>
	start_timer4();
     eda:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
	
	SetTunings(21,0.9,0);
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	88 ea       	ldi	r24, 0xA8	; 168
     ee4:	91 e4       	ldi	r25, 0x41	; 65
     ee6:	26 e6       	ldi	r18, 0x66	; 102
     ee8:	36 e6       	ldi	r19, 0x66	; 102
     eea:	46 e6       	ldi	r20, 0x66	; 102
     eec:	5f e3       	ldi	r21, 0x3F	; 63
     eee:	0f 2e       	mov	r0, r31
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	ef 2e       	mov	r14, r31
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	ff 2e       	mov	r15, r31
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	0f 2f       	mov	r16, r31
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	1f 2f       	mov	r17, r31
     f00:	f0 2d       	mov	r31, r0
     f02:	0e 94 3a 07 	call	0xe74	; 0xe74 <SetTunings>
	lcd_print(1,1,kp*10,4);
     f06:	60 91 52 02 	lds	r22, 0x0252
     f0a:	70 91 53 02 	lds	r23, 0x0253
     f0e:	80 91 54 02 	lds	r24, 0x0254
     f12:	90 91 55 02 	lds	r25, 0x0255
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	51 e4       	ldi	r21, 0x41	; 65
     f1e:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     f22:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     f26:	8b 01       	movw	r16, r22
     f28:	9c 01       	movw	r18, r24
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	a8 01       	movw	r20, r16
     f30:	24 e0       	ldi	r18, 0x04	; 4
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_print>
	lcd_print(1,6,ki*10,4);
     f38:	60 91 43 02 	lds	r22, 0x0243
     f3c:	70 91 44 02 	lds	r23, 0x0244
     f40:	80 91 45 02 	lds	r24, 0x0245
     f44:	90 91 46 02 	lds	r25, 0x0246
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e2       	ldi	r20, 0x20	; 32
     f4e:	51 e4       	ldi	r21, 0x41	; 65
     f50:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     f54:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     f58:	8b 01       	movw	r16, r22
     f5a:	9c 01       	movw	r18, r24
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	66 e0       	ldi	r22, 0x06	; 6
     f60:	a8 01       	movw	r20, r16
     f62:	24 e0       	ldi	r18, 0x04	; 4
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_print>
	lcd_print(1,11,kd*10,4);
     f6a:	60 91 32 02 	lds	r22, 0x0232
     f6e:	70 91 33 02 	lds	r23, 0x0233
     f72:	80 91 34 02 	lds	r24, 0x0234
     f76:	90 91 35 02 	lds	r25, 0x0235
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e2       	ldi	r20, 0x20	; 32
     f80:	51 e4       	ldi	r21, 0x41	; 65
     f82:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     f86:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
     f8a:	8b 01       	movw	r16, r22
     f8c:	9c 01       	movw	r18, r24
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	6b e0       	ldi	r22, 0x0B	; 11
     f92:	a8 01       	movw	r20, r16
     f94:	24 e0       	ldi	r18, 0x04	; 4
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_print>
	
	while(1)
	{    
		
		acc_Angle=acc_angle();
     f9c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <acc_angle>
		Input=(double)acc_Angle;
     fa0:	9c 01       	movw	r18, r24
     fa2:	b9 01       	movw	r22, r18
     fa4:	88 27       	eor	r24, r24
     fa6:	77 fd       	sbrc	r23, 7
     fa8:	80 95       	com	r24
     faa:	98 2f       	mov	r25, r24
     fac:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__floatsisf>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	80 93 4a 02 	sts	0x024A, r24
     fb8:	90 93 4b 02 	sts	0x024B, r25
     fbc:	a0 93 4c 02 	sts	0x024C, r26
     fc0:	b0 93 4d 02 	sts	0x024D, r27
		if (error*lastErr < 0)
     fc4:	60 91 0c 02 	lds	r22, 0x020C
     fc8:	70 91 0d 02 	lds	r23, 0x020D
     fcc:	80 91 0e 02 	lds	r24, 0x020E
     fd0:	90 91 0f 02 	lds	r25, 0x020F
     fd4:	20 91 1e 02 	lds	r18, 0x021E
     fd8:	30 91 1f 02 	lds	r19, 0x021F
     fdc:	40 91 20 02 	lds	r20, 0x0220
     fe0:	50 91 21 02 	lds	r21, 0x0221
     fe4:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	a9 01       	movw	r20, r18
     fee:	0e 94 c2 08 	call	0x1184	; 0x1184 <__cmpsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	44 f4       	brge	.+16     	; 0x1006 <main+0x138>
		{
		
			stop();
     ff6:	0e 94 13 07 	call	0xe26	; 0xe26 <stop>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f e8       	ldi	r25, 0x8F	; 143
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <main+0x130>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <main+0x136>
    1004:	00 00       	nop
			_delay_ms(10);
		}	
		//ki *= 0.1;	
		Compute();
    1006:	0e 94 b9 03 	call	0x772	; 0x772 <Compute>
		if (Output>0)
    100a:	c0 90 3d 02 	lds	r12, 0x023D
    100e:	d0 90 3e 02 	lds	r13, 0x023E
    1012:	e0 90 3f 02 	lds	r14, 0x023F
    1016:	f0 90 40 02 	lds	r15, 0x0240
    101a:	c7 01       	movw	r24, r14
    101c:	b6 01       	movw	r22, r12
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	a9 01       	movw	r20, r18
    1024:	0e 94 36 0a 	call	0x146c	; 0x146c <__gesf2>
    1028:	18 16       	cp	r1, r24
    102a:	54 f4       	brge	.+20     	; 0x1040 <main+0x172>
		{
			//set_PWM_value(min((Output*Output),255));
			set_PWM_value(Output);
    102c:	c7 01       	movw	r24, r14
    102e:	b6 01       	movw	r22, r12
    1030:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
    1034:	86 2f       	mov	r24, r22
    1036:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <set_PWM_value>
			forward();
    103a:	0e 94 f3 06 	call	0xde6	; 0xde6 <forward>
    103e:	ae cf       	rjmp	.-164    	; 0xf9c <main+0xce>
			//_delay_ms(10);
		}
		else if(Output<0)
    1040:	c7 01       	movw	r24, r14
    1042:	b6 01       	movw	r22, r12
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	a9 01       	movw	r20, r18
    104a:	0e 94 c2 08 	call	0x1184	; 0x1184 <__cmpsf2>
    104e:	88 23       	and	r24, r24
    1050:	0c f0       	brlt	.+2      	; 0x1054 <main+0x186>
    1052:	a4 cf       	rjmp	.-184    	; 0xf9c <main+0xce>
		{
			//set_PWM_value(min(Output*Output,255));
			set_PWM_value(-Output);
    1054:	c7 01       	movw	r24, r14
    1056:	b6 01       	movw	r22, r12
    1058:	90 58       	subi	r25, 0x80	; 128
    105a:	0e 94 33 09 	call	0x1266	; 0x1266 <__fixunssfsi>
    105e:	86 2f       	mov	r24, r22
    1060:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <set_PWM_value>
			back();
    1064:	0e 94 f7 06 	call	0xdee	; 0xdee <back>
    1068:	99 cf       	rjmp	.-206    	; 0xf9c <main+0xce>

0000106a <__subsf3>:
    106a:	50 58       	subi	r21, 0x80	; 128

0000106c <__addsf3>:
    106c:	bb 27       	eor	r27, r27
    106e:	aa 27       	eor	r26, r26
    1070:	0e d0       	rcall	.+28     	; 0x108e <__addsf3x>
    1072:	c2 c1       	rjmp	.+900    	; 0x13f8 <__fp_round>
    1074:	b3 d1       	rcall	.+870    	; 0x13dc <__fp_pscA>
    1076:	30 f0       	brcs	.+12     	; 0x1084 <__addsf3+0x18>
    1078:	b8 d1       	rcall	.+880    	; 0x13ea <__fp_pscB>
    107a:	20 f0       	brcs	.+8      	; 0x1084 <__addsf3+0x18>
    107c:	31 f4       	brne	.+12     	; 0x108a <__addsf3+0x1e>
    107e:	9f 3f       	cpi	r25, 0xFF	; 255
    1080:	11 f4       	brne	.+4      	; 0x1086 <__addsf3+0x1a>
    1082:	1e f4       	brtc	.+6      	; 0x108a <__addsf3+0x1e>
    1084:	83 c1       	rjmp	.+774    	; 0x138c <__fp_nan>
    1086:	0e f4       	brtc	.+2      	; 0x108a <__addsf3+0x1e>
    1088:	e0 95       	com	r30
    108a:	e7 fb       	bst	r30, 7
    108c:	79 c1       	rjmp	.+754    	; 0x1380 <__fp_inf>

0000108e <__addsf3x>:
    108e:	e9 2f       	mov	r30, r25
    1090:	c4 d1       	rcall	.+904    	; 0x141a <__fp_split3>
    1092:	80 f3       	brcs	.-32     	; 0x1074 <__addsf3+0x8>
    1094:	ba 17       	cp	r27, r26
    1096:	62 07       	cpc	r22, r18
    1098:	73 07       	cpc	r23, r19
    109a:	84 07       	cpc	r24, r20
    109c:	95 07       	cpc	r25, r21
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <__addsf3x+0x18>
    10a0:	71 f4       	brne	.+28     	; 0x10be <__addsf3x+0x30>
    10a2:	9e f5       	brtc	.+102    	; 0x110a <__addsf3x+0x7c>
    10a4:	dc c1       	rjmp	.+952    	; 0x145e <__fp_zero>
    10a6:	0e f4       	brtc	.+2      	; 0x10aa <__addsf3x+0x1c>
    10a8:	e0 95       	com	r30
    10aa:	0b 2e       	mov	r0, r27
    10ac:	ba 2f       	mov	r27, r26
    10ae:	a0 2d       	mov	r26, r0
    10b0:	0b 01       	movw	r0, r22
    10b2:	b9 01       	movw	r22, r18
    10b4:	90 01       	movw	r18, r0
    10b6:	0c 01       	movw	r0, r24
    10b8:	ca 01       	movw	r24, r20
    10ba:	a0 01       	movw	r20, r0
    10bc:	11 24       	eor	r1, r1
    10be:	ff 27       	eor	r31, r31
    10c0:	59 1b       	sub	r21, r25
    10c2:	99 f0       	breq	.+38     	; 0x10ea <__addsf3x+0x5c>
    10c4:	59 3f       	cpi	r21, 0xF9	; 249
    10c6:	50 f4       	brcc	.+20     	; 0x10dc <__addsf3x+0x4e>
    10c8:	50 3e       	cpi	r21, 0xE0	; 224
    10ca:	68 f1       	brcs	.+90     	; 0x1126 <__addsf3x+0x98>
    10cc:	1a 16       	cp	r1, r26
    10ce:	f0 40       	sbci	r31, 0x00	; 0
    10d0:	a2 2f       	mov	r26, r18
    10d2:	23 2f       	mov	r18, r19
    10d4:	34 2f       	mov	r19, r20
    10d6:	44 27       	eor	r20, r20
    10d8:	58 5f       	subi	r21, 0xF8	; 248
    10da:	f3 cf       	rjmp	.-26     	; 0x10c2 <__addsf3x+0x34>
    10dc:	46 95       	lsr	r20
    10de:	37 95       	ror	r19
    10e0:	27 95       	ror	r18
    10e2:	a7 95       	ror	r26
    10e4:	f0 40       	sbci	r31, 0x00	; 0
    10e6:	53 95       	inc	r21
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__addsf3x+0x4e>
    10ea:	7e f4       	brtc	.+30     	; 0x110a <__addsf3x+0x7c>
    10ec:	1f 16       	cp	r1, r31
    10ee:	ba 0b       	sbc	r27, r26
    10f0:	62 0b       	sbc	r22, r18
    10f2:	73 0b       	sbc	r23, r19
    10f4:	84 0b       	sbc	r24, r20
    10f6:	ba f0       	brmi	.+46     	; 0x1126 <__addsf3x+0x98>
    10f8:	91 50       	subi	r25, 0x01	; 1
    10fa:	a1 f0       	breq	.+40     	; 0x1124 <__addsf3x+0x96>
    10fc:	ff 0f       	add	r31, r31
    10fe:	bb 1f       	adc	r27, r27
    1100:	66 1f       	adc	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	c2 f7       	brpl	.-16     	; 0x10f8 <__addsf3x+0x6a>
    1108:	0e c0       	rjmp	.+28     	; 0x1126 <__addsf3x+0x98>
    110a:	ba 0f       	add	r27, r26
    110c:	62 1f       	adc	r22, r18
    110e:	73 1f       	adc	r23, r19
    1110:	84 1f       	adc	r24, r20
    1112:	48 f4       	brcc	.+18     	; 0x1126 <__addsf3x+0x98>
    1114:	87 95       	ror	r24
    1116:	77 95       	ror	r23
    1118:	67 95       	ror	r22
    111a:	b7 95       	ror	r27
    111c:	f7 95       	ror	r31
    111e:	9e 3f       	cpi	r25, 0xFE	; 254
    1120:	08 f0       	brcs	.+2      	; 0x1124 <__addsf3x+0x96>
    1122:	b3 cf       	rjmp	.-154    	; 0x108a <__addsf3+0x1e>
    1124:	93 95       	inc	r25
    1126:	88 0f       	add	r24, r24
    1128:	08 f0       	brcs	.+2      	; 0x112c <__addsf3x+0x9e>
    112a:	99 27       	eor	r25, r25
    112c:	ee 0f       	add	r30, r30
    112e:	97 95       	ror	r25
    1130:	87 95       	ror	r24
    1132:	08 95       	ret

00001134 <atan>:
    1134:	df 93       	push	r29
    1136:	dd 27       	eor	r29, r29
    1138:	b9 2f       	mov	r27, r25
    113a:	bf 77       	andi	r27, 0x7F	; 127
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	16 16       	cp	r1, r22
    1142:	17 06       	cpc	r1, r23
    1144:	48 07       	cpc	r20, r24
    1146:	5b 07       	cpc	r21, r27
    1148:	10 f4       	brcc	.+4      	; 0x114e <atan+0x1a>
    114a:	d9 2f       	mov	r29, r25
    114c:	93 d1       	rcall	.+806    	; 0x1474 <inverse>
    114e:	9f 93       	push	r25
    1150:	8f 93       	push	r24
    1152:	7f 93       	push	r23
    1154:	6f 93       	push	r22
    1156:	f8 d1       	rcall	.+1008   	; 0x1548 <square>
    1158:	e4 ee       	ldi	r30, 0xE4	; 228
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	1a d1       	rcall	.+564    	; 0x1392 <__fp_powser>
    115e:	4c d1       	rcall	.+664    	; 0x13f8 <__fp_round>
    1160:	2f 91       	pop	r18
    1162:	3f 91       	pop	r19
    1164:	4f 91       	pop	r20
    1166:	5f 91       	pop	r21
    1168:	98 d1       	rcall	.+816    	; 0x149a <__mulsf3x>
    116a:	dd 23       	and	r29, r29
    116c:	49 f0       	breq	.+18     	; 0x1180 <atan+0x4c>
    116e:	90 58       	subi	r25, 0x80	; 128
    1170:	a2 ea       	ldi	r26, 0xA2	; 162
    1172:	2a ed       	ldi	r18, 0xDA	; 218
    1174:	3f e0       	ldi	r19, 0x0F	; 15
    1176:	49 ec       	ldi	r20, 0xC9	; 201
    1178:	5f e3       	ldi	r21, 0x3F	; 63
    117a:	d0 78       	andi	r29, 0x80	; 128
    117c:	5d 27       	eor	r21, r29
    117e:	87 df       	rcall	.-242    	; 0x108e <__addsf3x>
    1180:	df 91       	pop	r29
    1182:	3a c1       	rjmp	.+628    	; 0x13f8 <__fp_round>

00001184 <__cmpsf2>:
    1184:	d9 d0       	rcall	.+434    	; 0x1338 <__fp_cmp>
    1186:	08 f4       	brcc	.+2      	; 0x118a <__cmpsf2+0x6>
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	08 95       	ret

0000118c <__divsf3>:
    118c:	0c d0       	rcall	.+24     	; 0x11a6 <__divsf3x>
    118e:	34 c1       	rjmp	.+616    	; 0x13f8 <__fp_round>
    1190:	2c d1       	rcall	.+600    	; 0x13ea <__fp_pscB>
    1192:	40 f0       	brcs	.+16     	; 0x11a4 <__divsf3+0x18>
    1194:	23 d1       	rcall	.+582    	; 0x13dc <__fp_pscA>
    1196:	30 f0       	brcs	.+12     	; 0x11a4 <__divsf3+0x18>
    1198:	21 f4       	brne	.+8      	; 0x11a2 <__divsf3+0x16>
    119a:	5f 3f       	cpi	r21, 0xFF	; 255
    119c:	19 f0       	breq	.+6      	; 0x11a4 <__divsf3+0x18>
    119e:	f0 c0       	rjmp	.+480    	; 0x1380 <__fp_inf>
    11a0:	51 11       	cpse	r21, r1
    11a2:	5e c1       	rjmp	.+700    	; 0x1460 <__fp_szero>
    11a4:	f3 c0       	rjmp	.+486    	; 0x138c <__fp_nan>

000011a6 <__divsf3x>:
    11a6:	39 d1       	rcall	.+626    	; 0x141a <__fp_split3>
    11a8:	98 f3       	brcs	.-26     	; 0x1190 <__divsf3+0x4>

000011aa <__divsf3_pse>:
    11aa:	99 23       	and	r25, r25
    11ac:	c9 f3       	breq	.-14     	; 0x11a0 <__divsf3+0x14>
    11ae:	55 23       	and	r21, r21
    11b0:	b1 f3       	breq	.-20     	; 0x119e <__divsf3+0x12>
    11b2:	95 1b       	sub	r25, r21
    11b4:	55 0b       	sbc	r21, r21
    11b6:	bb 27       	eor	r27, r27
    11b8:	aa 27       	eor	r26, r26
    11ba:	62 17       	cp	r22, r18
    11bc:	73 07       	cpc	r23, r19
    11be:	84 07       	cpc	r24, r20
    11c0:	38 f0       	brcs	.+14     	; 0x11d0 <__divsf3_pse+0x26>
    11c2:	9f 5f       	subi	r25, 0xFF	; 255
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	22 0f       	add	r18, r18
    11c8:	33 1f       	adc	r19, r19
    11ca:	44 1f       	adc	r20, r20
    11cc:	aa 1f       	adc	r26, r26
    11ce:	a9 f3       	breq	.-22     	; 0x11ba <__divsf3_pse+0x10>
    11d0:	33 d0       	rcall	.+102    	; 0x1238 <__divsf3_pse+0x8e>
    11d2:	0e 2e       	mov	r0, r30
    11d4:	3a f0       	brmi	.+14     	; 0x11e4 <__divsf3_pse+0x3a>
    11d6:	e0 e8       	ldi	r30, 0x80	; 128
    11d8:	30 d0       	rcall	.+96     	; 0x123a <__divsf3_pse+0x90>
    11da:	91 50       	subi	r25, 0x01	; 1
    11dc:	50 40       	sbci	r21, 0x00	; 0
    11de:	e6 95       	lsr	r30
    11e0:	00 1c       	adc	r0, r0
    11e2:	ca f7       	brpl	.-14     	; 0x11d6 <__divsf3_pse+0x2c>
    11e4:	29 d0       	rcall	.+82     	; 0x1238 <__divsf3_pse+0x8e>
    11e6:	fe 2f       	mov	r31, r30
    11e8:	27 d0       	rcall	.+78     	; 0x1238 <__divsf3_pse+0x8e>
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	bb 1f       	adc	r27, r27
    11f2:	26 17       	cp	r18, r22
    11f4:	37 07       	cpc	r19, r23
    11f6:	48 07       	cpc	r20, r24
    11f8:	ab 07       	cpc	r26, r27
    11fa:	b0 e8       	ldi	r27, 0x80	; 128
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__divsf3_pse+0x56>
    11fe:	bb 0b       	sbc	r27, r27
    1200:	80 2d       	mov	r24, r0
    1202:	bf 01       	movw	r22, r30
    1204:	ff 27       	eor	r31, r31
    1206:	93 58       	subi	r25, 0x83	; 131
    1208:	5f 4f       	sbci	r21, 0xFF	; 255
    120a:	2a f0       	brmi	.+10     	; 0x1216 <__divsf3_pse+0x6c>
    120c:	9e 3f       	cpi	r25, 0xFE	; 254
    120e:	51 05       	cpc	r21, r1
    1210:	68 f0       	brcs	.+26     	; 0x122c <__divsf3_pse+0x82>
    1212:	b6 c0       	rjmp	.+364    	; 0x1380 <__fp_inf>
    1214:	25 c1       	rjmp	.+586    	; 0x1460 <__fp_szero>
    1216:	5f 3f       	cpi	r21, 0xFF	; 255
    1218:	ec f3       	brlt	.-6      	; 0x1214 <__divsf3_pse+0x6a>
    121a:	98 3e       	cpi	r25, 0xE8	; 232
    121c:	dc f3       	brlt	.-10     	; 0x1214 <__divsf3_pse+0x6a>
    121e:	86 95       	lsr	r24
    1220:	77 95       	ror	r23
    1222:	67 95       	ror	r22
    1224:	b7 95       	ror	r27
    1226:	f7 95       	ror	r31
    1228:	9f 5f       	subi	r25, 0xFF	; 255
    122a:	c9 f7       	brne	.-14     	; 0x121e <__divsf3_pse+0x74>
    122c:	88 0f       	add	r24, r24
    122e:	91 1d       	adc	r25, r1
    1230:	96 95       	lsr	r25
    1232:	87 95       	ror	r24
    1234:	97 f9       	bld	r25, 7
    1236:	08 95       	ret
    1238:	e1 e0       	ldi	r30, 0x01	; 1
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	88 1f       	adc	r24, r24
    1240:	bb 1f       	adc	r27, r27
    1242:	62 17       	cp	r22, r18
    1244:	73 07       	cpc	r23, r19
    1246:	84 07       	cpc	r24, r20
    1248:	ba 07       	cpc	r27, r26
    124a:	20 f0       	brcs	.+8      	; 0x1254 <__divsf3_pse+0xaa>
    124c:	62 1b       	sub	r22, r18
    124e:	73 0b       	sbc	r23, r19
    1250:	84 0b       	sbc	r24, r20
    1252:	ba 0b       	sbc	r27, r26
    1254:	ee 1f       	adc	r30, r30
    1256:	88 f7       	brcc	.-30     	; 0x123a <__divsf3_pse+0x90>
    1258:	e0 95       	com	r30
    125a:	08 95       	ret

0000125c <__fixsfsi>:
    125c:	04 d0       	rcall	.+8      	; 0x1266 <__fixunssfsi>
    125e:	68 94       	set
    1260:	b1 11       	cpse	r27, r1
    1262:	fe c0       	rjmp	.+508    	; 0x1460 <__fp_szero>
    1264:	08 95       	ret

00001266 <__fixunssfsi>:
    1266:	e1 d0       	rcall	.+450    	; 0x142a <__fp_splitA>
    1268:	88 f0       	brcs	.+34     	; 0x128c <__fixunssfsi+0x26>
    126a:	9f 57       	subi	r25, 0x7F	; 127
    126c:	90 f0       	brcs	.+36     	; 0x1292 <__fixunssfsi+0x2c>
    126e:	b9 2f       	mov	r27, r25
    1270:	99 27       	eor	r25, r25
    1272:	b7 51       	subi	r27, 0x17	; 23
    1274:	a0 f0       	brcs	.+40     	; 0x129e <__fixunssfsi+0x38>
    1276:	d1 f0       	breq	.+52     	; 0x12ac <__fixunssfsi+0x46>
    1278:	66 0f       	add	r22, r22
    127a:	77 1f       	adc	r23, r23
    127c:	88 1f       	adc	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	1a f0       	brmi	.+6      	; 0x1288 <__fixunssfsi+0x22>
    1282:	ba 95       	dec	r27
    1284:	c9 f7       	brne	.-14     	; 0x1278 <__fixunssfsi+0x12>
    1286:	12 c0       	rjmp	.+36     	; 0x12ac <__fixunssfsi+0x46>
    1288:	b1 30       	cpi	r27, 0x01	; 1
    128a:	81 f0       	breq	.+32     	; 0x12ac <__fixunssfsi+0x46>
    128c:	e8 d0       	rcall	.+464    	; 0x145e <__fp_zero>
    128e:	b1 e0       	ldi	r27, 0x01	; 1
    1290:	08 95       	ret
    1292:	e5 c0       	rjmp	.+458    	; 0x145e <__fp_zero>
    1294:	67 2f       	mov	r22, r23
    1296:	78 2f       	mov	r23, r24
    1298:	88 27       	eor	r24, r24
    129a:	b8 5f       	subi	r27, 0xF8	; 248
    129c:	39 f0       	breq	.+14     	; 0x12ac <__fixunssfsi+0x46>
    129e:	b9 3f       	cpi	r27, 0xF9	; 249
    12a0:	cc f3       	brlt	.-14     	; 0x1294 <__fixunssfsi+0x2e>
    12a2:	86 95       	lsr	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	b3 95       	inc	r27
    12aa:	d9 f7       	brne	.-10     	; 0x12a2 <__fixunssfsi+0x3c>
    12ac:	3e f4       	brtc	.+14     	; 0x12bc <__fixunssfsi+0x56>
    12ae:	90 95       	com	r25
    12b0:	80 95       	com	r24
    12b2:	70 95       	com	r23
    12b4:	61 95       	neg	r22
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__floatunsisf>:
    12be:	e8 94       	clt
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <__floatsisf+0x12>

000012c2 <__floatsisf>:
    12c2:	97 fb       	bst	r25, 7
    12c4:	3e f4       	brtc	.+14     	; 0x12d4 <__floatsisf+0x12>
    12c6:	90 95       	com	r25
    12c8:	80 95       	com	r24
    12ca:	70 95       	com	r23
    12cc:	61 95       	neg	r22
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	8f 4f       	sbci	r24, 0xFF	; 255
    12d2:	9f 4f       	sbci	r25, 0xFF	; 255
    12d4:	99 23       	and	r25, r25
    12d6:	a9 f0       	breq	.+42     	; 0x1302 <__floatsisf+0x40>
    12d8:	f9 2f       	mov	r31, r25
    12da:	96 e9       	ldi	r25, 0x96	; 150
    12dc:	bb 27       	eor	r27, r27
    12de:	93 95       	inc	r25
    12e0:	f6 95       	lsr	r31
    12e2:	87 95       	ror	r24
    12e4:	77 95       	ror	r23
    12e6:	67 95       	ror	r22
    12e8:	b7 95       	ror	r27
    12ea:	f1 11       	cpse	r31, r1
    12ec:	f8 cf       	rjmp	.-16     	; 0x12de <__floatsisf+0x1c>
    12ee:	fa f4       	brpl	.+62     	; 0x132e <__floatsisf+0x6c>
    12f0:	bb 0f       	add	r27, r27
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <__floatsisf+0x36>
    12f4:	60 ff       	sbrs	r22, 0
    12f6:	1b c0       	rjmp	.+54     	; 0x132e <__floatsisf+0x6c>
    12f8:	6f 5f       	subi	r22, 0xFF	; 255
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	16 c0       	rjmp	.+44     	; 0x132e <__floatsisf+0x6c>
    1302:	88 23       	and	r24, r24
    1304:	11 f0       	breq	.+4      	; 0x130a <__floatsisf+0x48>
    1306:	96 e9       	ldi	r25, 0x96	; 150
    1308:	11 c0       	rjmp	.+34     	; 0x132c <__floatsisf+0x6a>
    130a:	77 23       	and	r23, r23
    130c:	21 f0       	breq	.+8      	; 0x1316 <__floatsisf+0x54>
    130e:	9e e8       	ldi	r25, 0x8E	; 142
    1310:	87 2f       	mov	r24, r23
    1312:	76 2f       	mov	r23, r22
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <__floatsisf+0x5e>
    1316:	66 23       	and	r22, r22
    1318:	71 f0       	breq	.+28     	; 0x1336 <__floatsisf+0x74>
    131a:	96 e8       	ldi	r25, 0x86	; 134
    131c:	86 2f       	mov	r24, r22
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	2a f0       	brmi	.+10     	; 0x132e <__floatsisf+0x6c>
    1324:	9a 95       	dec	r25
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	da f7       	brpl	.-10     	; 0x1324 <__floatsisf+0x62>
    132e:	88 0f       	add	r24, r24
    1330:	96 95       	lsr	r25
    1332:	87 95       	ror	r24
    1334:	97 f9       	bld	r25, 7
    1336:	08 95       	ret

00001338 <__fp_cmp>:
    1338:	99 0f       	add	r25, r25
    133a:	00 08       	sbc	r0, r0
    133c:	55 0f       	add	r21, r21
    133e:	aa 0b       	sbc	r26, r26
    1340:	e0 e8       	ldi	r30, 0x80	; 128
    1342:	fe ef       	ldi	r31, 0xFE	; 254
    1344:	16 16       	cp	r1, r22
    1346:	17 06       	cpc	r1, r23
    1348:	e8 07       	cpc	r30, r24
    134a:	f9 07       	cpc	r31, r25
    134c:	c0 f0       	brcs	.+48     	; 0x137e <__fp_cmp+0x46>
    134e:	12 16       	cp	r1, r18
    1350:	13 06       	cpc	r1, r19
    1352:	e4 07       	cpc	r30, r20
    1354:	f5 07       	cpc	r31, r21
    1356:	98 f0       	brcs	.+38     	; 0x137e <__fp_cmp+0x46>
    1358:	62 1b       	sub	r22, r18
    135a:	73 0b       	sbc	r23, r19
    135c:	84 0b       	sbc	r24, r20
    135e:	95 0b       	sbc	r25, r21
    1360:	39 f4       	brne	.+14     	; 0x1370 <__fp_cmp+0x38>
    1362:	0a 26       	eor	r0, r26
    1364:	61 f0       	breq	.+24     	; 0x137e <__fp_cmp+0x46>
    1366:	23 2b       	or	r18, r19
    1368:	24 2b       	or	r18, r20
    136a:	25 2b       	or	r18, r21
    136c:	21 f4       	brne	.+8      	; 0x1376 <__fp_cmp+0x3e>
    136e:	08 95       	ret
    1370:	0a 26       	eor	r0, r26
    1372:	09 f4       	brne	.+2      	; 0x1376 <__fp_cmp+0x3e>
    1374:	a1 40       	sbci	r26, 0x01	; 1
    1376:	a6 95       	lsr	r26
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	81 1d       	adc	r24, r1
    137c:	81 1d       	adc	r24, r1
    137e:	08 95       	ret

00001380 <__fp_inf>:
    1380:	97 f9       	bld	r25, 7
    1382:	9f 67       	ori	r25, 0x7F	; 127
    1384:	80 e8       	ldi	r24, 0x80	; 128
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	08 95       	ret

0000138c <__fp_nan>:
    138c:	9f ef       	ldi	r25, 0xFF	; 255
    138e:	80 ec       	ldi	r24, 0xC0	; 192
    1390:	08 95       	ret

00001392 <__fp_powser>:
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	1f 93       	push	r17
    1398:	0f 93       	push	r16
    139a:	ff 92       	push	r15
    139c:	ef 92       	push	r14
    139e:	df 92       	push	r13
    13a0:	7b 01       	movw	r14, r22
    13a2:	8c 01       	movw	r16, r24
    13a4:	68 94       	set
    13a6:	05 c0       	rjmp	.+10     	; 0x13b2 <__fp_powser+0x20>
    13a8:	da 2e       	mov	r13, r26
    13aa:	ef 01       	movw	r28, r30
    13ac:	76 d0       	rcall	.+236    	; 0x149a <__mulsf3x>
    13ae:	fe 01       	movw	r30, r28
    13b0:	e8 94       	clt
    13b2:	a5 91       	lpm	r26, Z+
    13b4:	25 91       	lpm	r18, Z+
    13b6:	35 91       	lpm	r19, Z+
    13b8:	45 91       	lpm	r20, Z+
    13ba:	55 91       	lpm	r21, Z+
    13bc:	ae f3       	brts	.-22     	; 0x13a8 <__fp_powser+0x16>
    13be:	ef 01       	movw	r28, r30
    13c0:	66 de       	rcall	.-820    	; 0x108e <__addsf3x>
    13c2:	fe 01       	movw	r30, r28
    13c4:	97 01       	movw	r18, r14
    13c6:	a8 01       	movw	r20, r16
    13c8:	da 94       	dec	r13
    13ca:	79 f7       	brne	.-34     	; 0x13aa <__fp_powser+0x18>
    13cc:	df 90       	pop	r13
    13ce:	ef 90       	pop	r14
    13d0:	ff 90       	pop	r15
    13d2:	0f 91       	pop	r16
    13d4:	1f 91       	pop	r17
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	08 95       	ret

000013dc <__fp_pscA>:
    13dc:	00 24       	eor	r0, r0
    13de:	0a 94       	dec	r0
    13e0:	16 16       	cp	r1, r22
    13e2:	17 06       	cpc	r1, r23
    13e4:	18 06       	cpc	r1, r24
    13e6:	09 06       	cpc	r0, r25
    13e8:	08 95       	ret

000013ea <__fp_pscB>:
    13ea:	00 24       	eor	r0, r0
    13ec:	0a 94       	dec	r0
    13ee:	12 16       	cp	r1, r18
    13f0:	13 06       	cpc	r1, r19
    13f2:	14 06       	cpc	r1, r20
    13f4:	05 06       	cpc	r0, r21
    13f6:	08 95       	ret

000013f8 <__fp_round>:
    13f8:	09 2e       	mov	r0, r25
    13fa:	03 94       	inc	r0
    13fc:	00 0c       	add	r0, r0
    13fe:	11 f4       	brne	.+4      	; 0x1404 <__fp_round+0xc>
    1400:	88 23       	and	r24, r24
    1402:	52 f0       	brmi	.+20     	; 0x1418 <__fp_round+0x20>
    1404:	bb 0f       	add	r27, r27
    1406:	40 f4       	brcc	.+16     	; 0x1418 <__fp_round+0x20>
    1408:	bf 2b       	or	r27, r31
    140a:	11 f4       	brne	.+4      	; 0x1410 <__fp_round+0x18>
    140c:	60 ff       	sbrs	r22, 0
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <__fp_round+0x20>
    1410:	6f 5f       	subi	r22, 0xFF	; 255
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	8f 4f       	sbci	r24, 0xFF	; 255
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	08 95       	ret

0000141a <__fp_split3>:
    141a:	57 fd       	sbrc	r21, 7
    141c:	90 58       	subi	r25, 0x80	; 128
    141e:	44 0f       	add	r20, r20
    1420:	55 1f       	adc	r21, r21
    1422:	59 f0       	breq	.+22     	; 0x143a <__fp_splitA+0x10>
    1424:	5f 3f       	cpi	r21, 0xFF	; 255
    1426:	71 f0       	breq	.+28     	; 0x1444 <__fp_splitA+0x1a>
    1428:	47 95       	ror	r20

0000142a <__fp_splitA>:
    142a:	88 0f       	add	r24, r24
    142c:	97 fb       	bst	r25, 7
    142e:	99 1f       	adc	r25, r25
    1430:	61 f0       	breq	.+24     	; 0x144a <__fp_splitA+0x20>
    1432:	9f 3f       	cpi	r25, 0xFF	; 255
    1434:	79 f0       	breq	.+30     	; 0x1454 <__fp_splitA+0x2a>
    1436:	87 95       	ror	r24
    1438:	08 95       	ret
    143a:	12 16       	cp	r1, r18
    143c:	13 06       	cpc	r1, r19
    143e:	14 06       	cpc	r1, r20
    1440:	55 1f       	adc	r21, r21
    1442:	f2 cf       	rjmp	.-28     	; 0x1428 <__fp_split3+0xe>
    1444:	46 95       	lsr	r20
    1446:	f1 df       	rcall	.-30     	; 0x142a <__fp_splitA>
    1448:	08 c0       	rjmp	.+16     	; 0x145a <__fp_splitA+0x30>
    144a:	16 16       	cp	r1, r22
    144c:	17 06       	cpc	r1, r23
    144e:	18 06       	cpc	r1, r24
    1450:	99 1f       	adc	r25, r25
    1452:	f1 cf       	rjmp	.-30     	; 0x1436 <__fp_splitA+0xc>
    1454:	86 95       	lsr	r24
    1456:	71 05       	cpc	r23, r1
    1458:	61 05       	cpc	r22, r1
    145a:	08 94       	sec
    145c:	08 95       	ret

0000145e <__fp_zero>:
    145e:	e8 94       	clt

00001460 <__fp_szero>:
    1460:	bb 27       	eor	r27, r27
    1462:	66 27       	eor	r22, r22
    1464:	77 27       	eor	r23, r23
    1466:	cb 01       	movw	r24, r22
    1468:	97 f9       	bld	r25, 7
    146a:	08 95       	ret

0000146c <__gesf2>:
    146c:	65 df       	rcall	.-310    	; 0x1338 <__fp_cmp>
    146e:	08 f4       	brcc	.+2      	; 0x1472 <__gesf2+0x6>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	08 95       	ret

00001474 <inverse>:
    1474:	9b 01       	movw	r18, r22
    1476:	ac 01       	movw	r20, r24
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	80 e8       	ldi	r24, 0x80	; 128
    147e:	9f e3       	ldi	r25, 0x3F	; 63
    1480:	85 ce       	rjmp	.-758    	; 0x118c <__divsf3>

00001482 <__mulsf3>:
    1482:	0b d0       	rcall	.+22     	; 0x149a <__mulsf3x>
    1484:	b9 cf       	rjmp	.-142    	; 0x13f8 <__fp_round>
    1486:	aa df       	rcall	.-172    	; 0x13dc <__fp_pscA>
    1488:	28 f0       	brcs	.+10     	; 0x1494 <__mulsf3+0x12>
    148a:	af df       	rcall	.-162    	; 0x13ea <__fp_pscB>
    148c:	18 f0       	brcs	.+6      	; 0x1494 <__mulsf3+0x12>
    148e:	95 23       	and	r25, r21
    1490:	09 f0       	breq	.+2      	; 0x1494 <__mulsf3+0x12>
    1492:	76 cf       	rjmp	.-276    	; 0x1380 <__fp_inf>
    1494:	7b cf       	rjmp	.-266    	; 0x138c <__fp_nan>
    1496:	11 24       	eor	r1, r1
    1498:	e3 cf       	rjmp	.-58     	; 0x1460 <__fp_szero>

0000149a <__mulsf3x>:
    149a:	bf df       	rcall	.-130    	; 0x141a <__fp_split3>
    149c:	a0 f3       	brcs	.-24     	; 0x1486 <__mulsf3+0x4>

0000149e <__mulsf3_pse>:
    149e:	95 9f       	mul	r25, r21
    14a0:	d1 f3       	breq	.-12     	; 0x1496 <__mulsf3+0x14>
    14a2:	95 0f       	add	r25, r21
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	55 1f       	adc	r21, r21
    14a8:	62 9f       	mul	r22, r18
    14aa:	f0 01       	movw	r30, r0
    14ac:	72 9f       	mul	r23, r18
    14ae:	bb 27       	eor	r27, r27
    14b0:	f0 0d       	add	r31, r0
    14b2:	b1 1d       	adc	r27, r1
    14b4:	63 9f       	mul	r22, r19
    14b6:	aa 27       	eor	r26, r26
    14b8:	f0 0d       	add	r31, r0
    14ba:	b1 1d       	adc	r27, r1
    14bc:	aa 1f       	adc	r26, r26
    14be:	64 9f       	mul	r22, r20
    14c0:	66 27       	eor	r22, r22
    14c2:	b0 0d       	add	r27, r0
    14c4:	a1 1d       	adc	r26, r1
    14c6:	66 1f       	adc	r22, r22
    14c8:	82 9f       	mul	r24, r18
    14ca:	22 27       	eor	r18, r18
    14cc:	b0 0d       	add	r27, r0
    14ce:	a1 1d       	adc	r26, r1
    14d0:	62 1f       	adc	r22, r18
    14d2:	73 9f       	mul	r23, r19
    14d4:	b0 0d       	add	r27, r0
    14d6:	a1 1d       	adc	r26, r1
    14d8:	62 1f       	adc	r22, r18
    14da:	83 9f       	mul	r24, r19
    14dc:	a0 0d       	add	r26, r0
    14de:	61 1d       	adc	r22, r1
    14e0:	22 1f       	adc	r18, r18
    14e2:	74 9f       	mul	r23, r20
    14e4:	33 27       	eor	r19, r19
    14e6:	a0 0d       	add	r26, r0
    14e8:	61 1d       	adc	r22, r1
    14ea:	23 1f       	adc	r18, r19
    14ec:	84 9f       	mul	r24, r20
    14ee:	60 0d       	add	r22, r0
    14f0:	21 1d       	adc	r18, r1
    14f2:	82 2f       	mov	r24, r18
    14f4:	76 2f       	mov	r23, r22
    14f6:	6a 2f       	mov	r22, r26
    14f8:	11 24       	eor	r1, r1
    14fa:	9f 57       	subi	r25, 0x7F	; 127
    14fc:	50 40       	sbci	r21, 0x00	; 0
    14fe:	8a f0       	brmi	.+34     	; 0x1522 <__mulsf3_pse+0x84>
    1500:	e1 f0       	breq	.+56     	; 0x153a <__mulsf3_pse+0x9c>
    1502:	88 23       	and	r24, r24
    1504:	4a f0       	brmi	.+18     	; 0x1518 <__mulsf3_pse+0x7a>
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	bb 1f       	adc	r27, r27
    150c:	66 1f       	adc	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	91 50       	subi	r25, 0x01	; 1
    1514:	50 40       	sbci	r21, 0x00	; 0
    1516:	a9 f7       	brne	.-22     	; 0x1502 <__mulsf3_pse+0x64>
    1518:	9e 3f       	cpi	r25, 0xFE	; 254
    151a:	51 05       	cpc	r21, r1
    151c:	70 f0       	brcs	.+28     	; 0x153a <__mulsf3_pse+0x9c>
    151e:	30 cf       	rjmp	.-416    	; 0x1380 <__fp_inf>
    1520:	9f cf       	rjmp	.-194    	; 0x1460 <__fp_szero>
    1522:	5f 3f       	cpi	r21, 0xFF	; 255
    1524:	ec f3       	brlt	.-6      	; 0x1520 <__mulsf3_pse+0x82>
    1526:	98 3e       	cpi	r25, 0xE8	; 232
    1528:	dc f3       	brlt	.-10     	; 0x1520 <__mulsf3_pse+0x82>
    152a:	86 95       	lsr	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b7 95       	ror	r27
    1532:	f7 95       	ror	r31
    1534:	e7 95       	ror	r30
    1536:	9f 5f       	subi	r25, 0xFF	; 255
    1538:	c1 f7       	brne	.-16     	; 0x152a <__mulsf3_pse+0x8c>
    153a:	fe 2b       	or	r31, r30
    153c:	88 0f       	add	r24, r24
    153e:	91 1d       	adc	r25, r1
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	97 f9       	bld	r25, 7
    1546:	08 95       	ret

00001548 <square>:
    1548:	9b 01       	movw	r18, r22
    154a:	ac 01       	movw	r20, r24
    154c:	9a cf       	rjmp	.-204    	; 0x1482 <__mulsf3>

0000154e <__udivmodhi4>:
    154e:	aa 1b       	sub	r26, r26
    1550:	bb 1b       	sub	r27, r27
    1552:	51 e1       	ldi	r21, 0x11	; 17
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <__udivmodhi4_ep>

00001556 <__udivmodhi4_loop>:
    1556:	aa 1f       	adc	r26, r26
    1558:	bb 1f       	adc	r27, r27
    155a:	a6 17       	cp	r26, r22
    155c:	b7 07       	cpc	r27, r23
    155e:	10 f0       	brcs	.+4      	; 0x1564 <__udivmodhi4_ep>
    1560:	a6 1b       	sub	r26, r22
    1562:	b7 0b       	sbc	r27, r23

00001564 <__udivmodhi4_ep>:
    1564:	88 1f       	adc	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	5a 95       	dec	r21
    156a:	a9 f7       	brne	.-22     	; 0x1556 <__udivmodhi4_loop>
    156c:	80 95       	com	r24
    156e:	90 95       	com	r25
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	08 95       	ret

00001576 <__divmodsi4>:
    1576:	97 fb       	bst	r25, 7
    1578:	09 2e       	mov	r0, r25
    157a:	05 26       	eor	r0, r21
    157c:	0e d0       	rcall	.+28     	; 0x159a <__divmodsi4_neg1>
    157e:	57 fd       	sbrc	r21, 7
    1580:	04 d0       	rcall	.+8      	; 0x158a <__divmodsi4_neg2>
    1582:	14 d0       	rcall	.+40     	; 0x15ac <__udivmodsi4>
    1584:	0a d0       	rcall	.+20     	; 0x159a <__divmodsi4_neg1>
    1586:	00 1c       	adc	r0, r0
    1588:	38 f4       	brcc	.+14     	; 0x1598 <__divmodsi4_exit>

0000158a <__divmodsi4_neg2>:
    158a:	50 95       	com	r21
    158c:	40 95       	com	r20
    158e:	30 95       	com	r19
    1590:	21 95       	neg	r18
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	4f 4f       	sbci	r20, 0xFF	; 255
    1596:	5f 4f       	sbci	r21, 0xFF	; 255

00001598 <__divmodsi4_exit>:
    1598:	08 95       	ret

0000159a <__divmodsi4_neg1>:
    159a:	f6 f7       	brtc	.-4      	; 0x1598 <__divmodsi4_exit>
    159c:	90 95       	com	r25
    159e:	80 95       	com	r24
    15a0:	70 95       	com	r23
    15a2:	61 95       	neg	r22
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	8f 4f       	sbci	r24, 0xFF	; 255
    15a8:	9f 4f       	sbci	r25, 0xFF	; 255
    15aa:	08 95       	ret

000015ac <__udivmodsi4>:
    15ac:	a1 e2       	ldi	r26, 0x21	; 33
    15ae:	1a 2e       	mov	r1, r26
    15b0:	aa 1b       	sub	r26, r26
    15b2:	bb 1b       	sub	r27, r27
    15b4:	fd 01       	movw	r30, r26
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <__udivmodsi4_ep>

000015b8 <__udivmodsi4_loop>:
    15b8:	aa 1f       	adc	r26, r26
    15ba:	bb 1f       	adc	r27, r27
    15bc:	ee 1f       	adc	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	a2 17       	cp	r26, r18
    15c2:	b3 07       	cpc	r27, r19
    15c4:	e4 07       	cpc	r30, r20
    15c6:	f5 07       	cpc	r31, r21
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <__udivmodsi4_ep>
    15ca:	a2 1b       	sub	r26, r18
    15cc:	b3 0b       	sbc	r27, r19
    15ce:	e4 0b       	sbc	r30, r20
    15d0:	f5 0b       	sbc	r31, r21

000015d2 <__udivmodsi4_ep>:
    15d2:	66 1f       	adc	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	88 1f       	adc	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	1a 94       	dec	r1
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <__udivmodsi4_loop>
    15de:	60 95       	com	r22
    15e0:	70 95       	com	r23
    15e2:	80 95       	com	r24
    15e4:	90 95       	com	r25
    15e6:	9b 01       	movw	r18, r22
    15e8:	ac 01       	movw	r20, r24
    15ea:	bd 01       	movw	r22, r26
    15ec:	cf 01       	movw	r24, r30
    15ee:	08 95       	ret

000015f0 <_exit>:
    15f0:	f8 94       	cli

000015f2 <__stop_program>:
    15f2:	ff cf       	rjmp	.-2      	; 0x15f2 <__stop_program>
