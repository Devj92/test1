
Gyroscope_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00000f2c  00000fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800204  00800204  00000fc4  2**0
                  ALLOC
  3 .stab         00002658  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000082e  00000000  00000000  0000361c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00003e50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011d6  00000000  00000000  00003f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c7  00000000  00000000  00005106  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000852  00000000  00000000  000053cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00005c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000316  00000000  00000000  00005e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000911  00000000  00000000  00006186  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
   4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
   c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_45>
  b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
  e4:	08 4a       	sbci	r16, 0xA8	; 168
  e6:	d7 3b       	cpi	r29, 0xB7	; 183
  e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
  ea:	01 6e       	ori	r16, 0xE1	; 225
  ec:	84 bc       	out	0x24, r8	; 36
  ee:	bf fd       	.word	0xfdbf	; ????
  f0:	c1 2f       	mov	r28, r17
  f2:	3d 6c       	ori	r19, 0xCD	; 205
  f4:	74 31       	cpi	r23, 0x14	; 20
  f6:	9a bd       	out	0x2a, r25	; 42
  f8:	56 83       	std	Z+6, r21	; 0x06
  fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
  fc:	3d 00       	.word	0x003d	; ????
  fe:	c7 7f       	andi	r28, 0xF7	; 247
 100:	11 be       	out	0x31, r1	; 49
 102:	d9 e4       	ldi	r29, 0x49	; 73
 104:	bb 4c       	sbci	r27, 0xCB	; 203
 106:	3e 91       	ld	r19, -X
 108:	6b aa       	sts	0x9b, r22
 10a:	aa be       	out	0x3a, r10	; 58
 10c:	00 00       	nop
 10e:	00 80       	ld	r0, Z
 110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
 112:	11 24       	eor	r1, r1
 114:	1f be       	out	0x3f, r1	; 63
 116:	cf ef       	ldi	r28, 0xFF	; 255
 118:	d1 e2       	ldi	r29, 0x21	; 33
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
 122:	12 e0       	ldi	r17, 0x02	; 2
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b2 e0       	ldi	r27, 0x02	; 2
 128:	ec e2       	ldi	r30, 0x2C	; 44
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a4 30       	cpi	r26, 0x04	; 4
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	12 e0       	ldi	r17, 0x02	; 2
 13e:	a4 e0       	ldi	r26, 0x04	; 4
 140:	b2 e0       	ldi	r27, 0x02	; 2
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a3 31       	cpi	r26, 0x13	; 19
 148:	b1 07       	cpc	r27, r17
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <main>
 150:	0c 94 94 07 	jmp	0xf28	; 0xf28 <_exit>

00000154 <__bad_interrupt>:
 154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
 158:	10 92 0a 02 	sts	0x020A, r1
	TCCR4B = 0x00; //stop
 15c:	e1 ea       	ldi	r30, 0xA1	; 161
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
 162:	86 ec       	ldi	r24, 0xC6	; 198
 164:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //Counter lower 8 bit value
 168:	87 e6       	ldi	r24, 0x67	; 103
 16a:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
 16e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
 172:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
 176:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
 17a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
 17e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
 182:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
 186:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
 18a:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
 18e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
 192:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 83       	st	Z, r24
}
 19a:	08 95       	ret

0000019c <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
 1a8:	80 91 0a 02 	lds	r24, 0x020A
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 0a 02 	sts	0x020A, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
 1b2:	86 ec       	ldi	r24, 0xC6	; 198
 1b4:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //reload counter low value
 1b8:	87 e6       	ldi	r24, 0x67	; 103
 1ba:	80 93 a4 00 	sts	0x00A4, r24
}
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
 1ca:	f8 94       	cli
	timer4_init();
 1cc:	0e 94 ac 00 	call	0x158	; 0x158 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
 1d6:	78 94       	sei

}
 1d8:	08 95       	ret

000001da <micros>:

int micros(void)
{
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
 1e2:	10 91 0a 02 	lds	r17, 0x020A
 1e6:	c0 91 a4 00 	lds	r28, 0x00A4
 1ea:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
 1ee:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
}

int micros(void)
{
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
 1f2:	ce 01       	movw	r24, r28
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	67 56       	subi	r22, 0x67	; 103
 1fe:	76 4c       	sbci	r23, 0xC6	; 198
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	29 e9       	ldi	r18, 0x99	; 153
 206:	39 e3       	ldi	r19, 0x39	; 57
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	0e 94 57 07 	call	0xeae	; 0xeae <__divmodsi4>
 210:	da 01       	movw	r26, r20
 212:	c9 01       	movw	r24, r18
 214:	81 0f       	add	r24, r17
 216:	91 1d       	adc	r25, r1
 218:	a1 1d       	adc	r26, r1
 21a:	b1 1d       	adc	r27, r1
 21c:	8c 01       	movw	r16, r24
 21e:	9d 01       	movw	r18, r26
 220:	48 ee       	ldi	r20, 0xE8	; 232
 222:	53 e0       	ldi	r21, 0x03	; 3
 224:	04 9f       	mul	r16, r20
 226:	c0 01       	movw	r24, r0
 228:	05 9f       	mul	r16, r21
 22a:	90 0d       	add	r25, r0
 22c:	14 9f       	mul	r17, r20
 22e:	90 0d       	add	r25, r0
 230:	11 24       	eor	r1, r1
	start_timer4();
	return time;

}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <millis>:
int millis(void)
{
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
 242:	10 91 0a 02 	lds	r17, 0x020A
 246:	c0 91 a4 00 	lds	r28, 0x00A4
 24a:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
 24e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>

}
int millis(void)
{
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
 252:	ce 01       	movw	r24, r28
 254:	a0 e0       	ldi	r26, 0x00	; 0
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	67 56       	subi	r22, 0x67	; 103
 25e:	76 4c       	sbci	r23, 0xC6	; 198
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	29 e9       	ldi	r18, 0x99	; 153
 266:	39 e3       	ldi	r19, 0x39	; 57
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	0e 94 57 07 	call	0xeae	; 0xeae <__divmodsi4>
 270:	81 2f       	mov	r24, r17
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	28 0f       	add	r18, r24
 276:	39 1f       	adc	r19, r25
	start_timer4();
	return time;

}
 278:	82 2f       	mov	r24, r18
 27a:	93 2f       	mov	r25, r19
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	08 95       	ret

00000284 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	86 e6       	ldi	r24, 0x66	; 102
 286:	9e e0       	ldi	r25, 0x0E	; 14
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_set_4bit+0x4>
 28c:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 28e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 290:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 292:	80 e3       	ldi	r24, 0x30	; 48
 294:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 296:	42 9a       	sbi	0x08, 2	; 8
 298:	ef ef       	ldi	r30, 0xFF	; 255
 29a:	f7 e4       	ldi	r31, 0x47	; 71
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x18>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_set_4bit+0x1e>
 2a2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 2a4:	42 98       	cbi	0x08, 2	; 8
 2a6:	e6 e6       	ldi	r30, 0x66	; 102
 2a8:	fe e0       	ldi	r31, 0x0E	; 14
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_set_4bit+0x26>
 2ae:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 2b0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 2b2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 2b4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 2b6:	42 9a       	sbi	0x08, 2	; 8
 2b8:	ef ef       	ldi	r30, 0xFF	; 255
 2ba:	f7 e4       	ldi	r31, 0x47	; 71
 2bc:	31 97       	sbiw	r30, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_set_4bit+0x38>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_set_4bit+0x3e>
 2c2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 2c4:	42 98       	cbi	0x08, 2	; 8
 2c6:	e6 e6       	ldi	r30, 0x66	; 102
 2c8:	fe e0       	ldi	r31, 0x0E	; 14
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_set_4bit+0x46>
 2ce:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 2d0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 2d2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 2d4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 2d6:	42 9a       	sbi	0x08, 2	; 8
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	97 e4       	ldi	r25, 0x47	; 71
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_set_4bit+0x58>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_set_4bit+0x5e>
 2e2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 2e4:	42 98       	cbi	0x08, 2	; 8
 2e6:	e6 e6       	ldi	r30, 0x66	; 102
 2e8:	fe e0       	ldi	r31, 0x0E	; 14
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_set_4bit+0x66>
 2ee:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 2f0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 2f2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 2f8:	42 9a       	sbi	0x08, 2	; 8
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	97 e4       	ldi	r25, 0x47	; 71
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_set_4bit+0x7a>
 302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_set_4bit+0x80>
 304:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 306:	42 98       	cbi	0x08, 2	; 8
}
 308:	08 95       	ret

0000030a <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 30a:	98 b1       	in	r25, 0x08	; 8
 30c:	9f 70       	andi	r25, 0x0F	; 15
 30e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 310:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 312:	28 2f       	mov	r18, r24
 314:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 316:	92 2b       	or	r25, r18
 318:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 31a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 31c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 31e:	42 9a       	sbi	0x08, 2	; 8
 320:	ef ef       	ldi	r30, 0xFF	; 255
 322:	f7 e4       	ldi	r31, 0x47	; 71
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <lcd_wr_command+0x1a>
 328:	00 c0       	rjmp	.+0      	; 0x32a <lcd_wr_command+0x20>
 32a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 32c:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 32e:	98 b1       	in	r25, 0x08	; 8
 330:	9f 70       	andi	r25, 0x0F	; 15
 332:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 334:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 336:	82 95       	swap	r24
 338:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 33a:	89 2b       	or	r24, r25
 33c:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 33e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 340:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 342:	42 9a       	sbi	0x08, 2	; 8
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	97 e4       	ldi	r25, 0x47	; 71
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_wr_command+0x3e>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_wr_command+0x44>
 34e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 350:	42 98       	cbi	0x08, 2	; 8
}
 352:	08 95       	ret

00000354 <lcd_init>:
 354:	86 e6       	ldi	r24, 0x66	; 102
 356:	9e e0       	ldi	r25, 0x0E	; 14
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <lcd_init+0x4>
 35c:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 35e:	88 e2       	ldi	r24, 0x28	; 40
 360:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
 36a:	86 e0       	ldi	r24, 0x06	; 6
 36c:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 370:	8e e0       	ldi	r24, 0x0E	; 14
 372:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}
 37c:	08 95       	ret

0000037e <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 37e:	98 b1       	in	r25, 0x08	; 8
 380:	9f 70       	andi	r25, 0x0F	; 15
 382:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 384:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 386:	28 2f       	mov	r18, r24
 388:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 38a:	92 2b       	or	r25, r18
 38c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 38e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 390:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 392:	42 9a       	sbi	0x08, 2	; 8
 394:	ef ef       	ldi	r30, 0xFF	; 255
 396:	f7 e4       	ldi	r31, 0x47	; 71
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_wr_char+0x1a>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_wr_char+0x20>
 39e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 3a0:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 3a2:	98 b1       	in	r25, 0x08	; 8
 3a4:	9f 70       	andi	r25, 0x0F	; 15
 3a6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 3a8:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 3aa:	82 95       	swap	r24
 3ac:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 3ae:	89 2b       	or	r24, r25
 3b0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 3b2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 3b4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 3b6:	42 9a       	sbi	0x08, 2	; 8
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	97 e4       	ldi	r25, 0x47	; 71
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_wr_char+0x3e>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lcd_wr_char+0x44>
 3c2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 3c4:	42 98       	cbi	0x08, 2	; 8
}
 3c6:	08 95       	ret

000003c8 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 3c8:	80 e8       	ldi	r24, 0x80	; 128
 3ca:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}
 3ce:	08 95       	ret

000003d0 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ec 01       	movw	r28, r24
	while(*str != '\0')
 3d6:	88 81       	ld	r24, Y
 3d8:	88 23       	and	r24, r24
 3da:	31 f0       	breq	.+12     	; 0x3e8 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 3dc:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 3de:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 3e2:	89 91       	ld	r24, Y+
 3e4:	88 23       	and	r24, r24
 3e6:	d9 f7       	brne	.-10     	; 0x3de <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 3ee:	82 30       	cpi	r24, 0x02	; 2
 3f0:	79 f0       	breq	.+30     	; 0x410 <lcd_cursor+0x22>
 3f2:	83 30       	cpi	r24, 0x03	; 3
 3f4:	18 f4       	brcc	.+6      	; 0x3fc <lcd_cursor+0xe>
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	c9 f4       	brne	.+50     	; 0x42c <lcd_cursor+0x3e>
 3fa:	05 c0       	rjmp	.+10     	; 0x406 <lcd_cursor+0x18>
 3fc:	83 30       	cpi	r24, 0x03	; 3
 3fe:	69 f0       	breq	.+26     	; 0x41a <lcd_cursor+0x2c>
 400:	84 30       	cpi	r24, 0x04	; 4
 402:	a1 f4       	brne	.+40     	; 0x42c <lcd_cursor+0x3e>
 404:	0f c0       	rjmp	.+30     	; 0x424 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 406:	86 2f       	mov	r24, r22
 408:	81 58       	subi	r24, 0x81	; 129
 40a:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
 40e:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 410:	86 2f       	mov	r24, r22
 412:	81 54       	subi	r24, 0x41	; 65
 414:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
 418:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 41a:	86 2f       	mov	r24, r22
 41c:	8d 56       	subi	r24, 0x6D	; 109
 41e:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
 422:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 424:	86 2f       	mov	r24, r22
 426:	8d 52       	subi	r24, 0x2D	; 45
 428:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
 42c:	08 95       	ret

0000042e <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	8a 01       	movw	r16, r20
 438:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 43a:	88 23       	and	r24, r24
 43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0x14>
 43e:	66 23       	and	r22, r22
 440:	19 f4       	brne	.+6      	; 0x448 <lcd_print+0x1a>
	{
		lcd_home();
 442:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_home>
 446:	02 c0       	rjmp	.+4      	; 0x44c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 448:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
	}
	if(digits==5 || flag==1)
 44c:	c5 30       	cpi	r28, 0x05	; 5
 44e:	d1 05       	cpc	r29, r1
 450:	71 f4       	brne	.+28     	; 0x46e <lcd_print+0x40>
	{
		million=value/10000+48;
 452:	c8 01       	movw	r24, r16
 454:	60 e1       	ldi	r22, 0x10	; 16
 456:	77 e2       	ldi	r23, 0x27	; 39
 458:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
 45c:	cb 01       	movw	r24, r22
 45e:	c0 96       	adiw	r24, 0x30	; 48
 460:	90 93 05 02 	sts	0x0205, r25
 464:	80 93 04 02 	sts	0x0204, r24
		lcd_wr_char(million);
 468:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
 46c:	03 c0       	rjmp	.+6      	; 0x474 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 46e:	c4 30       	cpi	r28, 0x04	; 4
 470:	d1 05       	cpc	r29, r1
 472:	b9 f4       	brne	.+46     	; 0x4a2 <lcd_print+0x74>
	{
		temp = value/1000;
 474:	c8 01       	movw	r24, r16
 476:	68 ee       	ldi	r22, 0xE8	; 232
 478:	73 e0       	ldi	r23, 0x03	; 3
 47a:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
 47e:	cb 01       	movw	r24, r22
 480:	70 93 07 02 	sts	0x0207, r23
 484:	60 93 06 02 	sts	0x0206, r22
		thousand = temp%10 + 48;
 488:	6a e0       	ldi	r22, 0x0A	; 10
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
 490:	c0 96       	adiw	r24, 0x30	; 48
 492:	90 93 12 02 	sts	0x0212, r25
 496:	80 93 11 02 	sts	0x0211, r24
		lcd_wr_char(thousand);
 49a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 4a4:	c3 30       	cpi	r28, 0x03	; 3
 4a6:	d1 05       	cpc	r29, r1
 4a8:	11 f0       	breq	.+4      	; 0x4ae <lcd_print+0x80>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	b1 f4       	brne	.+44     	; 0x4da <lcd_print+0xac>
	{
		temp = value/100;
 4ae:	c8 01       	movw	r24, r16
 4b0:	64 e6       	ldi	r22, 0x64	; 100
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
 4b8:	cb 01       	movw	r24, r22
 4ba:	70 93 07 02 	sts	0x0207, r23
 4be:	60 93 06 02 	sts	0x0206, r22
		hundred = temp%10 + 48;
 4c2:	6a e0       	ldi	r22, 0x0A	; 10
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
 4ca:	c0 96       	adiw	r24, 0x30	; 48
 4cc:	90 93 0e 02 	sts	0x020E, r25
 4d0:	80 93 0d 02 	sts	0x020D, r24
		lcd_wr_char(hundred);
 4d4:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 4da:	c2 30       	cpi	r28, 0x02	; 2
 4dc:	d1 05       	cpc	r29, r1
 4de:	11 f0       	breq	.+4      	; 0x4e4 <lcd_print+0xb6>
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	b1 f4       	brne	.+44     	; 0x510 <lcd_print+0xe2>
	{
		temp = value/10;
 4e4:	2a e0       	ldi	r18, 0x0A	; 10
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	c8 01       	movw	r24, r16
 4ea:	b9 01       	movw	r22, r18
 4ec:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
 4f0:	cb 01       	movw	r24, r22
 4f2:	70 93 07 02 	sts	0x0207, r23
 4f6:	60 93 06 02 	sts	0x0206, r22
		tens = temp%10 + 48;
 4fa:	b9 01       	movw	r22, r18
 4fc:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
 500:	c0 96       	adiw	r24, 0x30	; 48
 502:	90 93 0c 02 	sts	0x020C, r25
 506:	80 93 0b 02 	sts	0x020B, r24
		lcd_wr_char(tens);
 50a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
 50e:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 510:	c1 30       	cpi	r28, 0x01	; 1
 512:	d1 05       	cpc	r29, r1
 514:	11 f0       	breq	.+4      	; 0x51a <lcd_print+0xec>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	61 f4       	brne	.+24     	; 0x532 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 51a:	c8 01       	movw	r24, r16
 51c:	6a e0       	ldi	r22, 0x0A	; 10
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
 524:	c0 96       	adiw	r24, 0x30	; 48
 526:	90 93 10 02 	sts	0x0210, r25
 52a:	80 93 0f 02 	sts	0x020F, r24
		lcd_wr_char(unit);
 52e:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	}
	if(digits>5)
 532:	c6 30       	cpi	r28, 0x06	; 6
 534:	d1 05       	cpc	r29, r1
 536:	1c f0       	brlt	.+6      	; 0x53e <lcd_print+0x110>
	{
		lcd_wr_char('E');
 538:	85 e4       	ldi	r24, 0x45	; 69
 53a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	}
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	08 95       	ret

00000548 <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}	
 54e:	08 95       	ret

00000550 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
 550:	87 b1       	in	r24, 0x07	; 7
 552:	87 6f       	ori	r24, 0xF7	; 247
 554:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
 556:	88 b1       	in	r24, 0x08	; 8
 558:	80 78       	andi	r24, 0x80	; 128
 55a:	88 b9       	out	0x08, r24	; 8
}
 55c:	08 95       	ret

0000055e <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
 55e:	ec eb       	ldi	r30, 0xBC	; 188
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
 564:	80 e1       	ldi	r24, 0x10	; 16
 566:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
 56a:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
 56e:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
 572:	84 e0       	ldi	r24, 0x04	; 4
 574:	80 83       	st	Z, r24
}
 576:	08 95       	ret

00000578 <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
 578:	94 ea       	ldi	r25, 0xA4	; 164
 57a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 57e:	ec eb       	ldi	r30, 0xBC	; 188
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	90 81       	ld	r25, Z
 584:	99 23       	and	r25, r25
 586:	ec f7       	brge	.-6      	; 0x582 <write_byte+0xa>
 588:	ef ef       	ldi	r30, 0xFF	; 255
 58a:	ff e8       	ldi	r31, 0x8F	; 143
 58c:	31 97       	sbiw	r30, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <write_byte+0x14>
 590:	00 c0       	rjmp	.+0      	; 0x592 <write_byte+0x1a>
 592:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
 594:	96 ea       	ldi	r25, 0xA6	; 166
 596:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
 59a:	94 e8       	ldi	r25, 0x84	; 132
 59c:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5a0:	ec eb       	ldi	r30, 0xBC	; 188
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	90 81       	ld	r25, Z
 5a6:	99 23       	and	r25, r25
 5a8:	ec f7       	brge	.-6      	; 0x5a4 <write_byte+0x2c>
 5aa:	ef ef       	ldi	r30, 0xFF	; 255
 5ac:	ff e8       	ldi	r31, 0x8F	; 143
 5ae:	31 97       	sbiw	r30, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <write_byte+0x36>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <write_byte+0x3c>
 5b4:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
 5b6:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
 5ba:	94 e8       	ldi	r25, 0x84	; 132
 5bc:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5c0:	ec eb       	ldi	r30, 0xBC	; 188
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	90 81       	ld	r25, Z
 5c6:	99 23       	and	r25, r25
 5c8:	ec f7       	brge	.-6      	; 0x5c4 <write_byte+0x4c>
 5ca:	ef ef       	ldi	r30, 0xFF	; 255
 5cc:	ff e8       	ldi	r31, 0x8F	; 143
 5ce:	31 97       	sbiw	r30, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <write_byte+0x56>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <write_byte+0x5c>
 5d4:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
 5d6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
 5da:	84 e8       	ldi	r24, 0x84	; 132
 5dc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 5e0:	ec eb       	ldi	r30, 0xBC	; 188
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	88 23       	and	r24, r24
 5e8:	ec f7       	brge	.-6      	; 0x5e4 <write_byte+0x6c>
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	9f e8       	ldi	r25, 0x8F	; 143
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <write_byte+0x76>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <write_byte+0x7c>
 5f4:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
 5f6:	84 e9       	ldi	r24, 0x94	; 148
 5f8:	80 93 bc 00 	sts	0x00BC, r24
}
 5fc:	08 95       	ret

000005fe <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
 5fe:	94 ea       	ldi	r25, 0xA4	; 164
 600:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 604:	ec eb       	ldi	r30, 0xBC	; 188
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	90 81       	ld	r25, Z
 60a:	99 23       	and	r25, r25
 60c:	ec f7       	brge	.-6      	; 0x608 <read_byte+0xa>

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
 60e:	96 ea       	ldi	r25, 0xA6	; 166
 610:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
 614:	94 e8       	ldi	r25, 0x84	; 132
 616:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 61a:	ec eb       	ldi	r30, 0xBC	; 188
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	90 81       	ld	r25, Z
 620:	99 23       	and	r25, r25
 622:	ec f7       	brge	.-6      	; 0x61e <read_byte+0x20>

 TWDR = address;                                   // send address of register byte want to access register
 624:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
 628:	84 e8       	ldi	r24, 0x84	; 132
 62a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 62e:	ec eb       	ldi	r30, 0xBC	; 188
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	88 23       	and	r24, r24
 636:	ec f7       	brge	.-6      	; 0x632 <read_byte+0x34>
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
 638:	84 ea       	ldi	r24, 0xA4	; 164
 63a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 63e:	ec eb       	ldi	r30, 0xBC	; 188
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	88 23       	and	r24, r24
 646:	ec f7       	brge	.-6      	; 0x642 <read_byte+0x44>


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
 648:	87 ea       	ldi	r24, 0xA7	; 167
 64a:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
 64e:	84 e8       	ldi	r24, 0x84	; 132
 650:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 654:	ec eb       	ldi	r30, 0xBC	; 188
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	88 23       	and	r24, r24
 65c:	ec f7       	brge	.-6      	; 0x658 <read_byte+0x5a>
 
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
 65e:	84 e8       	ldi	r24, 0x84	; 132
 660:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 664:	ec eb       	ldi	r30, 0xBC	; 188
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	88 23       	and	r24, r24
 66c:	ec f7       	brge	.-6      	; 0x668 <read_byte+0x6a>
 rtc_recv_data = TWDR;
 66e:	eb eb       	ldi	r30, 0xBB	; 187
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
 674:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
 676:	94 e8       	ldi	r25, 0x84	; 132
 678:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 67c:	ec eb       	ldi	r30, 0xBC	; 188
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	90 81       	ld	r25, Z
 682:	99 23       	and	r25, r25
 684:	ec f7       	brge	.-6      	; 0x680 <read_byte+0x82>
  
 return(rtc_recv_data);                            // return the read value to called function
}
 686:	08 95       	ret

00000688 <init_devices>:


// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
 688:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
 68a:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_port_config>
 lcd_set_4bit();
 68e:	0e 94 42 01 	call	0x284	; 0x284 <lcd_set_4bit>
 lcd_init();
 692:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_init>
 twi_init();         // configur the I2cC, i.e TWI module 
 696:	0e 94 af 02 	call	0x55e	; 0x55e <twi_init>
 sei();              // re-enable interrupts
 69a:	78 94       	sei
 //all peripherals are now initialized
}
 69c:	08 95       	ret

0000069e <pr_int>:

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	c8 2f       	mov	r28, r24
 6ac:	d6 2f       	mov	r29, r22
 6ae:	8a 01       	movw	r16, r20
 6b0:	79 01       	movw	r14, r18
	if (c<0)
 6b2:	55 23       	and	r21, r21
 6b4:	a4 f4       	brge	.+40     	; 0x6de <pr_int+0x40>
	{
		lcd_cursor(a,b);
 6b6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
		lcd_string("-");
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	92 e0       	ldi	r25, 0x02	; 2
 6be:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
 6c2:	6d 2f       	mov	r22, r29
 6c4:	6f 5f       	subi	r22, 0xFF	; 255
 6c6:	a8 01       	movw	r20, r16
 6c8:	11 23       	and	r17, r17
 6ca:	24 f4       	brge	.+8      	; 0x6d4 <pr_int+0x36>
 6cc:	44 27       	eor	r20, r20
 6ce:	55 27       	eor	r21, r21
 6d0:	40 1b       	sub	r20, r16
 6d2:	51 0b       	sbc	r21, r17
 6d4:	8c 2f       	mov	r24, r28
 6d6:	97 01       	movw	r18, r14
 6d8:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
 6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
 6de:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
		lcd_string("+");
 6e2:	82 e0       	ldi	r24, 0x02	; 2
 6e4:	92 e0       	ldi	r25, 0x02	; 2
 6e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_string>
		lcd_print(a,b+1,c,d);
 6ea:	6d 2f       	mov	r22, r29
 6ec:	6f 5f       	subi	r22, 0xFF	; 255
 6ee:	8c 2f       	mov	r24, r28
 6f0:	a8 01       	movw	r20, r16
 6f2:	97 01       	movw	r18, r14
 6f4:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	}
}
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	ff 90       	pop	r15
 702:	ef 90       	pop	r14
 704:	08 95       	ret

00000706 <sign>:
		return (n-65536);
	}
	else
		return n;
		
}
 706:	08 95       	ret

00000708 <init_adxl>:
// Main Programme start here.
//-------------------------------------------------------------------------------
void init_adxl(void)
{   
 
 init_devices();
 708:	0e 94 44 03 	call	0x688	; 0x688 <init_devices>

	write_byte(0x0,0x2D);
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	6d e2       	ldi	r22, 0x2D	; 45
 710:	0e 94 bc 02 	call	0x578	; 0x578 <write_byte>
	write_byte(0x8,0x2D);
 714:	88 e0       	ldi	r24, 0x08	; 8
 716:	6d e2       	ldi	r22, 0x2D	; 45
 718:	0e 94 bc 02 	call	0x578	; 0x578 <write_byte>
}
 71c:	08 95       	ret

0000071e <acc_angle>:

int acc_angle(void)
{
 71e:	cf 92       	push	r12
 720:	df 92       	push	r13
 722:	ef 92       	push	r14
 724:	ff 92       	push	r15
 726:	0f 93       	push	r16
 728:	1f 93       	push	r17
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
		int x_acc,y_acc,z_acc;
		//long x,y,z;
		float angle;
 
	  
	   x_byte1 = read_byte(X1);
 72e:	82 e3       	ldi	r24, 0x32	; 50
 730:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
 734:	83 e3       	ldi	r24, 0x33	; 51
 736:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
 73a:	84 e3       	ldi	r24, 0x34	; 52
 73c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
 740:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
 742:	85 e3       	ldi	r24, 0x35	; 53
 744:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
 748:	d8 2f       	mov	r29, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
 74a:	86 e3       	ldi	r24, 0x36	; 54
 74c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
 750:	c8 2f       	mov	r28, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
 752:	87 e3       	ldi	r24, 0x37	; 55
 754:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
 758:	c8 2e       	mov	r12, r24
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
 75a:	3d 2f       	mov	r19, r29
 75c:	20 e0       	ldi	r18, 0x00	; 0
	  y_byte |= y_byte1;
 75e:	80 2f       	mov	r24, r16
 760:	90 e0       	ldi	r25, 0x00	; 0
	  y_acc=sign(y_byte);
 762:	82 2b       	or	r24, r18
 764:	93 2b       	or	r25, r19
 766:	0e 94 83 03 	call	0x706	; 0x706 <sign>
 76a:	8c 01       	movw	r16, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
 76c:	3c 2d       	mov	r19, r12
 76e:	20 e0       	ldi	r18, 0x00	; 0
	  z_byte |= z_byte1;
 770:	8c 2f       	mov	r24, r28
 772:	90 e0       	ldi	r25, 0x00	; 0
	  z_acc=sign(z_byte);
 774:	82 2b       	or	r24, r18
 776:	93 2b       	or	r25, r19
 778:	0e 94 83 03 	call	0x706	; 0x706 <sign>
 77c:	ec 01       	movw	r28, r24
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
 77e:	b8 01       	movw	r22, r16
 780:	88 27       	eor	r24, r24
 782:	77 fd       	sbrc	r23, 7
 784:	80 95       	com	r24
 786:	98 2f       	mov	r25, r24
 788:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatsisf>
 78c:	6b 01       	movw	r12, r22
 78e:	7c 01       	movw	r14, r24
 790:	be 01       	movw	r22, r28
 792:	88 27       	eor	r24, r24
 794:	77 fd       	sbrc	r23, 7
 796:	80 95       	com	r24
 798:	98 2f       	mov	r25, r24
 79a:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatsisf>
 79e:	9b 01       	movw	r18, r22
 7a0:	ac 01       	movw	r20, r24
 7a2:	c7 01       	movw	r24, r14
 7a4:	b6 01       	movw	r22, r12
 7a6:	0e 94 8a 05 	call	0xb14	; 0xb14 <__divsf3>
 7aa:	0e 94 62 05 	call	0xac4	; 0xac4 <atan>
	  angle *= 180.0/3.14;
 7ae:	23 ea       	ldi	r18, 0xA3	; 163
 7b0:	3c e4       	ldi	r19, 0x4C	; 76
 7b2:	45 e6       	ldi	r20, 0x65	; 101
 7b4:	52 e4       	ldi	r21, 0x42	; 66
 7b6:	0e 94 dd 06 	call	0xdba	; 0xdba <__mulsf3>
	  //pr_int(1,1,angle,3);
	  
	return angle;
 7ba:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fixsfsi>
}
 7be:	86 2f       	mov	r24, r22
 7c0:	97 2f       	mov	r25, r23
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	ff 90       	pop	r15
 7cc:	ef 90       	pop	r14
 7ce:	df 90       	pop	r13
 7d0:	cf 90       	pop	r12
 7d2:	08 95       	ret

000007d4 <write_byte_gyro>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte_gyro(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
 7d4:	94 ea       	ldi	r25, 0xA4	; 164
 7d6:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 7da:	ec eb       	ldi	r30, 0xBC	; 188
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	90 81       	ld	r25, Z
 7e0:	99 23       	and	r25, r25
 7e2:	ec f7       	brge	.-6      	; 0x7de <write_byte_gyro+0xa>
 7e4:	ef ef       	ldi	r30, 0xFF	; 255
 7e6:	ff e8       	ldi	r31, 0x8F	; 143
 7e8:	31 97       	sbiw	r30, 0x01	; 1
 7ea:	f1 f7       	brne	.-4      	; 0x7e8 <write_byte_gyro+0x14>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <write_byte_gyro+0x1a>
 7ee:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLAVE_W;                                     // load SLA_W into TWDR Register
 7f0:	92 ed       	ldi	r25, 0xD2	; 210
 7f2:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
 7f6:	94 e8       	ldi	r25, 0x84	; 132
 7f8:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 7fc:	ec eb       	ldi	r30, 0xBC	; 188
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	90 81       	ld	r25, Z
 802:	99 23       	and	r25, r25
 804:	ec f7       	brge	.-6      	; 0x800 <write_byte_gyro+0x2c>
 806:	ef ef       	ldi	r30, 0xFF	; 255
 808:	ff e8       	ldi	r31, 0x8F	; 143
 80a:	31 97       	sbiw	r30, 0x01	; 1
 80c:	f1 f7       	brne	.-4      	; 0x80a <write_byte_gyro+0x36>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <write_byte_gyro+0x3c>
 810:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
 812:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
 816:	94 e8       	ldi	r25, 0x84	; 132
 818:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 81c:	ec eb       	ldi	r30, 0xBC	; 188
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	90 81       	ld	r25, Z
 822:	99 23       	and	r25, r25
 824:	ec f7       	brge	.-6      	; 0x820 <write_byte_gyro+0x4c>
 826:	ef ef       	ldi	r30, 0xFF	; 255
 828:	ff e8       	ldi	r31, 0x8F	; 143
 82a:	31 97       	sbiw	r30, 0x01	; 1
 82c:	f1 f7       	brne	.-4      	; 0x82a <write_byte_gyro+0x56>
 82e:	00 c0       	rjmp	.+0      	; 0x830 <write_byte_gyro+0x5c>
 830:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
 832:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
 836:	84 e8       	ldi	r24, 0x84	; 132
 838:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 83c:	ec eb       	ldi	r30, 0xBC	; 188
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	88 23       	and	r24, r24
 844:	ec f7       	brge	.-6      	; 0x840 <write_byte_gyro+0x6c>
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	9f e8       	ldi	r25, 0x8F	; 143
 84a:	01 97       	sbiw	r24, 0x01	; 1
 84c:	f1 f7       	brne	.-4      	; 0x84a <write_byte_gyro+0x76>
 84e:	00 c0       	rjmp	.+0      	; 0x850 <write_byte_gyro+0x7c>
 850:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
 852:	84 e9       	ldi	r24, 0x94	; 148
 854:	80 93 bc 00 	sts	0x00BC, r24
}
 858:	08 95       	ret

0000085a <read_byte_gyro>:
unsigned char read_byte_gyro(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
 85a:	94 ea       	ldi	r25, 0xA4	; 164
 85c:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 860:	ec eb       	ldi	r30, 0xBC	; 188
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	90 81       	ld	r25, Z
 866:	99 23       	and	r25, r25
 868:	ec f7       	brge	.-6      	; 0x864 <read_byte_gyro+0xa>
 //_delay_ms(10);

 

 TWDR = SLAVE_W;									   // load SLA_W into TWDR Register
 86a:	92 ed       	ldi	r25, 0xD2	; 210
 86c:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
 870:	94 e8       	ldi	r25, 0x84	; 132
 872:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 876:	ec eb       	ldi	r30, 0xBC	; 188
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	90 81       	ld	r25, Z
 87c:	99 23       	and	r25, r25
 87e:	ec f7       	brge	.-6      	; 0x87a <read_byte_gyro+0x20>
 //_delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
 880:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
 884:	84 e8       	ldi	r24, 0x84	; 132
 886:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 88a:	ec eb       	ldi	r30, 0xBC	; 188
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	88 23       	and	r24, r24
 892:	ec f7       	brge	.-6      	; 0x88e <read_byte_gyro+0x34>
// _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
 894:	84 ea       	ldi	r24, 0xA4	; 164
 896:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 89a:	ec eb       	ldi	r30, 0xBC	; 188
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	88 23       	and	r24, r24
 8a2:	ec f7       	brge	.-6      	; 0x89e <read_byte_gyro+0x44>
 //_delay_ms(10);


 
 TWDR = SLAVE_R;									   // load SLA_R into TWDR Register
 8a4:	83 ed       	ldi	r24, 0xD3	; 211
 8a6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
 8aa:	84 e8       	ldi	r24, 0x84	; 132
 8ac:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 8b0:	ec eb       	ldi	r30, 0xBC	; 188
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	88 23       	and	r24, r24
 8b8:	ec f7       	brge	.-6      	; 0x8b4 <read_byte_gyro+0x5a>
 //_delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
 8ba:	84 e8       	ldi	r24, 0x84	; 132
 8bc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 8c0:	ec eb       	ldi	r30, 0xBC	; 188
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	88 23       	and	r24, r24
 8c8:	ec f7       	brge	.-6      	; 0x8c4 <read_byte_gyro+0x6a>
 rtc_recv_data = TWDR;
 8ca:	eb eb       	ldi	r30, 0xBB	; 187
 8cc:	f0 e0       	ldi	r31, 0x00	; 0
 8ce:	80 81       	ld	r24, Z
 //_delay_ms(10);
 

 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
 8d0:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
 8d2:	94 e8       	ldi	r25, 0x84	; 132
 8d4:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
 8d8:	ec eb       	ldi	r30, 0xBC	; 188
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	90 81       	ld	r25, Z
 8de:	99 23       	and	r25, r25
 8e0:	ec f7       	brge	.-6      	; 0x8dc <read_byte_gyro+0x82>
 //_delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
 8e2:	08 95       	ret

000008e4 <main>:
  uint8_t x_byte1 = 0,x_byte2 = 0,y_byte1 = 0,y_byte2 = 0,z_byte1 = 0,z_byte2 = 0;
  double gy_angle =0,gy_sum=0;
  int16_t x_ang=0;

 //init_devices();
 init_adxl();
 8e4:	0e 94 84 03 	call	0x708	; 0x708 <init_adxl>
//  lcd_set_4bit();                // set the LCD in 4 bit mode
//  lcd_init();                    // initialize the LCD with its commands
//  display_clear();               // clear the LCD
 write_byte_gyro(0x0F,0x20);       //Normal mode of control reg.1
 8e8:	8f e0       	ldi	r24, 0x0F	; 15
 8ea:	60 e2       	ldi	r22, 0x20	; 32
 8ec:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <write_byte_gyro>
 //write_byte(0x8,0x2D);
start_timer4();
 8f0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
//-------------------------------------------------------------------------------
int main(void)
{   
  uint16_t x_byte = 0,y_byte = 0,z_byte = 0;
  uint8_t x_byte1 = 0,x_byte2 = 0,y_byte1 = 0,y_byte2 = 0,z_byte1 = 0,z_byte2 = 0;
  double gy_angle =0,gy_sum=0;
 8f4:	99 24       	eor	r9, r9
 8f6:	88 24       	eor	r8, r8
 8f8:	77 24       	eor	r7, r7
 8fa:	66 24       	eor	r6, r6
 
while(1)
{
	   
	   
	  x_byte1 = read_byte_gyro(XL);
 8fc:	88 e2       	ldi	r24, 0x28	; 40
 8fe:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
 902:	c8 2f       	mov	r28, r24
	  //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte_gyro(XH);
 904:	89 e2       	ldi	r24, 0x29	; 41
 906:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
 90a:	18 2f       	mov	r17, r24
	   //lcd_print(2,1,x_byte2,3);
	   
	   y_byte1 = read_byte_gyro(YL);
 90c:	8a e2       	ldi	r24, 0x2A	; 42
 90e:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte_gyro(YH);
 912:	8b e2       	ldi	r24, 0x2B	; 43
 914:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte_gyro(ZL);
 918:	8c e2       	ldi	r24, 0x2C	; 44
 91a:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte_gyro(ZH);
 91e:	8d e2       	ldi	r24, 0x2D	; 45
 920:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
	   //lcd_print(2,10,z_byte2,3);
	   
	   x_byte = x_byte2;   // to print 10 bit integer value on LCD
	   x_byte = (x_byte << 8);
 924:	51 2e       	mov	r5, r17
 926:	44 24       	eor	r4, r4
	   x_byte |= x_byte1;
 928:	8c 2f       	mov	r24, r28
 92a:	90 e0       	ldi	r25, 0x00	; 0
	   x_ang = sign(x_byte);
 92c:	84 29       	or	r24, r4
 92e:	95 29       	or	r25, r5
 930:	0e 94 83 03 	call	0x706	; 0x706 <sign>
 934:	ec 01       	movw	r28, r24
	   z_byte = z_byte2;
	   z_byte = (z_byte << 8);
	   z_byte |= z_byte1;
	   //lcd_print(1,10,z_byte,5);
	   //pr_int(1,9,z_byte,5);*/
	   double timechange=micros();
 936:	0e 94 ed 00 	call	0x1da	; 0x1da <micros>
 93a:	9c 01       	movw	r18, r24
 93c:	b9 01       	movw	r22, r18
 93e:	88 27       	eor	r24, r24
 940:	77 fd       	sbrc	r23, 7
 942:	80 95       	com	r24
 944:	98 2f       	mov	r25, r24
 946:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatsisf>
 94a:	16 2f       	mov	r17, r22
 94c:	07 2f       	mov	r16, r23
 94e:	b8 2e       	mov	r11, r24
 950:	a9 2e       	mov	r10, r25
	   timechange /= 1000;
	   gy_angle = (x_ang*timechange);
 952:	be 01       	movw	r22, r28
 954:	88 27       	eor	r24, r24
 956:	77 fd       	sbrc	r23, 7
 958:	80 95       	com	r24
 95a:	98 2f       	mov	r25, r24
 95c:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatsisf>
 960:	6b 01       	movw	r12, r22
 962:	7c 01       	movw	r14, r24
	   z_byte = (z_byte << 8);
	   z_byte |= z_byte1;
	   //lcd_print(1,10,z_byte,5);
	   //pr_int(1,9,z_byte,5);*/
	   double timechange=micros();
	   timechange /= 1000;
 964:	81 2f       	mov	r24, r17
 966:	90 2f       	mov	r25, r16
 968:	ab 2d       	mov	r26, r11
 96a:	ba 2d       	mov	r27, r10
 96c:	bc 01       	movw	r22, r24
 96e:	cd 01       	movw	r24, r26
 970:	20 e0       	ldi	r18, 0x00	; 0
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	4a e7       	ldi	r20, 0x7A	; 122
 976:	54 e4       	ldi	r21, 0x44	; 68
 978:	0e 94 8a 05 	call	0xb14	; 0xb14 <__divsf3>
 97c:	9b 01       	movw	r18, r22
 97e:	ac 01       	movw	r20, r24
	   gy_angle = (x_ang*timechange);
 980:	c7 01       	movw	r24, r14
 982:	b6 01       	movw	r22, r12
 984:	0e 94 dd 06 	call	0xdba	; 0xdba <__mulsf3>
 988:	9b 01       	movw	r18, r22
 98a:	ac 01       	movw	r20, r24
	   //pr_int(2,10,gy_angle,3);
	   gy_sum +=gy_angle;
 98c:	89 2d       	mov	r24, r9
 98e:	98 2d       	mov	r25, r8
 990:	a7 2d       	mov	r26, r7
 992:	b6 2d       	mov	r27, r6
 994:	bc 01       	movw	r22, r24
 996:	cd 01       	movw	r24, r26
 998:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__addsf3>
	   gy_sum /= 100*K;
 99c:	46 2f       	mov	r20, r22
 99e:	57 2f       	mov	r21, r23
 9a0:	68 2f       	mov	r22, r24
 9a2:	79 2f       	mov	r23, r25
 9a4:	cb 01       	movw	r24, r22
 9a6:	ba 01       	movw	r22, r20
 9a8:	20 e0       	ldi	r18, 0x00	; 0
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	4a e7       	ldi	r20, 0x7A	; 122
 9ae:	54 e4       	ldi	r21, 0x44	; 68
 9b0:	0e 94 8a 05 	call	0xb14	; 0xb14 <__divsf3>
 9b4:	96 2e       	mov	r9, r22
 9b6:	87 2e       	mov	r8, r23
 9b8:	78 2e       	mov	r7, r24
 9ba:	69 2e       	mov	r6, r25
	   
	    //gy_sum = gy_angle+x_ang;
        pr_int(2,1,gy_sum,3);
 9bc:	86 2f       	mov	r24, r22
 9be:	98 2d       	mov	r25, r8
 9c0:	a7 2d       	mov	r26, r7
 9c2:	b6 2d       	mov	r27, r6
 9c4:	bc 01       	movw	r22, r24
 9c6:	cd 01       	movw	r24, r26
 9c8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fixsfsi>
 9cc:	8b 01       	movw	r16, r22
 9ce:	9c 01       	movw	r18, r24
 9d0:	82 e0       	ldi	r24, 0x02	; 2
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	61 e0       	ldi	r22, 0x01	; 1
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	a8 01       	movw	r20, r16
 9da:	23 e0       	ldi	r18, 0x03	; 3
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	0e 94 4f 03 	call	0x69e	; 0x69e <pr_int>
	    pr_int(1,1,acc_angle(),3);
 9e2:	0e 94 8f 03 	call	0x71e	; 0x71e <acc_angle>
 9e6:	ac 01       	movw	r20, r24
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	61 e0       	ldi	r22, 0x01	; 1
 9ee:	70 e0       	ldi	r23, 0x00	; 0
 9f0:	23 e0       	ldi	r18, 0x03	; 3
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	0e 94 4f 03 	call	0x69e	; 0x69e <pr_int>
 9f8:	81 cf       	rjmp	.-254    	; 0x8fc <main+0x18>

000009fa <__subsf3>:
 9fa:	50 58       	subi	r21, 0x80	; 128

000009fc <__addsf3>:
 9fc:	bb 27       	eor	r27, r27
 9fe:	aa 27       	eor	r26, r26
 a00:	0e d0       	rcall	.+28     	; 0xa1e <__addsf3x>
 a02:	9a c1       	rjmp	.+820    	; 0xd38 <__fp_round>
 a04:	8b d1       	rcall	.+790    	; 0xd1c <__fp_pscA>
 a06:	30 f0       	brcs	.+12     	; 0xa14 <__addsf3+0x18>
 a08:	90 d1       	rcall	.+800    	; 0xd2a <__fp_pscB>
 a0a:	20 f0       	brcs	.+8      	; 0xa14 <__addsf3+0x18>
 a0c:	31 f4       	brne	.+12     	; 0xa1a <__addsf3+0x1e>
 a0e:	9f 3f       	cpi	r25, 0xFF	; 255
 a10:	11 f4       	brne	.+4      	; 0xa16 <__addsf3+0x1a>
 a12:	1e f4       	brtc	.+6      	; 0xa1a <__addsf3+0x1e>
 a14:	5b c1       	rjmp	.+694    	; 0xccc <__fp_nan>
 a16:	0e f4       	brtc	.+2      	; 0xa1a <__addsf3+0x1e>
 a18:	e0 95       	com	r30
 a1a:	e7 fb       	bst	r30, 7
 a1c:	51 c1       	rjmp	.+674    	; 0xcc0 <__fp_inf>

00000a1e <__addsf3x>:
 a1e:	e9 2f       	mov	r30, r25
 a20:	9c d1       	rcall	.+824    	; 0xd5a <__fp_split3>
 a22:	80 f3       	brcs	.-32     	; 0xa04 <__addsf3+0x8>
 a24:	ba 17       	cp	r27, r26
 a26:	62 07       	cpc	r22, r18
 a28:	73 07       	cpc	r23, r19
 a2a:	84 07       	cpc	r24, r20
 a2c:	95 07       	cpc	r25, r21
 a2e:	18 f0       	brcs	.+6      	; 0xa36 <__addsf3x+0x18>
 a30:	71 f4       	brne	.+28     	; 0xa4e <__addsf3x+0x30>
 a32:	9e f5       	brtc	.+102    	; 0xa9a <__addsf3x+0x7c>
 a34:	b4 c1       	rjmp	.+872    	; 0xd9e <__fp_zero>
 a36:	0e f4       	brtc	.+2      	; 0xa3a <__addsf3x+0x1c>
 a38:	e0 95       	com	r30
 a3a:	0b 2e       	mov	r0, r27
 a3c:	ba 2f       	mov	r27, r26
 a3e:	a0 2d       	mov	r26, r0
 a40:	0b 01       	movw	r0, r22
 a42:	b9 01       	movw	r22, r18
 a44:	90 01       	movw	r18, r0
 a46:	0c 01       	movw	r0, r24
 a48:	ca 01       	movw	r24, r20
 a4a:	a0 01       	movw	r20, r0
 a4c:	11 24       	eor	r1, r1
 a4e:	ff 27       	eor	r31, r31
 a50:	59 1b       	sub	r21, r25
 a52:	99 f0       	breq	.+38     	; 0xa7a <__addsf3x+0x5c>
 a54:	59 3f       	cpi	r21, 0xF9	; 249
 a56:	50 f4       	brcc	.+20     	; 0xa6c <__addsf3x+0x4e>
 a58:	50 3e       	cpi	r21, 0xE0	; 224
 a5a:	68 f1       	brcs	.+90     	; 0xab6 <__addsf3x+0x98>
 a5c:	1a 16       	cp	r1, r26
 a5e:	f0 40       	sbci	r31, 0x00	; 0
 a60:	a2 2f       	mov	r26, r18
 a62:	23 2f       	mov	r18, r19
 a64:	34 2f       	mov	r19, r20
 a66:	44 27       	eor	r20, r20
 a68:	58 5f       	subi	r21, 0xF8	; 248
 a6a:	f3 cf       	rjmp	.-26     	; 0xa52 <__addsf3x+0x34>
 a6c:	46 95       	lsr	r20
 a6e:	37 95       	ror	r19
 a70:	27 95       	ror	r18
 a72:	a7 95       	ror	r26
 a74:	f0 40       	sbci	r31, 0x00	; 0
 a76:	53 95       	inc	r21
 a78:	c9 f7       	brne	.-14     	; 0xa6c <__addsf3x+0x4e>
 a7a:	7e f4       	brtc	.+30     	; 0xa9a <__addsf3x+0x7c>
 a7c:	1f 16       	cp	r1, r31
 a7e:	ba 0b       	sbc	r27, r26
 a80:	62 0b       	sbc	r22, r18
 a82:	73 0b       	sbc	r23, r19
 a84:	84 0b       	sbc	r24, r20
 a86:	ba f0       	brmi	.+46     	; 0xab6 <__addsf3x+0x98>
 a88:	91 50       	subi	r25, 0x01	; 1
 a8a:	a1 f0       	breq	.+40     	; 0xab4 <__addsf3x+0x96>
 a8c:	ff 0f       	add	r31, r31
 a8e:	bb 1f       	adc	r27, r27
 a90:	66 1f       	adc	r22, r22
 a92:	77 1f       	adc	r23, r23
 a94:	88 1f       	adc	r24, r24
 a96:	c2 f7       	brpl	.-16     	; 0xa88 <__addsf3x+0x6a>
 a98:	0e c0       	rjmp	.+28     	; 0xab6 <__addsf3x+0x98>
 a9a:	ba 0f       	add	r27, r26
 a9c:	62 1f       	adc	r22, r18
 a9e:	73 1f       	adc	r23, r19
 aa0:	84 1f       	adc	r24, r20
 aa2:	48 f4       	brcc	.+18     	; 0xab6 <__addsf3x+0x98>
 aa4:	87 95       	ror	r24
 aa6:	77 95       	ror	r23
 aa8:	67 95       	ror	r22
 aaa:	b7 95       	ror	r27
 aac:	f7 95       	ror	r31
 aae:	9e 3f       	cpi	r25, 0xFE	; 254
 ab0:	08 f0       	brcs	.+2      	; 0xab4 <__addsf3x+0x96>
 ab2:	b3 cf       	rjmp	.-154    	; 0xa1a <__addsf3+0x1e>
 ab4:	93 95       	inc	r25
 ab6:	88 0f       	add	r24, r24
 ab8:	08 f0       	brcs	.+2      	; 0xabc <__addsf3x+0x9e>
 aba:	99 27       	eor	r25, r25
 abc:	ee 0f       	add	r30, r30
 abe:	97 95       	ror	r25
 ac0:	87 95       	ror	r24
 ac2:	08 95       	ret

00000ac4 <atan>:
 ac4:	df 93       	push	r29
 ac6:	dd 27       	eor	r29, r29
 ac8:	b9 2f       	mov	r27, r25
 aca:	bf 77       	andi	r27, 0x7F	; 127
 acc:	40 e8       	ldi	r20, 0x80	; 128
 ace:	5f e3       	ldi	r21, 0x3F	; 63
 ad0:	16 16       	cp	r1, r22
 ad2:	17 06       	cpc	r1, r23
 ad4:	48 07       	cpc	r20, r24
 ad6:	5b 07       	cpc	r21, r27
 ad8:	10 f4       	brcc	.+4      	; 0xade <atan+0x1a>
 ada:	d9 2f       	mov	r29, r25
 adc:	67 d1       	rcall	.+718    	; 0xdac <inverse>
 ade:	9f 93       	push	r25
 ae0:	8f 93       	push	r24
 ae2:	7f 93       	push	r23
 ae4:	6f 93       	push	r22
 ae6:	cc d1       	rcall	.+920    	; 0xe80 <square>
 ae8:	e4 ee       	ldi	r30, 0xE4	; 228
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	f2 d0       	rcall	.+484    	; 0xcd2 <__fp_powser>
 aee:	24 d1       	rcall	.+584    	; 0xd38 <__fp_round>
 af0:	2f 91       	pop	r18
 af2:	3f 91       	pop	r19
 af4:	4f 91       	pop	r20
 af6:	5f 91       	pop	r21
 af8:	6c d1       	rcall	.+728    	; 0xdd2 <__mulsf3x>
 afa:	dd 23       	and	r29, r29
 afc:	49 f0       	breq	.+18     	; 0xb10 <atan+0x4c>
 afe:	90 58       	subi	r25, 0x80	; 128
 b00:	a2 ea       	ldi	r26, 0xA2	; 162
 b02:	2a ed       	ldi	r18, 0xDA	; 218
 b04:	3f e0       	ldi	r19, 0x0F	; 15
 b06:	49 ec       	ldi	r20, 0xC9	; 201
 b08:	5f e3       	ldi	r21, 0x3F	; 63
 b0a:	d0 78       	andi	r29, 0x80	; 128
 b0c:	5d 27       	eor	r21, r29
 b0e:	87 df       	rcall	.-242    	; 0xa1e <__addsf3x>
 b10:	df 91       	pop	r29
 b12:	12 c1       	rjmp	.+548    	; 0xd38 <__fp_round>

00000b14 <__divsf3>:
 b14:	0c d0       	rcall	.+24     	; 0xb2e <__divsf3x>
 b16:	10 c1       	rjmp	.+544    	; 0xd38 <__fp_round>
 b18:	08 d1       	rcall	.+528    	; 0xd2a <__fp_pscB>
 b1a:	40 f0       	brcs	.+16     	; 0xb2c <__divsf3+0x18>
 b1c:	ff d0       	rcall	.+510    	; 0xd1c <__fp_pscA>
 b1e:	30 f0       	brcs	.+12     	; 0xb2c <__divsf3+0x18>
 b20:	21 f4       	brne	.+8      	; 0xb2a <__divsf3+0x16>
 b22:	5f 3f       	cpi	r21, 0xFF	; 255
 b24:	19 f0       	breq	.+6      	; 0xb2c <__divsf3+0x18>
 b26:	cc c0       	rjmp	.+408    	; 0xcc0 <__fp_inf>
 b28:	51 11       	cpse	r21, r1
 b2a:	3a c1       	rjmp	.+628    	; 0xda0 <__fp_szero>
 b2c:	cf c0       	rjmp	.+414    	; 0xccc <__fp_nan>

00000b2e <__divsf3x>:
 b2e:	15 d1       	rcall	.+554    	; 0xd5a <__fp_split3>
 b30:	98 f3       	brcs	.-26     	; 0xb18 <__divsf3+0x4>

00000b32 <__divsf3_pse>:
 b32:	99 23       	and	r25, r25
 b34:	c9 f3       	breq	.-14     	; 0xb28 <__divsf3+0x14>
 b36:	55 23       	and	r21, r21
 b38:	b1 f3       	breq	.-20     	; 0xb26 <__divsf3+0x12>
 b3a:	95 1b       	sub	r25, r21
 b3c:	55 0b       	sbc	r21, r21
 b3e:	bb 27       	eor	r27, r27
 b40:	aa 27       	eor	r26, r26
 b42:	62 17       	cp	r22, r18
 b44:	73 07       	cpc	r23, r19
 b46:	84 07       	cpc	r24, r20
 b48:	38 f0       	brcs	.+14     	; 0xb58 <__divsf3_pse+0x26>
 b4a:	9f 5f       	subi	r25, 0xFF	; 255
 b4c:	5f 4f       	sbci	r21, 0xFF	; 255
 b4e:	22 0f       	add	r18, r18
 b50:	33 1f       	adc	r19, r19
 b52:	44 1f       	adc	r20, r20
 b54:	aa 1f       	adc	r26, r26
 b56:	a9 f3       	breq	.-22     	; 0xb42 <__divsf3_pse+0x10>
 b58:	33 d0       	rcall	.+102    	; 0xbc0 <__divsf3_pse+0x8e>
 b5a:	0e 2e       	mov	r0, r30
 b5c:	3a f0       	brmi	.+14     	; 0xb6c <__divsf3_pse+0x3a>
 b5e:	e0 e8       	ldi	r30, 0x80	; 128
 b60:	30 d0       	rcall	.+96     	; 0xbc2 <__divsf3_pse+0x90>
 b62:	91 50       	subi	r25, 0x01	; 1
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	e6 95       	lsr	r30
 b68:	00 1c       	adc	r0, r0
 b6a:	ca f7       	brpl	.-14     	; 0xb5e <__divsf3_pse+0x2c>
 b6c:	29 d0       	rcall	.+82     	; 0xbc0 <__divsf3_pse+0x8e>
 b6e:	fe 2f       	mov	r31, r30
 b70:	27 d0       	rcall	.+78     	; 0xbc0 <__divsf3_pse+0x8e>
 b72:	66 0f       	add	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	bb 1f       	adc	r27, r27
 b7a:	26 17       	cp	r18, r22
 b7c:	37 07       	cpc	r19, r23
 b7e:	48 07       	cpc	r20, r24
 b80:	ab 07       	cpc	r26, r27
 b82:	b0 e8       	ldi	r27, 0x80	; 128
 b84:	09 f0       	breq	.+2      	; 0xb88 <__divsf3_pse+0x56>
 b86:	bb 0b       	sbc	r27, r27
 b88:	80 2d       	mov	r24, r0
 b8a:	bf 01       	movw	r22, r30
 b8c:	ff 27       	eor	r31, r31
 b8e:	93 58       	subi	r25, 0x83	; 131
 b90:	5f 4f       	sbci	r21, 0xFF	; 255
 b92:	2a f0       	brmi	.+10     	; 0xb9e <__divsf3_pse+0x6c>
 b94:	9e 3f       	cpi	r25, 0xFE	; 254
 b96:	51 05       	cpc	r21, r1
 b98:	68 f0       	brcs	.+26     	; 0xbb4 <__divsf3_pse+0x82>
 b9a:	92 c0       	rjmp	.+292    	; 0xcc0 <__fp_inf>
 b9c:	01 c1       	rjmp	.+514    	; 0xda0 <__fp_szero>
 b9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ba0:	ec f3       	brlt	.-6      	; 0xb9c <__divsf3_pse+0x6a>
 ba2:	98 3e       	cpi	r25, 0xE8	; 232
 ba4:	dc f3       	brlt	.-10     	; 0xb9c <__divsf3_pse+0x6a>
 ba6:	86 95       	lsr	r24
 ba8:	77 95       	ror	r23
 baa:	67 95       	ror	r22
 bac:	b7 95       	ror	r27
 bae:	f7 95       	ror	r31
 bb0:	9f 5f       	subi	r25, 0xFF	; 255
 bb2:	c9 f7       	brne	.-14     	; 0xba6 <__divsf3_pse+0x74>
 bb4:	88 0f       	add	r24, r24
 bb6:	91 1d       	adc	r25, r1
 bb8:	96 95       	lsr	r25
 bba:	87 95       	ror	r24
 bbc:	97 f9       	bld	r25, 7
 bbe:	08 95       	ret
 bc0:	e1 e0       	ldi	r30, 0x01	; 1
 bc2:	66 0f       	add	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	bb 1f       	adc	r27, r27
 bca:	62 17       	cp	r22, r18
 bcc:	73 07       	cpc	r23, r19
 bce:	84 07       	cpc	r24, r20
 bd0:	ba 07       	cpc	r27, r26
 bd2:	20 f0       	brcs	.+8      	; 0xbdc <__divsf3_pse+0xaa>
 bd4:	62 1b       	sub	r22, r18
 bd6:	73 0b       	sbc	r23, r19
 bd8:	84 0b       	sbc	r24, r20
 bda:	ba 0b       	sbc	r27, r26
 bdc:	ee 1f       	adc	r30, r30
 bde:	88 f7       	brcc	.-30     	; 0xbc2 <__divsf3_pse+0x90>
 be0:	e0 95       	com	r30
 be2:	08 95       	ret

00000be4 <__fixsfsi>:
 be4:	04 d0       	rcall	.+8      	; 0xbee <__fixunssfsi>
 be6:	68 94       	set
 be8:	b1 11       	cpse	r27, r1
 bea:	da c0       	rjmp	.+436    	; 0xda0 <__fp_szero>
 bec:	08 95       	ret

00000bee <__fixunssfsi>:
 bee:	bd d0       	rcall	.+378    	; 0xd6a <__fp_splitA>
 bf0:	88 f0       	brcs	.+34     	; 0xc14 <__fixunssfsi+0x26>
 bf2:	9f 57       	subi	r25, 0x7F	; 127
 bf4:	90 f0       	brcs	.+36     	; 0xc1a <__fixunssfsi+0x2c>
 bf6:	b9 2f       	mov	r27, r25
 bf8:	99 27       	eor	r25, r25
 bfa:	b7 51       	subi	r27, 0x17	; 23
 bfc:	a0 f0       	brcs	.+40     	; 0xc26 <__fixunssfsi+0x38>
 bfe:	d1 f0       	breq	.+52     	; 0xc34 <__fixunssfsi+0x46>
 c00:	66 0f       	add	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	99 1f       	adc	r25, r25
 c08:	1a f0       	brmi	.+6      	; 0xc10 <__fixunssfsi+0x22>
 c0a:	ba 95       	dec	r27
 c0c:	c9 f7       	brne	.-14     	; 0xc00 <__fixunssfsi+0x12>
 c0e:	12 c0       	rjmp	.+36     	; 0xc34 <__fixunssfsi+0x46>
 c10:	b1 30       	cpi	r27, 0x01	; 1
 c12:	81 f0       	breq	.+32     	; 0xc34 <__fixunssfsi+0x46>
 c14:	c4 d0       	rcall	.+392    	; 0xd9e <__fp_zero>
 c16:	b1 e0       	ldi	r27, 0x01	; 1
 c18:	08 95       	ret
 c1a:	c1 c0       	rjmp	.+386    	; 0xd9e <__fp_zero>
 c1c:	67 2f       	mov	r22, r23
 c1e:	78 2f       	mov	r23, r24
 c20:	88 27       	eor	r24, r24
 c22:	b8 5f       	subi	r27, 0xF8	; 248
 c24:	39 f0       	breq	.+14     	; 0xc34 <__fixunssfsi+0x46>
 c26:	b9 3f       	cpi	r27, 0xF9	; 249
 c28:	cc f3       	brlt	.-14     	; 0xc1c <__fixunssfsi+0x2e>
 c2a:	86 95       	lsr	r24
 c2c:	77 95       	ror	r23
 c2e:	67 95       	ror	r22
 c30:	b3 95       	inc	r27
 c32:	d9 f7       	brne	.-10     	; 0xc2a <__fixunssfsi+0x3c>
 c34:	3e f4       	brtc	.+14     	; 0xc44 <__fixunssfsi+0x56>
 c36:	90 95       	com	r25
 c38:	80 95       	com	r24
 c3a:	70 95       	com	r23
 c3c:	61 95       	neg	r22
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	08 95       	ret

00000c46 <__floatunsisf>:
 c46:	e8 94       	clt
 c48:	09 c0       	rjmp	.+18     	; 0xc5c <__floatsisf+0x12>

00000c4a <__floatsisf>:
 c4a:	97 fb       	bst	r25, 7
 c4c:	3e f4       	brtc	.+14     	; 0xc5c <__floatsisf+0x12>
 c4e:	90 95       	com	r25
 c50:	80 95       	com	r24
 c52:	70 95       	com	r23
 c54:	61 95       	neg	r22
 c56:	7f 4f       	sbci	r23, 0xFF	; 255
 c58:	8f 4f       	sbci	r24, 0xFF	; 255
 c5a:	9f 4f       	sbci	r25, 0xFF	; 255
 c5c:	99 23       	and	r25, r25
 c5e:	a9 f0       	breq	.+42     	; 0xc8a <__floatsisf+0x40>
 c60:	f9 2f       	mov	r31, r25
 c62:	96 e9       	ldi	r25, 0x96	; 150
 c64:	bb 27       	eor	r27, r27
 c66:	93 95       	inc	r25
 c68:	f6 95       	lsr	r31
 c6a:	87 95       	ror	r24
 c6c:	77 95       	ror	r23
 c6e:	67 95       	ror	r22
 c70:	b7 95       	ror	r27
 c72:	f1 11       	cpse	r31, r1
 c74:	f8 cf       	rjmp	.-16     	; 0xc66 <__floatsisf+0x1c>
 c76:	fa f4       	brpl	.+62     	; 0xcb6 <__floatsisf+0x6c>
 c78:	bb 0f       	add	r27, r27
 c7a:	11 f4       	brne	.+4      	; 0xc80 <__floatsisf+0x36>
 c7c:	60 ff       	sbrs	r22, 0
 c7e:	1b c0       	rjmp	.+54     	; 0xcb6 <__floatsisf+0x6c>
 c80:	6f 5f       	subi	r22, 0xFF	; 255
 c82:	7f 4f       	sbci	r23, 0xFF	; 255
 c84:	8f 4f       	sbci	r24, 0xFF	; 255
 c86:	9f 4f       	sbci	r25, 0xFF	; 255
 c88:	16 c0       	rjmp	.+44     	; 0xcb6 <__floatsisf+0x6c>
 c8a:	88 23       	and	r24, r24
 c8c:	11 f0       	breq	.+4      	; 0xc92 <__floatsisf+0x48>
 c8e:	96 e9       	ldi	r25, 0x96	; 150
 c90:	11 c0       	rjmp	.+34     	; 0xcb4 <__floatsisf+0x6a>
 c92:	77 23       	and	r23, r23
 c94:	21 f0       	breq	.+8      	; 0xc9e <__floatsisf+0x54>
 c96:	9e e8       	ldi	r25, 0x8E	; 142
 c98:	87 2f       	mov	r24, r23
 c9a:	76 2f       	mov	r23, r22
 c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__floatsisf+0x5e>
 c9e:	66 23       	and	r22, r22
 ca0:	71 f0       	breq	.+28     	; 0xcbe <__floatsisf+0x74>
 ca2:	96 e8       	ldi	r25, 0x86	; 134
 ca4:	86 2f       	mov	r24, r22
 ca6:	70 e0       	ldi	r23, 0x00	; 0
 ca8:	60 e0       	ldi	r22, 0x00	; 0
 caa:	2a f0       	brmi	.+10     	; 0xcb6 <__floatsisf+0x6c>
 cac:	9a 95       	dec	r25
 cae:	66 0f       	add	r22, r22
 cb0:	77 1f       	adc	r23, r23
 cb2:	88 1f       	adc	r24, r24
 cb4:	da f7       	brpl	.-10     	; 0xcac <__floatsisf+0x62>
 cb6:	88 0f       	add	r24, r24
 cb8:	96 95       	lsr	r25
 cba:	87 95       	ror	r24
 cbc:	97 f9       	bld	r25, 7
 cbe:	08 95       	ret

00000cc0 <__fp_inf>:
 cc0:	97 f9       	bld	r25, 7
 cc2:	9f 67       	ori	r25, 0x7F	; 127
 cc4:	80 e8       	ldi	r24, 0x80	; 128
 cc6:	70 e0       	ldi	r23, 0x00	; 0
 cc8:	60 e0       	ldi	r22, 0x00	; 0
 cca:	08 95       	ret

00000ccc <__fp_nan>:
 ccc:	9f ef       	ldi	r25, 0xFF	; 255
 cce:	80 ec       	ldi	r24, 0xC0	; 192
 cd0:	08 95       	ret

00000cd2 <__fp_powser>:
 cd2:	df 93       	push	r29
 cd4:	cf 93       	push	r28
 cd6:	1f 93       	push	r17
 cd8:	0f 93       	push	r16
 cda:	ff 92       	push	r15
 cdc:	ef 92       	push	r14
 cde:	df 92       	push	r13
 ce0:	7b 01       	movw	r14, r22
 ce2:	8c 01       	movw	r16, r24
 ce4:	68 94       	set
 ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <__fp_powser+0x20>
 ce8:	da 2e       	mov	r13, r26
 cea:	ef 01       	movw	r28, r30
 cec:	72 d0       	rcall	.+228    	; 0xdd2 <__mulsf3x>
 cee:	fe 01       	movw	r30, r28
 cf0:	e8 94       	clt
 cf2:	a5 91       	lpm	r26, Z+
 cf4:	25 91       	lpm	r18, Z+
 cf6:	35 91       	lpm	r19, Z+
 cf8:	45 91       	lpm	r20, Z+
 cfa:	55 91       	lpm	r21, Z+
 cfc:	ae f3       	brts	.-22     	; 0xce8 <__fp_powser+0x16>
 cfe:	ef 01       	movw	r28, r30
 d00:	8e de       	rcall	.-740    	; 0xa1e <__addsf3x>
 d02:	fe 01       	movw	r30, r28
 d04:	97 01       	movw	r18, r14
 d06:	a8 01       	movw	r20, r16
 d08:	da 94       	dec	r13
 d0a:	79 f7       	brne	.-34     	; 0xcea <__fp_powser+0x18>
 d0c:	df 90       	pop	r13
 d0e:	ef 90       	pop	r14
 d10:	ff 90       	pop	r15
 d12:	0f 91       	pop	r16
 d14:	1f 91       	pop	r17
 d16:	cf 91       	pop	r28
 d18:	df 91       	pop	r29
 d1a:	08 95       	ret

00000d1c <__fp_pscA>:
 d1c:	00 24       	eor	r0, r0
 d1e:	0a 94       	dec	r0
 d20:	16 16       	cp	r1, r22
 d22:	17 06       	cpc	r1, r23
 d24:	18 06       	cpc	r1, r24
 d26:	09 06       	cpc	r0, r25
 d28:	08 95       	ret

00000d2a <__fp_pscB>:
 d2a:	00 24       	eor	r0, r0
 d2c:	0a 94       	dec	r0
 d2e:	12 16       	cp	r1, r18
 d30:	13 06       	cpc	r1, r19
 d32:	14 06       	cpc	r1, r20
 d34:	05 06       	cpc	r0, r21
 d36:	08 95       	ret

00000d38 <__fp_round>:
 d38:	09 2e       	mov	r0, r25
 d3a:	03 94       	inc	r0
 d3c:	00 0c       	add	r0, r0
 d3e:	11 f4       	brne	.+4      	; 0xd44 <__fp_round+0xc>
 d40:	88 23       	and	r24, r24
 d42:	52 f0       	brmi	.+20     	; 0xd58 <__fp_round+0x20>
 d44:	bb 0f       	add	r27, r27
 d46:	40 f4       	brcc	.+16     	; 0xd58 <__fp_round+0x20>
 d48:	bf 2b       	or	r27, r31
 d4a:	11 f4       	brne	.+4      	; 0xd50 <__fp_round+0x18>
 d4c:	60 ff       	sbrs	r22, 0
 d4e:	04 c0       	rjmp	.+8      	; 0xd58 <__fp_round+0x20>
 d50:	6f 5f       	subi	r22, 0xFF	; 255
 d52:	7f 4f       	sbci	r23, 0xFF	; 255
 d54:	8f 4f       	sbci	r24, 0xFF	; 255
 d56:	9f 4f       	sbci	r25, 0xFF	; 255
 d58:	08 95       	ret

00000d5a <__fp_split3>:
 d5a:	57 fd       	sbrc	r21, 7
 d5c:	90 58       	subi	r25, 0x80	; 128
 d5e:	44 0f       	add	r20, r20
 d60:	55 1f       	adc	r21, r21
 d62:	59 f0       	breq	.+22     	; 0xd7a <__fp_splitA+0x10>
 d64:	5f 3f       	cpi	r21, 0xFF	; 255
 d66:	71 f0       	breq	.+28     	; 0xd84 <__fp_splitA+0x1a>
 d68:	47 95       	ror	r20

00000d6a <__fp_splitA>:
 d6a:	88 0f       	add	r24, r24
 d6c:	97 fb       	bst	r25, 7
 d6e:	99 1f       	adc	r25, r25
 d70:	61 f0       	breq	.+24     	; 0xd8a <__fp_splitA+0x20>
 d72:	9f 3f       	cpi	r25, 0xFF	; 255
 d74:	79 f0       	breq	.+30     	; 0xd94 <__fp_splitA+0x2a>
 d76:	87 95       	ror	r24
 d78:	08 95       	ret
 d7a:	12 16       	cp	r1, r18
 d7c:	13 06       	cpc	r1, r19
 d7e:	14 06       	cpc	r1, r20
 d80:	55 1f       	adc	r21, r21
 d82:	f2 cf       	rjmp	.-28     	; 0xd68 <__fp_split3+0xe>
 d84:	46 95       	lsr	r20
 d86:	f1 df       	rcall	.-30     	; 0xd6a <__fp_splitA>
 d88:	08 c0       	rjmp	.+16     	; 0xd9a <__fp_splitA+0x30>
 d8a:	16 16       	cp	r1, r22
 d8c:	17 06       	cpc	r1, r23
 d8e:	18 06       	cpc	r1, r24
 d90:	99 1f       	adc	r25, r25
 d92:	f1 cf       	rjmp	.-30     	; 0xd76 <__fp_splitA+0xc>
 d94:	86 95       	lsr	r24
 d96:	71 05       	cpc	r23, r1
 d98:	61 05       	cpc	r22, r1
 d9a:	08 94       	sec
 d9c:	08 95       	ret

00000d9e <__fp_zero>:
 d9e:	e8 94       	clt

00000da0 <__fp_szero>:
 da0:	bb 27       	eor	r27, r27
 da2:	66 27       	eor	r22, r22
 da4:	77 27       	eor	r23, r23
 da6:	cb 01       	movw	r24, r22
 da8:	97 f9       	bld	r25, 7
 daa:	08 95       	ret

00000dac <inverse>:
 dac:	9b 01       	movw	r18, r22
 dae:	ac 01       	movw	r20, r24
 db0:	60 e0       	ldi	r22, 0x00	; 0
 db2:	70 e0       	ldi	r23, 0x00	; 0
 db4:	80 e8       	ldi	r24, 0x80	; 128
 db6:	9f e3       	ldi	r25, 0x3F	; 63
 db8:	ad ce       	rjmp	.-678    	; 0xb14 <__divsf3>

00000dba <__mulsf3>:
 dba:	0b d0       	rcall	.+22     	; 0xdd2 <__mulsf3x>
 dbc:	bd cf       	rjmp	.-134    	; 0xd38 <__fp_round>
 dbe:	ae df       	rcall	.-164    	; 0xd1c <__fp_pscA>
 dc0:	28 f0       	brcs	.+10     	; 0xdcc <__mulsf3+0x12>
 dc2:	b3 df       	rcall	.-154    	; 0xd2a <__fp_pscB>
 dc4:	18 f0       	brcs	.+6      	; 0xdcc <__mulsf3+0x12>
 dc6:	95 23       	and	r25, r21
 dc8:	09 f0       	breq	.+2      	; 0xdcc <__mulsf3+0x12>
 dca:	7a cf       	rjmp	.-268    	; 0xcc0 <__fp_inf>
 dcc:	7f cf       	rjmp	.-258    	; 0xccc <__fp_nan>
 dce:	11 24       	eor	r1, r1
 dd0:	e7 cf       	rjmp	.-50     	; 0xda0 <__fp_szero>

00000dd2 <__mulsf3x>:
 dd2:	c3 df       	rcall	.-122    	; 0xd5a <__fp_split3>
 dd4:	a0 f3       	brcs	.-24     	; 0xdbe <__mulsf3+0x4>

00000dd6 <__mulsf3_pse>:
 dd6:	95 9f       	mul	r25, r21
 dd8:	d1 f3       	breq	.-12     	; 0xdce <__mulsf3+0x14>
 dda:	95 0f       	add	r25, r21
 ddc:	50 e0       	ldi	r21, 0x00	; 0
 dde:	55 1f       	adc	r21, r21
 de0:	62 9f       	mul	r22, r18
 de2:	f0 01       	movw	r30, r0
 de4:	72 9f       	mul	r23, r18
 de6:	bb 27       	eor	r27, r27
 de8:	f0 0d       	add	r31, r0
 dea:	b1 1d       	adc	r27, r1
 dec:	63 9f       	mul	r22, r19
 dee:	aa 27       	eor	r26, r26
 df0:	f0 0d       	add	r31, r0
 df2:	b1 1d       	adc	r27, r1
 df4:	aa 1f       	adc	r26, r26
 df6:	64 9f       	mul	r22, r20
 df8:	66 27       	eor	r22, r22
 dfa:	b0 0d       	add	r27, r0
 dfc:	a1 1d       	adc	r26, r1
 dfe:	66 1f       	adc	r22, r22
 e00:	82 9f       	mul	r24, r18
 e02:	22 27       	eor	r18, r18
 e04:	b0 0d       	add	r27, r0
 e06:	a1 1d       	adc	r26, r1
 e08:	62 1f       	adc	r22, r18
 e0a:	73 9f       	mul	r23, r19
 e0c:	b0 0d       	add	r27, r0
 e0e:	a1 1d       	adc	r26, r1
 e10:	62 1f       	adc	r22, r18
 e12:	83 9f       	mul	r24, r19
 e14:	a0 0d       	add	r26, r0
 e16:	61 1d       	adc	r22, r1
 e18:	22 1f       	adc	r18, r18
 e1a:	74 9f       	mul	r23, r20
 e1c:	33 27       	eor	r19, r19
 e1e:	a0 0d       	add	r26, r0
 e20:	61 1d       	adc	r22, r1
 e22:	23 1f       	adc	r18, r19
 e24:	84 9f       	mul	r24, r20
 e26:	60 0d       	add	r22, r0
 e28:	21 1d       	adc	r18, r1
 e2a:	82 2f       	mov	r24, r18
 e2c:	76 2f       	mov	r23, r22
 e2e:	6a 2f       	mov	r22, r26
 e30:	11 24       	eor	r1, r1
 e32:	9f 57       	subi	r25, 0x7F	; 127
 e34:	50 40       	sbci	r21, 0x00	; 0
 e36:	8a f0       	brmi	.+34     	; 0xe5a <__mulsf3_pse+0x84>
 e38:	e1 f0       	breq	.+56     	; 0xe72 <__mulsf3_pse+0x9c>
 e3a:	88 23       	and	r24, r24
 e3c:	4a f0       	brmi	.+18     	; 0xe50 <__mulsf3_pse+0x7a>
 e3e:	ee 0f       	add	r30, r30
 e40:	ff 1f       	adc	r31, r31
 e42:	bb 1f       	adc	r27, r27
 e44:	66 1f       	adc	r22, r22
 e46:	77 1f       	adc	r23, r23
 e48:	88 1f       	adc	r24, r24
 e4a:	91 50       	subi	r25, 0x01	; 1
 e4c:	50 40       	sbci	r21, 0x00	; 0
 e4e:	a9 f7       	brne	.-22     	; 0xe3a <__mulsf3_pse+0x64>
 e50:	9e 3f       	cpi	r25, 0xFE	; 254
 e52:	51 05       	cpc	r21, r1
 e54:	70 f0       	brcs	.+28     	; 0xe72 <__mulsf3_pse+0x9c>
 e56:	34 cf       	rjmp	.-408    	; 0xcc0 <__fp_inf>
 e58:	a3 cf       	rjmp	.-186    	; 0xda0 <__fp_szero>
 e5a:	5f 3f       	cpi	r21, 0xFF	; 255
 e5c:	ec f3       	brlt	.-6      	; 0xe58 <__mulsf3_pse+0x82>
 e5e:	98 3e       	cpi	r25, 0xE8	; 232
 e60:	dc f3       	brlt	.-10     	; 0xe58 <__mulsf3_pse+0x82>
 e62:	86 95       	lsr	r24
 e64:	77 95       	ror	r23
 e66:	67 95       	ror	r22
 e68:	b7 95       	ror	r27
 e6a:	f7 95       	ror	r31
 e6c:	e7 95       	ror	r30
 e6e:	9f 5f       	subi	r25, 0xFF	; 255
 e70:	c1 f7       	brne	.-16     	; 0xe62 <__mulsf3_pse+0x8c>
 e72:	fe 2b       	or	r31, r30
 e74:	88 0f       	add	r24, r24
 e76:	91 1d       	adc	r25, r1
 e78:	96 95       	lsr	r25
 e7a:	87 95       	ror	r24
 e7c:	97 f9       	bld	r25, 7
 e7e:	08 95       	ret

00000e80 <square>:
 e80:	9b 01       	movw	r18, r22
 e82:	ac 01       	movw	r20, r24
 e84:	9a cf       	rjmp	.-204    	; 0xdba <__mulsf3>

00000e86 <__udivmodhi4>:
 e86:	aa 1b       	sub	r26, r26
 e88:	bb 1b       	sub	r27, r27
 e8a:	51 e1       	ldi	r21, 0x11	; 17
 e8c:	07 c0       	rjmp	.+14     	; 0xe9c <__udivmodhi4_ep>

00000e8e <__udivmodhi4_loop>:
 e8e:	aa 1f       	adc	r26, r26
 e90:	bb 1f       	adc	r27, r27
 e92:	a6 17       	cp	r26, r22
 e94:	b7 07       	cpc	r27, r23
 e96:	10 f0       	brcs	.+4      	; 0xe9c <__udivmodhi4_ep>
 e98:	a6 1b       	sub	r26, r22
 e9a:	b7 0b       	sbc	r27, r23

00000e9c <__udivmodhi4_ep>:
 e9c:	88 1f       	adc	r24, r24
 e9e:	99 1f       	adc	r25, r25
 ea0:	5a 95       	dec	r21
 ea2:	a9 f7       	brne	.-22     	; 0xe8e <__udivmodhi4_loop>
 ea4:	80 95       	com	r24
 ea6:	90 95       	com	r25
 ea8:	bc 01       	movw	r22, r24
 eaa:	cd 01       	movw	r24, r26
 eac:	08 95       	ret

00000eae <__divmodsi4>:
 eae:	97 fb       	bst	r25, 7
 eb0:	09 2e       	mov	r0, r25
 eb2:	05 26       	eor	r0, r21
 eb4:	0e d0       	rcall	.+28     	; 0xed2 <__divmodsi4_neg1>
 eb6:	57 fd       	sbrc	r21, 7
 eb8:	04 d0       	rcall	.+8      	; 0xec2 <__divmodsi4_neg2>
 eba:	14 d0       	rcall	.+40     	; 0xee4 <__udivmodsi4>
 ebc:	0a d0       	rcall	.+20     	; 0xed2 <__divmodsi4_neg1>
 ebe:	00 1c       	adc	r0, r0
 ec0:	38 f4       	brcc	.+14     	; 0xed0 <__divmodsi4_exit>

00000ec2 <__divmodsi4_neg2>:
 ec2:	50 95       	com	r21
 ec4:	40 95       	com	r20
 ec6:	30 95       	com	r19
 ec8:	21 95       	neg	r18
 eca:	3f 4f       	sbci	r19, 0xFF	; 255
 ecc:	4f 4f       	sbci	r20, 0xFF	; 255
 ece:	5f 4f       	sbci	r21, 0xFF	; 255

00000ed0 <__divmodsi4_exit>:
 ed0:	08 95       	ret

00000ed2 <__divmodsi4_neg1>:
 ed2:	f6 f7       	brtc	.-4      	; 0xed0 <__divmodsi4_exit>
 ed4:	90 95       	com	r25
 ed6:	80 95       	com	r24
 ed8:	70 95       	com	r23
 eda:	61 95       	neg	r22
 edc:	7f 4f       	sbci	r23, 0xFF	; 255
 ede:	8f 4f       	sbci	r24, 0xFF	; 255
 ee0:	9f 4f       	sbci	r25, 0xFF	; 255
 ee2:	08 95       	ret

00000ee4 <__udivmodsi4>:
 ee4:	a1 e2       	ldi	r26, 0x21	; 33
 ee6:	1a 2e       	mov	r1, r26
 ee8:	aa 1b       	sub	r26, r26
 eea:	bb 1b       	sub	r27, r27
 eec:	fd 01       	movw	r30, r26
 eee:	0d c0       	rjmp	.+26     	; 0xf0a <__udivmodsi4_ep>

00000ef0 <__udivmodsi4_loop>:
 ef0:	aa 1f       	adc	r26, r26
 ef2:	bb 1f       	adc	r27, r27
 ef4:	ee 1f       	adc	r30, r30
 ef6:	ff 1f       	adc	r31, r31
 ef8:	a2 17       	cp	r26, r18
 efa:	b3 07       	cpc	r27, r19
 efc:	e4 07       	cpc	r30, r20
 efe:	f5 07       	cpc	r31, r21
 f00:	20 f0       	brcs	.+8      	; 0xf0a <__udivmodsi4_ep>
 f02:	a2 1b       	sub	r26, r18
 f04:	b3 0b       	sbc	r27, r19
 f06:	e4 0b       	sbc	r30, r20
 f08:	f5 0b       	sbc	r31, r21

00000f0a <__udivmodsi4_ep>:
 f0a:	66 1f       	adc	r22, r22
 f0c:	77 1f       	adc	r23, r23
 f0e:	88 1f       	adc	r24, r24
 f10:	99 1f       	adc	r25, r25
 f12:	1a 94       	dec	r1
 f14:	69 f7       	brne	.-38     	; 0xef0 <__udivmodsi4_loop>
 f16:	60 95       	com	r22
 f18:	70 95       	com	r23
 f1a:	80 95       	com	r24
 f1c:	90 95       	com	r25
 f1e:	9b 01       	movw	r18, r22
 f20:	ac 01       	movw	r20, r24
 f22:	bd 01       	movw	r22, r26
 f24:	cf 01       	movw	r24, r30
 f26:	08 95       	ret

00000f28 <_exit>:
 f28:	f8 94       	cli

00000f2a <__stop_program>:
 f2a:	ff cf       	rjmp	.-2      	; 0xf2a <__stop_program>
