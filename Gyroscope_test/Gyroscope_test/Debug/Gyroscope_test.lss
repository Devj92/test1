
Gyroscope_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00001070  00001104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001070  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080020e  0080020e  00001112  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00004ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ef  00000000  00000000  00004fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000308  00000000  00000000  000060af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083e  00000000  00000000  000063b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00006bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ec  00000000  00000000  00006e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f3  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_45>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <__addsf3x+0x40>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e7       	ldi	r30, 0x70	; 112
     17e:	f0 e1       	ldi	r31, 0x10	; 16
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ae 30       	cpi	r26, 0x0E	; 14
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	ae e0       	ldi	r26, 0x0E	; 14
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ad 31       	cpi	r26, 0x1D	; 29
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 32 04 	call	0x864	; 0x864 <main>
     1a4:	0c 94 36 08 	jmp	0x106c	; 0x106c <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x4>
     1b4:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_set_4bit+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8
}
     230:	08 95       	ret

00000232 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_wr_command+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_wr_command+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_command+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_command+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <lcd_init>:
     27c:	86 e6       	ldi	r24, 0x66	; 102
     27e:	9e e0       	ldi	r25, 0x0E	; 14
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x4>
     284:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     286:	88 e2       	ldi	r24, 0x28	; 40
     288:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     298:	8e e0       	ldi	r24, 0x0E	; 14
     29a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     29e:	80 e8       	ldi	r24, 0x80	; 128
     2a0:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
     2a4:	08 95       	ret

000002a6 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2a6:	98 b1       	in	r25, 0x08	; 8
     2a8:	9f 70       	andi	r25, 0x0F	; 15
     2aa:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2ac:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2ae:	28 2f       	mov	r18, r24
     2b0:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b2:	92 2b       	or	r25, r18
     2b4:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2b6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2b8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2ba:	42 9a       	sbi	0x08, 2	; 8
     2bc:	ef ef       	ldi	r30, 0xFF	; 255
     2be:	f7 e4       	ldi	r31, 0x47	; 71
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_wr_char+0x1a>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_wr_char+0x20>
     2c6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2c8:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ca:	98 b1       	in	r25, 0x08	; 8
     2cc:	9f 70       	andi	r25, 0x0F	; 15
     2ce:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d0:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d2:	82 95       	swap	r24
     2d4:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2d6:	89 2b       	or	r24, r25
     2d8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2da:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2dc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2de:	42 9a       	sbi	0x08, 2	; 8
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	97 e4       	ldi	r25, 0x47	; 71
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcd_wr_char+0x3e>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcd_wr_char+0x44>
     2ea:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2ec:	42 98       	cbi	0x08, 2	; 8
}
     2ee:	08 95       	ret

000002f0 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     2f0:	80 e8       	ldi	r24, 0x80	; 128
     2f2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
     2f6:	08 95       	ret

000002f8 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ec 01       	movw	r28, r24
	while(*str != '\0')
     2fe:	88 81       	ld	r24, Y
     300:	88 23       	and	r24, r24
     302:	31 f0       	breq	.+12     	; 0x310 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     304:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     306:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     30a:	89 91       	ld	r24, Y+
     30c:	88 23       	and	r24, r24
     30e:	d9 f7       	brne	.-10     	; 0x306 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	79 f0       	breq	.+30     	; 0x338 <lcd_cursor+0x22>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	18 f4       	brcc	.+6      	; 0x324 <lcd_cursor+0xe>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	c9 f4       	brne	.+50     	; 0x354 <lcd_cursor+0x3e>
     322:	05 c0       	rjmp	.+10     	; 0x32e <lcd_cursor+0x18>
     324:	83 30       	cpi	r24, 0x03	; 3
     326:	69 f0       	breq	.+26     	; 0x342 <lcd_cursor+0x2c>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	a1 f4       	brne	.+40     	; 0x354 <lcd_cursor+0x3e>
     32c:	0f c0       	rjmp	.+30     	; 0x34c <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     32e:	86 2f       	mov	r24, r22
     330:	81 58       	subi	r24, 0x81	; 129
     332:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     336:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     338:	86 2f       	mov	r24, r22
     33a:	81 54       	subi	r24, 0x41	; 65
     33c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     340:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     342:	86 2f       	mov	r24, r22
     344:	8d 56       	subi	r24, 0x6D	; 109
     346:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     34a:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     34c:	86 2f       	mov	r24, r22
     34e:	8d 52       	subi	r24, 0x2D	; 45
     350:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     354:	08 95       	ret

00000356 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	8a 01       	movw	r16, r20
     360:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     362:	88 23       	and	r24, r24
     364:	11 f0       	breq	.+4      	; 0x36a <lcd_print+0x14>
     366:	66 23       	and	r22, r22
     368:	19 f4       	brne	.+6      	; 0x370 <lcd_print+0x1a>
	{
		lcd_home();
     36a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_home>
     36e:	02 c0       	rjmp	.+4      	; 0x374 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     370:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     374:	c5 30       	cpi	r28, 0x05	; 5
     376:	d1 05       	cpc	r29, r1
     378:	71 f4       	brne	.+28     	; 0x396 <lcd_print+0x40>
	{
		million=value/10000+48;
     37a:	c8 01       	movw	r24, r16
     37c:	60 e1       	ldi	r22, 0x10	; 16
     37e:	77 e2       	ldi	r23, 0x27	; 39
     380:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     384:	cb 01       	movw	r24, r22
     386:	c0 96       	adiw	r24, 0x30	; 48
     388:	90 93 0f 02 	sts	0x020F, r25
     38c:	80 93 0e 02 	sts	0x020E, r24
		lcd_wr_char(million);
     390:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
     394:	03 c0       	rjmp	.+6      	; 0x39c <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     396:	c4 30       	cpi	r28, 0x04	; 4
     398:	d1 05       	cpc	r29, r1
     39a:	b9 f4       	brne	.+46     	; 0x3ca <lcd_print+0x74>
	{
		temp = value/1000;
     39c:	c8 01       	movw	r24, r16
     39e:	68 ee       	ldi	r22, 0xE8	; 232
     3a0:	73 e0       	ldi	r23, 0x03	; 3
     3a2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     3a6:	cb 01       	movw	r24, r22
     3a8:	70 93 11 02 	sts	0x0211, r23
     3ac:	60 93 10 02 	sts	0x0210, r22
		thousand = temp%10 + 48;
     3b0:	6a e0       	ldi	r22, 0x0A	; 10
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     3b8:	c0 96       	adiw	r24, 0x30	; 48
     3ba:	90 93 1c 02 	sts	0x021C, r25
     3be:	80 93 1b 02 	sts	0x021B, r24
		lcd_wr_char(thousand);
     3c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ca:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3cc:	c3 30       	cpi	r28, 0x03	; 3
     3ce:	d1 05       	cpc	r29, r1
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <lcd_print+0x80>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	b1 f4       	brne	.+44     	; 0x402 <lcd_print+0xac>
	{
		temp = value/100;
     3d6:	c8 01       	movw	r24, r16
     3d8:	64 e6       	ldi	r22, 0x64	; 100
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     3e0:	cb 01       	movw	r24, r22
     3e2:	70 93 11 02 	sts	0x0211, r23
     3e6:	60 93 10 02 	sts	0x0210, r22
		hundred = temp%10 + 48;
     3ea:	6a e0       	ldi	r22, 0x0A	; 10
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     3f2:	c0 96       	adiw	r24, 0x30	; 48
     3f4:	90 93 18 02 	sts	0x0218, r25
     3f8:	80 93 17 02 	sts	0x0217, r24
		lcd_wr_char(hundred);
     3fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     400:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     402:	c2 30       	cpi	r28, 0x02	; 2
     404:	d1 05       	cpc	r29, r1
     406:	11 f0       	breq	.+4      	; 0x40c <lcd_print+0xb6>
     408:	81 30       	cpi	r24, 0x01	; 1
     40a:	b1 f4       	brne	.+44     	; 0x438 <lcd_print+0xe2>
	{
		temp = value/10;
     40c:	2a e0       	ldi	r18, 0x0A	; 10
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	c8 01       	movw	r24, r16
     412:	b9 01       	movw	r22, r18
     414:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     418:	cb 01       	movw	r24, r22
     41a:	70 93 11 02 	sts	0x0211, r23
     41e:	60 93 10 02 	sts	0x0210, r22
		tens = temp%10 + 48;
     422:	b9 01       	movw	r22, r18
     424:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     428:	c0 96       	adiw	r24, 0x30	; 48
     42a:	90 93 16 02 	sts	0x0216, r25
     42e:	80 93 15 02 	sts	0x0215, r24
		lcd_wr_char(tens);
     432:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
		flag=1;
     436:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     438:	c1 30       	cpi	r28, 0x01	; 1
     43a:	d1 05       	cpc	r29, r1
     43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0xec>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	61 f4       	brne	.+24     	; 0x45a <lcd_print+0x104>
	{
		unit = value%10 + 48;
     442:	c8 01       	movw	r24, r16
     444:	6a e0       	ldi	r22, 0x0A	; 10
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__udivmodhi4>
     44c:	c0 96       	adiw	r24, 0x30	; 48
     44e:	90 93 1a 02 	sts	0x021A, r25
     452:	80 93 19 02 	sts	0x0219, r24
		lcd_wr_char(unit);
     456:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
	}
	if(digits>5)
     45a:	c6 30       	cpi	r28, 0x06	; 6
     45c:	d1 05       	cpc	r29, r1
     45e:	1c f0       	brlt	.+6      	; 0x466 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     460:	85 e4       	ldi	r24, 0x45	; 69
     462:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_wr_char>
	}
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	08 95       	ret

00000470 <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}	
     476:	08 95       	ret

00000478 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
     478:	10 92 14 02 	sts	0x0214, r1
	TCCR4B = 0x00; //stop
     47c:	e1 ea       	ldi	r30, 0xA1	; 161
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
     482:	86 ec       	ldi	r24, 0xC6	; 198
     484:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //Counter lower 8 bit value
     488:	87 e6       	ldi	r24, 0x67	; 103
     48a:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
     48e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
     492:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
     496:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
     49a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
     49e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
     4a2:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     4a6:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     4aa:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
     4ae:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
     4b2:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 83       	st	Z, r24
}
     4ba:	08 95       	ret

000004bc <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	11 24       	eor	r1, r1
     4c6:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
     4c8:	80 91 14 02 	lds	r24, 0x0214
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	80 93 14 02 	sts	0x0214, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
     4d2:	86 ec       	ldi	r24, 0xC6	; 198
     4d4:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //reload counter low value
     4d8:	87 e6       	ldi	r24, 0x67	; 103
     4da:	80 93 a4 00 	sts	0x00A4, r24
}
     4de:	8f 91       	pop	r24
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
     4ea:	f8 94       	cli
	timer4_init();
     4ec:	0e 94 3c 02 	call	0x478	; 0x478 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
     4f6:	78 94       	sei

}
     4f8:	08 95       	ret

000004fa <micros>:

int micros(void)
{
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     502:	10 91 14 02 	lds	r17, 0x0214
     506:	c0 91 a4 00 	lds	r28, 0x00A4
     50a:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     50e:	0e 94 75 02 	call	0x4ea	; 0x4ea <start_timer4>
}

int micros(void)
{
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     512:	ce 01       	movw	r24, r28
     514:	a0 e0       	ldi	r26, 0x00	; 0
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	bc 01       	movw	r22, r24
     51a:	cd 01       	movw	r24, r26
     51c:	67 56       	subi	r22, 0x67	; 103
     51e:	76 4c       	sbci	r23, 0xC6	; 198
     520:	80 40       	sbci	r24, 0x00	; 0
     522:	90 40       	sbci	r25, 0x00	; 0
     524:	29 e9       	ldi	r18, 0x99	; 153
     526:	39 e3       	ldi	r19, 0x39	; 57
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__divmodsi4>
     530:	da 01       	movw	r26, r20
     532:	c9 01       	movw	r24, r18
     534:	81 0f       	add	r24, r17
     536:	91 1d       	adc	r25, r1
     538:	a1 1d       	adc	r26, r1
     53a:	b1 1d       	adc	r27, r1
     53c:	8c 01       	movw	r16, r24
     53e:	9d 01       	movw	r18, r26
     540:	48 ee       	ldi	r20, 0xE8	; 232
     542:	53 e0       	ldi	r21, 0x03	; 3
     544:	04 9f       	mul	r16, r20
     546:	c0 01       	movw	r24, r0
     548:	05 9f       	mul	r16, r21
     54a:	90 0d       	add	r25, r0
     54c:	14 9f       	mul	r17, r20
     54e:	90 0d       	add	r25, r0
     550:	11 24       	eor	r1, r1
	start_timer4();
	return time;

}
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	08 95       	ret

0000055c <millis>:
int millis(void)
{
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     562:	10 91 14 02 	lds	r17, 0x0214
     566:	c0 91 a4 00 	lds	r28, 0x00A4
     56a:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     56e:	0e 94 75 02 	call	0x4ea	; 0x4ea <start_timer4>

}
int millis(void)
{
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     572:	ce 01       	movw	r24, r28
     574:	a0 e0       	ldi	r26, 0x00	; 0
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	bc 01       	movw	r22, r24
     57a:	cd 01       	movw	r24, r26
     57c:	67 56       	subi	r22, 0x67	; 103
     57e:	76 4c       	sbci	r23, 0xC6	; 198
     580:	80 40       	sbci	r24, 0x00	; 0
     582:	90 40       	sbci	r25, 0x00	; 0
     584:	29 e9       	ldi	r18, 0x99	; 153
     586:	39 e3       	ldi	r19, 0x39	; 57
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	0e 94 f9 07 	call	0xff2	; 0xff2 <__divmodsi4>
     590:	81 2f       	mov	r24, r17
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	28 0f       	add	r18, r24
     596:	39 1f       	adc	r19, r25
	start_timer4();
	return time;

}
     598:	82 2f       	mov	r24, r18
     59a:	93 2f       	mov	r25, r19
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	08 95       	ret

000005a4 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
     5a4:	87 b1       	in	r24, 0x07	; 7
     5a6:	87 6f       	ori	r24, 0xF7	; 247
     5a8:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
     5aa:	88 b1       	in	r24, 0x08	; 8
     5ac:	80 78       	andi	r24, 0x80	; 128
     5ae:	88 b9       	out	0x08, r24	; 8
}
     5b0:	08 95       	ret

000005b2 <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
     5b2:	ec eb       	ldi	r30, 0xBC	; 188
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
     5b8:	80 e1       	ldi	r24, 0x10	; 16
     5ba:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
     5be:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
     5c2:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
     5c6:	84 e0       	ldi	r24, 0x04	; 4
     5c8:	80 83       	st	Z, r24
}
     5ca:	08 95       	ret

000005cc <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     5cc:	94 ea       	ldi	r25, 0xA4	; 164
     5ce:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5d2:	ec eb       	ldi	r30, 0xBC	; 188
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	90 81       	ld	r25, Z
     5d8:	99 23       	and	r25, r25
     5da:	ec f7       	brge	.-6      	; 0x5d6 <write_byte+0xa>
     5dc:	ef ef       	ldi	r30, 0xFF	; 255
     5de:	ff e8       	ldi	r31, 0x8F	; 143
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <write_byte+0x14>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <write_byte+0x1a>
     5e6:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
     5e8:	92 ed       	ldi	r25, 0xD2	; 210
     5ea:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     5ee:	94 e8       	ldi	r25, 0x84	; 132
     5f0:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5f4:	ec eb       	ldi	r30, 0xBC	; 188
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	90 81       	ld	r25, Z
     5fa:	99 23       	and	r25, r25
     5fc:	ec f7       	brge	.-6      	; 0x5f8 <write_byte+0x2c>
     5fe:	ef ef       	ldi	r30, 0xFF	; 255
     600:	ff e8       	ldi	r31, 0x8F	; 143
     602:	31 97       	sbiw	r30, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <write_byte+0x36>
     606:	00 c0       	rjmp	.+0      	; 0x608 <write_byte+0x3c>
     608:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     60a:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     60e:	94 e8       	ldi	r25, 0x84	; 132
     610:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     614:	ec eb       	ldi	r30, 0xBC	; 188
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	90 81       	ld	r25, Z
     61a:	99 23       	and	r25, r25
     61c:	ec f7       	brge	.-6      	; 0x618 <write_byte+0x4c>
     61e:	ef ef       	ldi	r30, 0xFF	; 255
     620:	ff e8       	ldi	r31, 0x8F	; 143
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <write_byte+0x56>
     626:	00 c0       	rjmp	.+0      	; 0x628 <write_byte+0x5c>
     628:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     62a:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     62e:	84 e8       	ldi	r24, 0x84	; 132
     630:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     634:	ec eb       	ldi	r30, 0xBC	; 188
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	88 23       	and	r24, r24
     63c:	ec f7       	brge	.-6      	; 0x638 <write_byte+0x6c>
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	9f e8       	ldi	r25, 0x8F	; 143
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <write_byte+0x76>
     646:	00 c0       	rjmp	.+0      	; 0x648 <write_byte+0x7c>
     648:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     64a:	84 e9       	ldi	r24, 0x94	; 148
     64c:	80 93 bc 00 	sts	0x00BC, r24
}
     650:	08 95       	ret

00000652 <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     652:	94 ea       	ldi	r25, 0xA4	; 164
     654:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     658:	ec eb       	ldi	r30, 0xBC	; 188
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	90 81       	ld	r25, Z
     65e:	99 23       	and	r25, r25
     660:	ec f7       	brge	.-6      	; 0x65c <read_byte+0xa>
 //_delay_ms(10);

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
     662:	92 ed       	ldi	r25, 0xD2	; 210
     664:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     668:	94 e8       	ldi	r25, 0x84	; 132
     66a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     66e:	ec eb       	ldi	r30, 0xBC	; 188
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	90 81       	ld	r25, Z
     674:	99 23       	and	r25, r25
     676:	ec f7       	brge	.-6      	; 0x672 <read_byte+0x20>
 //_delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
     678:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     67c:	84 e8       	ldi	r24, 0x84	; 132
     67e:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     682:	ec eb       	ldi	r30, 0xBC	; 188
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	88 23       	and	r24, r24
     68a:	ec f7       	brge	.-6      	; 0x686 <read_byte+0x34>
// _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     68c:	84 ea       	ldi	r24, 0xA4	; 164
     68e:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     692:	ec eb       	ldi	r30, 0xBC	; 188
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	88 23       	and	r24, r24
     69a:	ec f7       	brge	.-6      	; 0x696 <read_byte+0x44>
 //_delay_ms(10);


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
     69c:	83 ed       	ldi	r24, 0xD3	; 211
     69e:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     6a2:	84 e8       	ldi	r24, 0x84	; 132
     6a4:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     6a8:	ec eb       	ldi	r30, 0xBC	; 188
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	88 23       	and	r24, r24
     6b0:	ec f7       	brge	.-6      	; 0x6ac <read_byte+0x5a>
 //_delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     6b2:	84 e8       	ldi	r24, 0x84	; 132
     6b4:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     6b8:	ec eb       	ldi	r30, 0xBC	; 188
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	88 23       	and	r24, r24
     6c0:	ec f7       	brge	.-6      	; 0x6bc <read_byte+0x6a>
 rtc_recv_data = TWDR;
     6c2:	eb eb       	ldi	r30, 0xBB	; 187
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	80 81       	ld	r24, Z
 //_delay_ms(10);
 

 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     6c8:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     6ca:	94 e8       	ldi	r25, 0x84	; 132
     6cc:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     6d0:	ec eb       	ldi	r30, 0xBC	; 188
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	90 81       	ld	r25, Z
     6d6:	99 23       	and	r25, r25
     6d8:	ec f7       	brge	.-6      	; 0x6d4 <read_byte+0x82>
 //_delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
     6da:	08 95       	ret

000006dc <display_format_init>:
//------------------------------------------------------------------------------
// initialise the diaplay format  
//------------------------------------------------------------------------------
void display_format_init(void)
{
 lcd_cursor (1, 1);
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
 lcd_string("  :  :  ");  
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_string>
}
     6ec:	08 95       	ret

000006ee <init_devices>:

// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
     6ee:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
     6f0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_port_config>
 twi_init();         // configur the I2cC, i.e TWI module 
     6f4:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <twi_init>
 sei();              // re-enable interrupts
     6f8:	78 94       	sei
 //all peripherals are now initialized
}
     6fa:	08 95       	ret

000006fc <btod>:

int btod(int n) /* Function to convert binary to decimal.*/
{
     6fc:	2f 92       	push	r2
     6fe:	3f 92       	push	r3
     700:	4f 92       	push	r4
     702:	5f 92       	push	r5
     704:	6f 92       	push	r6
     706:	7f 92       	push	r7
     708:	8f 92       	push	r8
     70a:	9f 92       	push	r9
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	2c 01       	movw	r4, r24
	int decimal=0, i=0, rem;
	while (n!=0)
     722:	00 97       	sbiw	r24, 0x00	; 0
     724:	09 f4       	brne	.+2      	; 0x728 <btod+0x2c>
     726:	52 c0       	rjmp	.+164    	; 0x7cc <btod+0xd0>
 //all peripherals are now initialized
}

int btod(int n) /* Function to convert binary to decimal.*/
{
	int decimal=0, i=0, rem;
     728:	88 24       	eor	r8, r8
     72a:	99 24       	eor	r9, r9
     72c:	00 e0       	ldi	r16, 0x00	; 0
     72e:	10 e0       	ldi	r17, 0x00	; 0
	while (n!=0)
	{
		rem = n%10;
     730:	0f 2e       	mov	r0, r31
     732:	fa e0       	ldi	r31, 0x0A	; 10
     734:	2f 2e       	mov	r2, r31
     736:	33 24       	eor	r3, r3
     738:	f0 2d       	mov	r31, r0
		n/=10;
     73a:	c2 01       	movw	r24, r4
     73c:	b1 01       	movw	r22, r2
     73e:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__divmodhi4>
     742:	2b 01       	movw	r4, r22
     744:	3c 01       	movw	r6, r24
		decimal += rem*pow(2,i);
     746:	b4 01       	movw	r22, r8
     748:	88 27       	eor	r24, r24
     74a:	77 fd       	sbrc	r23, 7
     74c:	80 95       	com	r24
     74e:	98 2f       	mov	r25, r24
     750:	0e 94 16 05 	call	0xa2c	; 0xa2c <__floatsisf>
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e4       	ldi	r25, 0x40	; 64
     760:	0e 94 05 06 	call	0xc0a	; 0xc0a <pow>
     764:	c6 2f       	mov	r28, r22
     766:	d7 2f       	mov	r29, r23
     768:	b8 2e       	mov	r11, r24
     76a:	a9 2e       	mov	r10, r25
     76c:	b8 01       	movw	r22, r16
     76e:	88 27       	eor	r24, r24
     770:	77 fd       	sbrc	r23, 7
     772:	80 95       	com	r24
     774:	98 2f       	mov	r25, r24
     776:	0e 94 16 05 	call	0xa2c	; 0xa2c <__floatsisf>
     77a:	6b 01       	movw	r12, r22
     77c:	7c 01       	movw	r14, r24
     77e:	b3 01       	movw	r22, r6
     780:	88 27       	eor	r24, r24
     782:	77 fd       	sbrc	r23, 7
     784:	80 95       	com	r24
     786:	98 2f       	mov	r25, r24
     788:	0e 94 16 05 	call	0xa2c	; 0xa2c <__floatsisf>
     78c:	0c 2f       	mov	r16, r28
     78e:	1d 2f       	mov	r17, r29
     790:	2b 2d       	mov	r18, r11
     792:	3a 2d       	mov	r19, r10
     794:	a9 01       	movw	r20, r18
     796:	98 01       	movw	r18, r16
     798:	0e 94 a2 05 	call	0xb44	; 0xb44 <__mulsf3>
     79c:	9b 01       	movw	r18, r22
     79e:	ac 01       	movw	r20, r24
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__addsf3>
     7a8:	46 2f       	mov	r20, r22
     7aa:	57 2f       	mov	r21, r23
     7ac:	68 2f       	mov	r22, r24
     7ae:	79 2f       	mov	r23, r25
     7b0:	cb 01       	movw	r24, r22
     7b2:	ba 01       	movw	r22, r20
     7b4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
     7b8:	8b 01       	movw	r16, r22
     7ba:	9c 01       	movw	r18, r24
		++i;
     7bc:	08 94       	sec
     7be:	81 1c       	adc	r8, r1
     7c0:	91 1c       	adc	r9, r1
}

int btod(int n) /* Function to convert binary to decimal.*/
{
	int decimal=0, i=0, rem;
	while (n!=0)
     7c2:	41 14       	cp	r4, r1
     7c4:	51 04       	cpc	r5, r1
     7c6:	09 f0       	breq	.+2      	; 0x7ca <btod+0xce>
     7c8:	b8 cf       	rjmp	.-144    	; 0x73a <btod+0x3e>
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <btod+0xd4>
 //all peripherals are now initialized
}

int btod(int n) /* Function to convert binary to decimal.*/
{
	int decimal=0, i=0, rem;
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	10 e0       	ldi	r17, 0x00	; 0
		n/=10;
		decimal += rem*pow(2,i);
		++i;
	}
	return decimal;
}
     7d0:	80 2f       	mov	r24, r16
     7d2:	91 2f       	mov	r25, r17
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	6f 90       	pop	r6
     7f0:	5f 90       	pop	r5
     7f2:	4f 90       	pop	r4
     7f4:	3f 90       	pop	r3
     7f6:	2f 90       	pop	r2
     7f8:	08 95       	ret

000007fa <sign>:
	} 
	else
	{
		return c;
	}
}
     7fa:	08 95       	ret

000007fc <pr_int>:



void pr_int(int a,int b,int c,int d) /* get negative values*/
{
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	c8 2f       	mov	r28, r24
     80a:	d6 2f       	mov	r29, r22
     80c:	8a 01       	movw	r16, r20
     80e:	79 01       	movw	r14, r18
	if (c<0)
     810:	55 23       	and	r21, r21
     812:	a4 f4       	brge	.+40     	; 0x83c <pr_int+0x40>
	{
		lcd_cursor(a,b);
     814:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
		lcd_string("-");
     818:	89 e0       	ldi	r24, 0x09	; 9
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
     820:	6d 2f       	mov	r22, r29
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	a8 01       	movw	r20, r16
     826:	11 23       	and	r17, r17
     828:	24 f4       	brge	.+8      	; 0x832 <pr_int+0x36>
     82a:	44 27       	eor	r20, r20
     82c:	55 27       	eor	r21, r21
     82e:	40 1b       	sub	r20, r16
     830:	51 0b       	sbc	r21, r17
     832:	8c 2f       	mov	r24, r28
     834:	97 01       	movw	r18, r14
     836:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
     83a:	0d c0       	rjmp	.+26     	; 0x856 <pr_int+0x5a>
	}
	else
	{
		lcd_cursor(a,b);
     83c:	0e 94 8b 01 	call	0x316	; 0x316 <lcd_cursor>
		lcd_string("+");
     840:	8b e0       	ldi	r24, 0x0B	; 11
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_string>
		lcd_print(a,b+1,c,d);
     848:	6d 2f       	mov	r22, r29
     84a:	6f 5f       	subi	r22, 0xFF	; 255
     84c:	8c 2f       	mov	r24, r28
     84e:	a8 01       	movw	r20, r16
     850:	97 01       	movw	r18, r14
     852:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
	}
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	08 95       	ret

00000864 <main>:
{   
  uint16_t x_byte = 0,y_byte = 0,z_byte = 0,x_ang=0;
  uint8_t x_byte1 = 0,x_byte2 = 0,y_byte1 = 0,y_byte2 = 0,z_byte1 = 0,z_byte2 = 0;
  int gy_angle =0,gy_sum=0;

 init_devices();
     864:	0e 94 77 03 	call	0x6ee	; 0x6ee <init_devices>
 lcd_set_4bit();                // set the LCD in 4 bit mode
     868:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
 lcd_init();                    // initialize the LCD with its commands
     86c:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>
 display_clear();               // clear the LCD
     870:	0e 94 38 02 	call	0x470	; 0x470 <display_clear>
 write_byte(0x0F,0x20);
     874:	8f e0       	ldi	r24, 0x0F	; 15
     876:	60 e2       	ldi	r22, 0x20	; 32
     878:	0e 94 e6 02 	call	0x5cc	; 0x5cc <write_byte>
 //write_byte(0x8,0x2D);
start_timer4();
     87c:	0e 94 75 02 	call	0x4ea	; 0x4ea <start_timer4>
//-------------------------------------------------------------------------------
int main(void)
{   
  uint16_t x_byte = 0,y_byte = 0,z_byte = 0,x_ang=0;
  uint8_t x_byte1 = 0,x_byte2 = 0,y_byte1 = 0,y_byte2 = 0,z_byte1 = 0,z_byte2 = 0;
  int gy_angle =0,gy_sum=0;
     880:	ee 24       	eor	r14, r14
     882:	ff 24       	eor	r15, r15
 
while(1)
{
	   
	   
	  x_byte1 = read_byte(XL);
     884:	88 e2       	ldi	r24, 0x28	; 40
     886:	0e 94 29 03 	call	0x652	; 0x652 <read_byte>
     88a:	c8 2f       	mov	r28, r24
	  //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(XH);
     88c:	89 e2       	ldi	r24, 0x29	; 41
     88e:	0e 94 29 03 	call	0x652	; 0x652 <read_byte>
     892:	08 2f       	mov	r16, r24
	   //lcd_print(2,1,x_byte2,3);
	   
	   y_byte1 = read_byte(YL);
     894:	8a e2       	ldi	r24, 0x2A	; 42
     896:	0e 94 29 03 	call	0x652	; 0x652 <read_byte>
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(YH);
     89a:	8b e2       	ldi	r24, 0x2B	; 43
     89c:	0e 94 29 03 	call	0x652	; 0x652 <read_byte>
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(ZL);
     8a0:	8c e2       	ldi	r24, 0x2C	; 44
     8a2:	0e 94 29 03 	call	0x652	; 0x652 <read_byte>
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(ZH);
     8a6:	8d e2       	ldi	r24, 0x2D	; 45
     8a8:	0e 94 29 03 	call	0x652	; 0x652 <read_byte>
	   //lcd_print(2,10,z_byte2,3);
	   
	   x_byte = x_byte2;   // to print 10 bit integer value on LCD
	   x_byte = (x_byte << 8);
     8ac:	d0 2e       	mov	r13, r16
     8ae:	cc 24       	eor	r12, r12
	   x_byte |= x_byte1;
     8b0:	8c 2f       	mov	r24, r28
     8b2:	90 e0       	ldi	r25, 0x00	; 0
	   x_ang = sign(x_byte);
     8b4:	8c 29       	or	r24, r12
     8b6:	9d 29       	or	r25, r13
     8b8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <sign>
     8bc:	ec 01       	movw	r28, r24
	   z_byte = z_byte2;
	   z_byte = (z_byte << 8);
	   z_byte |= z_byte1;
	   //lcd_print(1,10,z_byte,5);
	   //pr_int(1,9,z_byte,5);*/
	   int timechange=millis();
     8be:	0e 94 ae 02 	call	0x55c	; 0x55c <millis>
	   gy_angle = (x_ang*timechange);
     8c2:	8c 9f       	mul	r24, r28
     8c4:	80 01       	movw	r16, r0
     8c6:	8d 9f       	mul	r24, r29
     8c8:	10 0d       	add	r17, r0
     8ca:	9c 9f       	mul	r25, r28
     8cc:	10 0d       	add	r17, r0
     8ce:	11 24       	eor	r1, r1
	   gy_sum += gy_angle;
     8d0:	a7 01       	movw	r20, r14
     8d2:	40 0f       	add	r20, r16
     8d4:	51 1f       	adc	r21, r17
	   pr_int(1,1,gy_sum,3);
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	23 e0       	ldi	r18, 0x03	; 3
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <pr_int>
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	9f e7       	ldi	r25, 0x7F	; 127
     8ea:	a4 e0       	ldi	r26, 0x04	; 4
     8ec:	81 50       	subi	r24, 0x01	; 1
     8ee:	90 40       	sbci	r25, 0x00	; 0
     8f0:	a0 40       	sbci	r26, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <main+0x88>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <main+0x92>
     8f6:	00 00       	nop
	   gy_sum = gy_angle;
     8f8:	78 01       	movw	r14, r16
     8fa:	c4 cf       	rjmp	.-120    	; 0x884 <main+0x20>

000008fc <__subsf3>:
     8fc:	50 58       	subi	r21, 0x80	; 128

000008fe <__addsf3>:
     8fe:	bb 27       	eor	r27, r27
     900:	aa 27       	eor	r26, r26
     902:	0e d0       	rcall	.+28     	; 0x920 <__addsf3x>
     904:	e5 c0       	rjmp	.+458    	; 0xad0 <__fp_round>
     906:	d6 d0       	rcall	.+428    	; 0xab4 <__fp_pscA>
     908:	30 f0       	brcs	.+12     	; 0x916 <__addsf3+0x18>
     90a:	db d0       	rcall	.+438    	; 0xac2 <__fp_pscB>
     90c:	20 f0       	brcs	.+8      	; 0x916 <__addsf3+0x18>
     90e:	31 f4       	brne	.+12     	; 0x91c <__addsf3+0x1e>
     910:	9f 3f       	cpi	r25, 0xFF	; 255
     912:	11 f4       	brne	.+4      	; 0x918 <__addsf3+0x1a>
     914:	1e f4       	brtc	.+6      	; 0x91c <__addsf3+0x1e>
     916:	cb c0       	rjmp	.+406    	; 0xaae <__fp_nan>
     918:	0e f4       	brtc	.+2      	; 0x91c <__addsf3+0x1e>
     91a:	e0 95       	com	r30
     91c:	e7 fb       	bst	r30, 7
     91e:	c1 c0       	rjmp	.+386    	; 0xaa2 <__fp_inf>

00000920 <__addsf3x>:
     920:	e9 2f       	mov	r30, r25
     922:	e7 d0       	rcall	.+462    	; 0xaf2 <__fp_split3>
     924:	80 f3       	brcs	.-32     	; 0x906 <__addsf3+0x8>
     926:	ba 17       	cp	r27, r26
     928:	62 07       	cpc	r22, r18
     92a:	73 07       	cpc	r23, r19
     92c:	84 07       	cpc	r24, r20
     92e:	95 07       	cpc	r25, r21
     930:	18 f0       	brcs	.+6      	; 0x938 <__addsf3x+0x18>
     932:	71 f4       	brne	.+28     	; 0x950 <__addsf3x+0x30>
     934:	9e f5       	brtc	.+102    	; 0x99c <__addsf3x+0x7c>
     936:	ff c0       	rjmp	.+510    	; 0xb36 <__fp_zero>
     938:	0e f4       	brtc	.+2      	; 0x93c <__addsf3x+0x1c>
     93a:	e0 95       	com	r30
     93c:	0b 2e       	mov	r0, r27
     93e:	ba 2f       	mov	r27, r26
     940:	a0 2d       	mov	r26, r0
     942:	0b 01       	movw	r0, r22
     944:	b9 01       	movw	r22, r18
     946:	90 01       	movw	r18, r0
     948:	0c 01       	movw	r0, r24
     94a:	ca 01       	movw	r24, r20
     94c:	a0 01       	movw	r20, r0
     94e:	11 24       	eor	r1, r1
     950:	ff 27       	eor	r31, r31
     952:	59 1b       	sub	r21, r25
     954:	99 f0       	breq	.+38     	; 0x97c <__addsf3x+0x5c>
     956:	59 3f       	cpi	r21, 0xF9	; 249
     958:	50 f4       	brcc	.+20     	; 0x96e <__addsf3x+0x4e>
     95a:	50 3e       	cpi	r21, 0xE0	; 224
     95c:	68 f1       	brcs	.+90     	; 0x9b8 <__addsf3x+0x98>
     95e:	1a 16       	cp	r1, r26
     960:	f0 40       	sbci	r31, 0x00	; 0
     962:	a2 2f       	mov	r26, r18
     964:	23 2f       	mov	r18, r19
     966:	34 2f       	mov	r19, r20
     968:	44 27       	eor	r20, r20
     96a:	58 5f       	subi	r21, 0xF8	; 248
     96c:	f3 cf       	rjmp	.-26     	; 0x954 <__addsf3x+0x34>
     96e:	46 95       	lsr	r20
     970:	37 95       	ror	r19
     972:	27 95       	ror	r18
     974:	a7 95       	ror	r26
     976:	f0 40       	sbci	r31, 0x00	; 0
     978:	53 95       	inc	r21
     97a:	c9 f7       	brne	.-14     	; 0x96e <__addsf3x+0x4e>
     97c:	7e f4       	brtc	.+30     	; 0x99c <__addsf3x+0x7c>
     97e:	1f 16       	cp	r1, r31
     980:	ba 0b       	sbc	r27, r26
     982:	62 0b       	sbc	r22, r18
     984:	73 0b       	sbc	r23, r19
     986:	84 0b       	sbc	r24, r20
     988:	ba f0       	brmi	.+46     	; 0x9b8 <__addsf3x+0x98>
     98a:	91 50       	subi	r25, 0x01	; 1
     98c:	a1 f0       	breq	.+40     	; 0x9b6 <__addsf3x+0x96>
     98e:	ff 0f       	add	r31, r31
     990:	bb 1f       	adc	r27, r27
     992:	66 1f       	adc	r22, r22
     994:	77 1f       	adc	r23, r23
     996:	88 1f       	adc	r24, r24
     998:	c2 f7       	brpl	.-16     	; 0x98a <__addsf3x+0x6a>
     99a:	0e c0       	rjmp	.+28     	; 0x9b8 <__addsf3x+0x98>
     99c:	ba 0f       	add	r27, r26
     99e:	62 1f       	adc	r22, r18
     9a0:	73 1f       	adc	r23, r19
     9a2:	84 1f       	adc	r24, r20
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__addsf3x+0x98>
     9a6:	87 95       	ror	r24
     9a8:	77 95       	ror	r23
     9aa:	67 95       	ror	r22
     9ac:	b7 95       	ror	r27
     9ae:	f7 95       	ror	r31
     9b0:	9e 3f       	cpi	r25, 0xFE	; 254
     9b2:	08 f0       	brcs	.+2      	; 0x9b6 <__addsf3x+0x96>
     9b4:	b3 cf       	rjmp	.-154    	; 0x91c <__addsf3+0x1e>
     9b6:	93 95       	inc	r25
     9b8:	88 0f       	add	r24, r24
     9ba:	08 f0       	brcs	.+2      	; 0x9be <__addsf3x+0x9e>
     9bc:	99 27       	eor	r25, r25
     9be:	ee 0f       	add	r30, r30
     9c0:	97 95       	ror	r25
     9c2:	87 95       	ror	r24
     9c4:	08 95       	ret

000009c6 <__fixsfsi>:
     9c6:	04 d0       	rcall	.+8      	; 0x9d0 <__fixunssfsi>
     9c8:	68 94       	set
     9ca:	b1 11       	cpse	r27, r1
     9cc:	b5 c0       	rjmp	.+362    	; 0xb38 <__fp_szero>
     9ce:	08 95       	ret

000009d0 <__fixunssfsi>:
     9d0:	98 d0       	rcall	.+304    	; 0xb02 <__fp_splitA>
     9d2:	88 f0       	brcs	.+34     	; 0x9f6 <__fixunssfsi+0x26>
     9d4:	9f 57       	subi	r25, 0x7F	; 127
     9d6:	90 f0       	brcs	.+36     	; 0x9fc <__fixunssfsi+0x2c>
     9d8:	b9 2f       	mov	r27, r25
     9da:	99 27       	eor	r25, r25
     9dc:	b7 51       	subi	r27, 0x17	; 23
     9de:	a0 f0       	brcs	.+40     	; 0xa08 <__fixunssfsi+0x38>
     9e0:	d1 f0       	breq	.+52     	; 0xa16 <__fixunssfsi+0x46>
     9e2:	66 0f       	add	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	88 1f       	adc	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	1a f0       	brmi	.+6      	; 0x9f2 <__fixunssfsi+0x22>
     9ec:	ba 95       	dec	r27
     9ee:	c9 f7       	brne	.-14     	; 0x9e2 <__fixunssfsi+0x12>
     9f0:	12 c0       	rjmp	.+36     	; 0xa16 <__fixunssfsi+0x46>
     9f2:	b1 30       	cpi	r27, 0x01	; 1
     9f4:	81 f0       	breq	.+32     	; 0xa16 <__fixunssfsi+0x46>
     9f6:	9f d0       	rcall	.+318    	; 0xb36 <__fp_zero>
     9f8:	b1 e0       	ldi	r27, 0x01	; 1
     9fa:	08 95       	ret
     9fc:	9c c0       	rjmp	.+312    	; 0xb36 <__fp_zero>
     9fe:	67 2f       	mov	r22, r23
     a00:	78 2f       	mov	r23, r24
     a02:	88 27       	eor	r24, r24
     a04:	b8 5f       	subi	r27, 0xF8	; 248
     a06:	39 f0       	breq	.+14     	; 0xa16 <__fixunssfsi+0x46>
     a08:	b9 3f       	cpi	r27, 0xF9	; 249
     a0a:	cc f3       	brlt	.-14     	; 0x9fe <__fixunssfsi+0x2e>
     a0c:	86 95       	lsr	r24
     a0e:	77 95       	ror	r23
     a10:	67 95       	ror	r22
     a12:	b3 95       	inc	r27
     a14:	d9 f7       	brne	.-10     	; 0xa0c <__fixunssfsi+0x3c>
     a16:	3e f4       	brtc	.+14     	; 0xa26 <__fixunssfsi+0x56>
     a18:	90 95       	com	r25
     a1a:	80 95       	com	r24
     a1c:	70 95       	com	r23
     a1e:	61 95       	neg	r22
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	8f 4f       	sbci	r24, 0xFF	; 255
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	08 95       	ret

00000a28 <__floatunsisf>:
     a28:	e8 94       	clt
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <__floatsisf+0x12>

00000a2c <__floatsisf>:
     a2c:	97 fb       	bst	r25, 7
     a2e:	3e f4       	brtc	.+14     	; 0xa3e <__floatsisf+0x12>
     a30:	90 95       	com	r25
     a32:	80 95       	com	r24
     a34:	70 95       	com	r23
     a36:	61 95       	neg	r22
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	8f 4f       	sbci	r24, 0xFF	; 255
     a3c:	9f 4f       	sbci	r25, 0xFF	; 255
     a3e:	99 23       	and	r25, r25
     a40:	a9 f0       	breq	.+42     	; 0xa6c <__floatsisf+0x40>
     a42:	f9 2f       	mov	r31, r25
     a44:	96 e9       	ldi	r25, 0x96	; 150
     a46:	bb 27       	eor	r27, r27
     a48:	93 95       	inc	r25
     a4a:	f6 95       	lsr	r31
     a4c:	87 95       	ror	r24
     a4e:	77 95       	ror	r23
     a50:	67 95       	ror	r22
     a52:	b7 95       	ror	r27
     a54:	f1 11       	cpse	r31, r1
     a56:	f8 cf       	rjmp	.-16     	; 0xa48 <__floatsisf+0x1c>
     a58:	fa f4       	brpl	.+62     	; 0xa98 <__floatsisf+0x6c>
     a5a:	bb 0f       	add	r27, r27
     a5c:	11 f4       	brne	.+4      	; 0xa62 <__floatsisf+0x36>
     a5e:	60 ff       	sbrs	r22, 0
     a60:	1b c0       	rjmp	.+54     	; 0xa98 <__floatsisf+0x6c>
     a62:	6f 5f       	subi	r22, 0xFF	; 255
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	8f 4f       	sbci	r24, 0xFF	; 255
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	16 c0       	rjmp	.+44     	; 0xa98 <__floatsisf+0x6c>
     a6c:	88 23       	and	r24, r24
     a6e:	11 f0       	breq	.+4      	; 0xa74 <__floatsisf+0x48>
     a70:	96 e9       	ldi	r25, 0x96	; 150
     a72:	11 c0       	rjmp	.+34     	; 0xa96 <__floatsisf+0x6a>
     a74:	77 23       	and	r23, r23
     a76:	21 f0       	breq	.+8      	; 0xa80 <__floatsisf+0x54>
     a78:	9e e8       	ldi	r25, 0x8E	; 142
     a7a:	87 2f       	mov	r24, r23
     a7c:	76 2f       	mov	r23, r22
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <__floatsisf+0x5e>
     a80:	66 23       	and	r22, r22
     a82:	71 f0       	breq	.+28     	; 0xaa0 <__floatsisf+0x74>
     a84:	96 e8       	ldi	r25, 0x86	; 134
     a86:	86 2f       	mov	r24, r22
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	2a f0       	brmi	.+10     	; 0xa98 <__floatsisf+0x6c>
     a8e:	9a 95       	dec	r25
     a90:	66 0f       	add	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	88 1f       	adc	r24, r24
     a96:	da f7       	brpl	.-10     	; 0xa8e <__floatsisf+0x62>
     a98:	88 0f       	add	r24, r24
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	97 f9       	bld	r25, 7
     aa0:	08 95       	ret

00000aa2 <__fp_inf>:
     aa2:	97 f9       	bld	r25, 7
     aa4:	9f 67       	ori	r25, 0x7F	; 127
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	08 95       	ret

00000aae <__fp_nan>:
     aae:	9f ef       	ldi	r25, 0xFF	; 255
     ab0:	80 ec       	ldi	r24, 0xC0	; 192
     ab2:	08 95       	ret

00000ab4 <__fp_pscA>:
     ab4:	00 24       	eor	r0, r0
     ab6:	0a 94       	dec	r0
     ab8:	16 16       	cp	r1, r22
     aba:	17 06       	cpc	r1, r23
     abc:	18 06       	cpc	r1, r24
     abe:	09 06       	cpc	r0, r25
     ac0:	08 95       	ret

00000ac2 <__fp_pscB>:
     ac2:	00 24       	eor	r0, r0
     ac4:	0a 94       	dec	r0
     ac6:	12 16       	cp	r1, r18
     ac8:	13 06       	cpc	r1, r19
     aca:	14 06       	cpc	r1, r20
     acc:	05 06       	cpc	r0, r21
     ace:	08 95       	ret

00000ad0 <__fp_round>:
     ad0:	09 2e       	mov	r0, r25
     ad2:	03 94       	inc	r0
     ad4:	00 0c       	add	r0, r0
     ad6:	11 f4       	brne	.+4      	; 0xadc <__fp_round+0xc>
     ad8:	88 23       	and	r24, r24
     ada:	52 f0       	brmi	.+20     	; 0xaf0 <__fp_round+0x20>
     adc:	bb 0f       	add	r27, r27
     ade:	40 f4       	brcc	.+16     	; 0xaf0 <__fp_round+0x20>
     ae0:	bf 2b       	or	r27, r31
     ae2:	11 f4       	brne	.+4      	; 0xae8 <__fp_round+0x18>
     ae4:	60 ff       	sbrs	r22, 0
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <__fp_round+0x20>
     ae8:	6f 5f       	subi	r22, 0xFF	; 255
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	8f 4f       	sbci	r24, 0xFF	; 255
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	08 95       	ret

00000af2 <__fp_split3>:
     af2:	57 fd       	sbrc	r21, 7
     af4:	90 58       	subi	r25, 0x80	; 128
     af6:	44 0f       	add	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	59 f0       	breq	.+22     	; 0xb12 <__fp_splitA+0x10>
     afc:	5f 3f       	cpi	r21, 0xFF	; 255
     afe:	71 f0       	breq	.+28     	; 0xb1c <__fp_splitA+0x1a>
     b00:	47 95       	ror	r20

00000b02 <__fp_splitA>:
     b02:	88 0f       	add	r24, r24
     b04:	97 fb       	bst	r25, 7
     b06:	99 1f       	adc	r25, r25
     b08:	61 f0       	breq	.+24     	; 0xb22 <__fp_splitA+0x20>
     b0a:	9f 3f       	cpi	r25, 0xFF	; 255
     b0c:	79 f0       	breq	.+30     	; 0xb2c <__fp_splitA+0x2a>
     b0e:	87 95       	ror	r24
     b10:	08 95       	ret
     b12:	12 16       	cp	r1, r18
     b14:	13 06       	cpc	r1, r19
     b16:	14 06       	cpc	r1, r20
     b18:	55 1f       	adc	r21, r21
     b1a:	f2 cf       	rjmp	.-28     	; 0xb00 <__fp_split3+0xe>
     b1c:	46 95       	lsr	r20
     b1e:	f1 df       	rcall	.-30     	; 0xb02 <__fp_splitA>
     b20:	08 c0       	rjmp	.+16     	; 0xb32 <__fp_splitA+0x30>
     b22:	16 16       	cp	r1, r22
     b24:	17 06       	cpc	r1, r23
     b26:	18 06       	cpc	r1, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	f1 cf       	rjmp	.-30     	; 0xb0e <__fp_splitA+0xc>
     b2c:	86 95       	lsr	r24
     b2e:	71 05       	cpc	r23, r1
     b30:	61 05       	cpc	r22, r1
     b32:	08 94       	sec
     b34:	08 95       	ret

00000b36 <__fp_zero>:
     b36:	e8 94       	clt

00000b38 <__fp_szero>:
     b38:	bb 27       	eor	r27, r27
     b3a:	66 27       	eor	r22, r22
     b3c:	77 27       	eor	r23, r23
     b3e:	cb 01       	movw	r24, r22
     b40:	97 f9       	bld	r25, 7
     b42:	08 95       	ret

00000b44 <__mulsf3>:
     b44:	0b d0       	rcall	.+22     	; 0xb5c <__mulsf3x>
     b46:	c4 cf       	rjmp	.-120    	; 0xad0 <__fp_round>
     b48:	b5 df       	rcall	.-150    	; 0xab4 <__fp_pscA>
     b4a:	28 f0       	brcs	.+10     	; 0xb56 <__mulsf3+0x12>
     b4c:	ba df       	rcall	.-140    	; 0xac2 <__fp_pscB>
     b4e:	18 f0       	brcs	.+6      	; 0xb56 <__mulsf3+0x12>
     b50:	95 23       	and	r25, r21
     b52:	09 f0       	breq	.+2      	; 0xb56 <__mulsf3+0x12>
     b54:	a6 cf       	rjmp	.-180    	; 0xaa2 <__fp_inf>
     b56:	ab cf       	rjmp	.-170    	; 0xaae <__fp_nan>
     b58:	11 24       	eor	r1, r1
     b5a:	ee cf       	rjmp	.-36     	; 0xb38 <__fp_szero>

00000b5c <__mulsf3x>:
     b5c:	ca df       	rcall	.-108    	; 0xaf2 <__fp_split3>
     b5e:	a0 f3       	brcs	.-24     	; 0xb48 <__mulsf3+0x4>

00000b60 <__mulsf3_pse>:
     b60:	95 9f       	mul	r25, r21
     b62:	d1 f3       	breq	.-12     	; 0xb58 <__mulsf3+0x14>
     b64:	95 0f       	add	r25, r21
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	55 1f       	adc	r21, r21
     b6a:	62 9f       	mul	r22, r18
     b6c:	f0 01       	movw	r30, r0
     b6e:	72 9f       	mul	r23, r18
     b70:	bb 27       	eor	r27, r27
     b72:	f0 0d       	add	r31, r0
     b74:	b1 1d       	adc	r27, r1
     b76:	63 9f       	mul	r22, r19
     b78:	aa 27       	eor	r26, r26
     b7a:	f0 0d       	add	r31, r0
     b7c:	b1 1d       	adc	r27, r1
     b7e:	aa 1f       	adc	r26, r26
     b80:	64 9f       	mul	r22, r20
     b82:	66 27       	eor	r22, r22
     b84:	b0 0d       	add	r27, r0
     b86:	a1 1d       	adc	r26, r1
     b88:	66 1f       	adc	r22, r22
     b8a:	82 9f       	mul	r24, r18
     b8c:	22 27       	eor	r18, r18
     b8e:	b0 0d       	add	r27, r0
     b90:	a1 1d       	adc	r26, r1
     b92:	62 1f       	adc	r22, r18
     b94:	73 9f       	mul	r23, r19
     b96:	b0 0d       	add	r27, r0
     b98:	a1 1d       	adc	r26, r1
     b9a:	62 1f       	adc	r22, r18
     b9c:	83 9f       	mul	r24, r19
     b9e:	a0 0d       	add	r26, r0
     ba0:	61 1d       	adc	r22, r1
     ba2:	22 1f       	adc	r18, r18
     ba4:	74 9f       	mul	r23, r20
     ba6:	33 27       	eor	r19, r19
     ba8:	a0 0d       	add	r26, r0
     baa:	61 1d       	adc	r22, r1
     bac:	23 1f       	adc	r18, r19
     bae:	84 9f       	mul	r24, r20
     bb0:	60 0d       	add	r22, r0
     bb2:	21 1d       	adc	r18, r1
     bb4:	82 2f       	mov	r24, r18
     bb6:	76 2f       	mov	r23, r22
     bb8:	6a 2f       	mov	r22, r26
     bba:	11 24       	eor	r1, r1
     bbc:	9f 57       	subi	r25, 0x7F	; 127
     bbe:	50 40       	sbci	r21, 0x00	; 0
     bc0:	8a f0       	brmi	.+34     	; 0xbe4 <__mulsf3_pse+0x84>
     bc2:	e1 f0       	breq	.+56     	; 0xbfc <__mulsf3_pse+0x9c>
     bc4:	88 23       	and	r24, r24
     bc6:	4a f0       	brmi	.+18     	; 0xbda <__mulsf3_pse+0x7a>
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	bb 1f       	adc	r27, r27
     bce:	66 1f       	adc	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	88 1f       	adc	r24, r24
     bd4:	91 50       	subi	r25, 0x01	; 1
     bd6:	50 40       	sbci	r21, 0x00	; 0
     bd8:	a9 f7       	brne	.-22     	; 0xbc4 <__mulsf3_pse+0x64>
     bda:	9e 3f       	cpi	r25, 0xFE	; 254
     bdc:	51 05       	cpc	r21, r1
     bde:	70 f0       	brcs	.+28     	; 0xbfc <__mulsf3_pse+0x9c>
     be0:	60 cf       	rjmp	.-320    	; 0xaa2 <__fp_inf>
     be2:	aa cf       	rjmp	.-172    	; 0xb38 <__fp_szero>
     be4:	5f 3f       	cpi	r21, 0xFF	; 255
     be6:	ec f3       	brlt	.-6      	; 0xbe2 <__mulsf3_pse+0x82>
     be8:	98 3e       	cpi	r25, 0xE8	; 232
     bea:	dc f3       	brlt	.-10     	; 0xbe2 <__mulsf3_pse+0x82>
     bec:	86 95       	lsr	r24
     bee:	77 95       	ror	r23
     bf0:	67 95       	ror	r22
     bf2:	b7 95       	ror	r27
     bf4:	f7 95       	ror	r31
     bf6:	e7 95       	ror	r30
     bf8:	9f 5f       	subi	r25, 0xFF	; 255
     bfa:	c1 f7       	brne	.-16     	; 0xbec <__mulsf3_pse+0x8c>
     bfc:	fe 2b       	or	r31, r30
     bfe:	88 0f       	add	r24, r24
     c00:	91 1d       	adc	r25, r1
     c02:	96 95       	lsr	r25
     c04:	87 95       	ror	r24
     c06:	97 f9       	bld	r25, 7
     c08:	08 95       	ret

00000c0a <pow>:
     c0a:	fa 01       	movw	r30, r20
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	30 96       	adiw	r30, 0x00	; 0
     c12:	21 05       	cpc	r18, r1
     c14:	31 05       	cpc	r19, r1
     c16:	99 f1       	breq	.+102    	; 0xc7e <pow+0x74>
     c18:	61 15       	cp	r22, r1
     c1a:	71 05       	cpc	r23, r1
     c1c:	61 f4       	brne	.+24     	; 0xc36 <pow+0x2c>
     c1e:	80 38       	cpi	r24, 0x80	; 128
     c20:	bf e3       	ldi	r27, 0x3F	; 63
     c22:	9b 07       	cpc	r25, r27
     c24:	49 f1       	breq	.+82     	; 0xc78 <pow+0x6e>
     c26:	68 94       	set
     c28:	90 38       	cpi	r25, 0x80	; 128
     c2a:	81 05       	cpc	r24, r1
     c2c:	61 f0       	breq	.+24     	; 0xc46 <pow+0x3c>
     c2e:	80 38       	cpi	r24, 0x80	; 128
     c30:	bf ef       	ldi	r27, 0xFF	; 255
     c32:	9b 07       	cpc	r25, r27
     c34:	41 f0       	breq	.+16     	; 0xc46 <pow+0x3c>
     c36:	99 23       	and	r25, r25
     c38:	42 f5       	brpl	.+80     	; 0xc8a <pow+0x80>
     c3a:	ff 3f       	cpi	r31, 0xFF	; 255
     c3c:	e1 05       	cpc	r30, r1
     c3e:	31 05       	cpc	r19, r1
     c40:	21 05       	cpc	r18, r1
     c42:	11 f1       	breq	.+68     	; 0xc88 <pow+0x7e>
     c44:	e8 94       	clt
     c46:	08 94       	sec
     c48:	e7 95       	ror	r30
     c4a:	d9 01       	movw	r26, r18
     c4c:	aa 23       	and	r26, r26
     c4e:	29 f4       	brne	.+10     	; 0xc5a <pow+0x50>
     c50:	ab 2f       	mov	r26, r27
     c52:	be 2f       	mov	r27, r30
     c54:	f8 5f       	subi	r31, 0xF8	; 248
     c56:	d0 f3       	brcs	.-12     	; 0xc4c <pow+0x42>
     c58:	10 c0       	rjmp	.+32     	; 0xc7a <pow+0x70>
     c5a:	ff 5f       	subi	r31, 0xFF	; 255
     c5c:	70 f4       	brcc	.+28     	; 0xc7a <pow+0x70>
     c5e:	a6 95       	lsr	r26
     c60:	e0 f7       	brcc	.-8      	; 0xc5a <pow+0x50>
     c62:	f7 39       	cpi	r31, 0x97	; 151
     c64:	50 f0       	brcs	.+20     	; 0xc7a <pow+0x70>
     c66:	19 f0       	breq	.+6      	; 0xc6e <pow+0x64>
     c68:	ff 3a       	cpi	r31, 0xAF	; 175
     c6a:	38 f4       	brcc	.+14     	; 0xc7a <pow+0x70>
     c6c:	9f 77       	andi	r25, 0x7F	; 127
     c6e:	9f 93       	push	r25
     c70:	0c d0       	rcall	.+24     	; 0xc8a <pow+0x80>
     c72:	0f 90       	pop	r0
     c74:	07 fc       	sbrc	r0, 7
     c76:	90 58       	subi	r25, 0x80	; 128
     c78:	08 95       	ret
     c7a:	3e f0       	brts	.+14     	; 0xc8a <pow+0x80>
     c7c:	18 cf       	rjmp	.-464    	; 0xaae <__fp_nan>
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	80 e8       	ldi	r24, 0x80	; 128
     c84:	9f e3       	ldi	r25, 0x3F	; 63
     c86:	08 95       	ret
     c88:	4f e7       	ldi	r20, 0x7F	; 127
     c8a:	9f 77       	andi	r25, 0x7F	; 127
     c8c:	5f 93       	push	r21
     c8e:	4f 93       	push	r20
     c90:	3f 93       	push	r19
     c92:	2f 93       	push	r18
     c94:	9e d0       	rcall	.+316    	; 0xdd2 <log>
     c96:	2f 91       	pop	r18
     c98:	3f 91       	pop	r19
     c9a:	4f 91       	pop	r20
     c9c:	5f 91       	pop	r21
     c9e:	52 df       	rcall	.-348    	; 0xb44 <__mulsf3>
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <exp>
     ca2:	19 f4       	brne	.+6      	; 0xcaa <pow+0xa0>
     ca4:	0e f0       	brts	.+2      	; 0xca8 <pow+0x9e>
     ca6:	fd ce       	rjmp	.-518    	; 0xaa2 <__fp_inf>
     ca8:	46 cf       	rjmp	.-372    	; 0xb36 <__fp_zero>
     caa:	01 cf       	rjmp	.-510    	; 0xaae <__fp_nan>

00000cac <exp>:
     cac:	2a df       	rcall	.-428    	; 0xb02 <__fp_splitA>
     cae:	c8 f3       	brcs	.-14     	; 0xca2 <pow+0x98>
     cb0:	96 38       	cpi	r25, 0x86	; 134
     cb2:	c0 f7       	brcc	.-16     	; 0xca4 <pow+0x9a>
     cb4:	07 f8       	bld	r0, 7
     cb6:	0f 92       	push	r0
     cb8:	e8 94       	clt
     cba:	2b e3       	ldi	r18, 0x3B	; 59
     cbc:	3a ea       	ldi	r19, 0xAA	; 170
     cbe:	48 eb       	ldi	r20, 0xB8	; 184
     cc0:	5f e7       	ldi	r21, 0x7F	; 127
     cc2:	4e df       	rcall	.-356    	; 0xb60 <__mulsf3_pse>
     cc4:	0f 92       	push	r0
     cc6:	0f 92       	push	r0
     cc8:	0f 92       	push	r0
     cca:	4d b7       	in	r20, 0x3d	; 61
     ccc:	5e b7       	in	r21, 0x3e	; 62
     cce:	0f 92       	push	r0
     cd0:	c0 d0       	rcall	.+384    	; 0xe52 <modf>
     cd2:	e4 ee       	ldi	r30, 0xE4	; 228
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	16 d0       	rcall	.+44     	; 0xd04 <__fp_powser>
     cd8:	4f 91       	pop	r20
     cda:	5f 91       	pop	r21
     cdc:	ef 91       	pop	r30
     cde:	ff 91       	pop	r31
     ce0:	e5 95       	asr	r30
     ce2:	ee 1f       	adc	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	49 f0       	breq	.+18     	; 0xcfa <exp+0x4e>
     ce8:	fe 57       	subi	r31, 0x7E	; 126
     cea:	e0 68       	ori	r30, 0x80	; 128
     cec:	44 27       	eor	r20, r20
     cee:	ee 0f       	add	r30, r30
     cf0:	44 1f       	adc	r20, r20
     cf2:	fa 95       	dec	r31
     cf4:	e1 f7       	brne	.-8      	; 0xcee <exp+0x42>
     cf6:	41 95       	neg	r20
     cf8:	55 0b       	sbc	r21, r21
     cfa:	32 d0       	rcall	.+100    	; 0xd60 <ldexp>
     cfc:	0f 90       	pop	r0
     cfe:	07 fe       	sbrs	r0, 7
     d00:	26 c0       	rjmp	.+76     	; 0xd4e <inverse>
     d02:	08 95       	ret

00000d04 <__fp_powser>:
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	1f 93       	push	r17
     d0a:	0f 93       	push	r16
     d0c:	ff 92       	push	r15
     d0e:	ef 92       	push	r14
     d10:	df 92       	push	r13
     d12:	7b 01       	movw	r14, r22
     d14:	8c 01       	movw	r16, r24
     d16:	68 94       	set
     d18:	05 c0       	rjmp	.+10     	; 0xd24 <__fp_powser+0x20>
     d1a:	da 2e       	mov	r13, r26
     d1c:	ef 01       	movw	r28, r30
     d1e:	1e df       	rcall	.-452    	; 0xb5c <__mulsf3x>
     d20:	fe 01       	movw	r30, r28
     d22:	e8 94       	clt
     d24:	a5 91       	lpm	r26, Z+
     d26:	25 91       	lpm	r18, Z+
     d28:	35 91       	lpm	r19, Z+
     d2a:	45 91       	lpm	r20, Z+
     d2c:	55 91       	lpm	r21, Z+
     d2e:	ae f3       	brts	.-22     	; 0xd1a <__fp_powser+0x16>
     d30:	ef 01       	movw	r28, r30
     d32:	f6 dd       	rcall	.-1044   	; 0x920 <__addsf3x>
     d34:	fe 01       	movw	r30, r28
     d36:	97 01       	movw	r18, r14
     d38:	a8 01       	movw	r20, r16
     d3a:	da 94       	dec	r13
     d3c:	79 f7       	brne	.-34     	; 0xd1c <__fp_powser+0x18>
     d3e:	df 90       	pop	r13
     d40:	ef 90       	pop	r14
     d42:	ff 90       	pop	r15
     d44:	0f 91       	pop	r16
     d46:	1f 91       	pop	r17
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	08 95       	ret

00000d4e <inverse>:
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 e8       	ldi	r24, 0x80	; 128
     d58:	9f e3       	ldi	r25, 0x3F	; 63
     d5a:	ae c0       	rjmp	.+348    	; 0xeb8 <__divsf3>
     d5c:	a2 ce       	rjmp	.-700    	; 0xaa2 <__fp_inf>
     d5e:	14 c1       	rjmp	.+552    	; 0xf88 <__fp_mpack>

00000d60 <ldexp>:
     d60:	d0 de       	rcall	.-608    	; 0xb02 <__fp_splitA>
     d62:	e8 f3       	brcs	.-6      	; 0xd5e <inverse+0x10>
     d64:	99 23       	and	r25, r25
     d66:	d9 f3       	breq	.-10     	; 0xd5e <inverse+0x10>
     d68:	94 0f       	add	r25, r20
     d6a:	51 1d       	adc	r21, r1
     d6c:	bb f3       	brvs	.-18     	; 0xd5c <inverse+0xe>
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	50 40       	sbci	r21, 0x00	; 0
     d72:	94 f0       	brlt	.+36     	; 0xd98 <ldexp+0x38>
     d74:	59 f0       	breq	.+22     	; 0xd8c <ldexp+0x2c>
     d76:	88 23       	and	r24, r24
     d78:	32 f0       	brmi	.+12     	; 0xd86 <ldexp+0x26>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	91 50       	subi	r25, 0x01	; 1
     d82:	50 40       	sbci	r21, 0x00	; 0
     d84:	c1 f7       	brne	.-16     	; 0xd76 <ldexp+0x16>
     d86:	9e 3f       	cpi	r25, 0xFE	; 254
     d88:	51 05       	cpc	r21, r1
     d8a:	44 f7       	brge	.-48     	; 0xd5c <inverse+0xe>
     d8c:	88 0f       	add	r24, r24
     d8e:	91 1d       	adc	r25, r1
     d90:	96 95       	lsr	r25
     d92:	87 95       	ror	r24
     d94:	97 f9       	bld	r25, 7
     d96:	08 95       	ret
     d98:	5f 3f       	cpi	r21, 0xFF	; 255
     d9a:	ac f0       	brlt	.+42     	; 0xdc6 <ldexp+0x66>
     d9c:	98 3e       	cpi	r25, 0xE8	; 232
     d9e:	9c f0       	brlt	.+38     	; 0xdc6 <ldexp+0x66>
     da0:	bb 27       	eor	r27, r27
     da2:	86 95       	lsr	r24
     da4:	77 95       	ror	r23
     da6:	67 95       	ror	r22
     da8:	b7 95       	ror	r27
     daa:	08 f4       	brcc	.+2      	; 0xdae <ldexp+0x4e>
     dac:	b1 60       	ori	r27, 0x01	; 1
     dae:	93 95       	inc	r25
     db0:	c1 f7       	brne	.-16     	; 0xda2 <ldexp+0x42>
     db2:	bb 0f       	add	r27, r27
     db4:	58 f7       	brcc	.-42     	; 0xd8c <ldexp+0x2c>
     db6:	11 f4       	brne	.+4      	; 0xdbc <ldexp+0x5c>
     db8:	60 ff       	sbrs	r22, 0
     dba:	e8 cf       	rjmp	.-48     	; 0xd8c <ldexp+0x2c>
     dbc:	6f 5f       	subi	r22, 0xFF	; 255
     dbe:	7f 4f       	sbci	r23, 0xFF	; 255
     dc0:	8f 4f       	sbci	r24, 0xFF	; 255
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255
     dc4:	e3 cf       	rjmp	.-58     	; 0xd8c <ldexp+0x2c>
     dc6:	b8 ce       	rjmp	.-656    	; 0xb38 <__fp_szero>
     dc8:	0e f0       	brts	.+2      	; 0xdcc <ldexp+0x6c>
     dca:	de c0       	rjmp	.+444    	; 0xf88 <__fp_mpack>
     dcc:	70 ce       	rjmp	.-800    	; 0xaae <__fp_nan>
     dce:	68 94       	set
     dd0:	68 ce       	rjmp	.-816    	; 0xaa2 <__fp_inf>

00000dd2 <log>:
     dd2:	97 de       	rcall	.-722    	; 0xb02 <__fp_splitA>
     dd4:	c8 f3       	brcs	.-14     	; 0xdc8 <ldexp+0x68>
     dd6:	99 23       	and	r25, r25
     dd8:	d1 f3       	breq	.-12     	; 0xdce <ldexp+0x6e>
     dda:	c6 f3       	brts	.-16     	; 0xdcc <ldexp+0x6c>
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	1f 93       	push	r17
     de2:	0f 93       	push	r16
     de4:	ff 92       	push	r15
     de6:	c9 2f       	mov	r28, r25
     de8:	dd 27       	eor	r29, r29
     dea:	88 23       	and	r24, r24
     dec:	2a f0       	brmi	.+10     	; 0xdf8 <log+0x26>
     dee:	21 97       	sbiw	r28, 0x01	; 1
     df0:	66 0f       	add	r22, r22
     df2:	77 1f       	adc	r23, r23
     df4:	88 1f       	adc	r24, r24
     df6:	da f7       	brpl	.-10     	; 0xdee <log+0x1c>
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	5f eb       	ldi	r21, 0xBF	; 191
     e00:	9f e3       	ldi	r25, 0x3F	; 63
     e02:	88 39       	cpi	r24, 0x98	; 152
     e04:	20 f0       	brcs	.+8      	; 0xe0e <log+0x3c>
     e06:	80 3e       	cpi	r24, 0xE0	; 224
     e08:	30 f0       	brcs	.+12     	; 0xe16 <log+0x44>
     e0a:	21 96       	adiw	r28, 0x01	; 1
     e0c:	8f 77       	andi	r24, 0x7F	; 127
     e0e:	77 dd       	rcall	.-1298   	; 0x8fe <__addsf3>
     e10:	ec e0       	ldi	r30, 0x0C	; 12
     e12:	f1 e0       	ldi	r31, 0x01	; 1
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <log+0x4a>
     e16:	73 dd       	rcall	.-1306   	; 0x8fe <__addsf3>
     e18:	e9 e3       	ldi	r30, 0x39	; 57
     e1a:	f1 e0       	ldi	r31, 0x01	; 1
     e1c:	73 df       	rcall	.-282    	; 0xd04 <__fp_powser>
     e1e:	8b 01       	movw	r16, r22
     e20:	be 01       	movw	r22, r28
     e22:	ec 01       	movw	r28, r24
     e24:	fb 2e       	mov	r15, r27
     e26:	6f 57       	subi	r22, 0x7F	; 127
     e28:	71 09       	sbc	r23, r1
     e2a:	75 95       	asr	r23
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 0b       	sbc	r24, r24
     e30:	99 0b       	sbc	r25, r25
     e32:	fc dd       	rcall	.-1032   	; 0xa2c <__floatsisf>
     e34:	28 e1       	ldi	r18, 0x18	; 24
     e36:	32 e7       	ldi	r19, 0x72	; 114
     e38:	41 e3       	ldi	r20, 0x31	; 49
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	8f de       	rcall	.-738    	; 0xb5c <__mulsf3x>
     e3e:	af 2d       	mov	r26, r15
     e40:	98 01       	movw	r18, r16
     e42:	ae 01       	movw	r20, r28
     e44:	ff 90       	pop	r15
     e46:	0f 91       	pop	r16
     e48:	1f 91       	pop	r17
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	68 dd       	rcall	.-1328   	; 0x920 <__addsf3x>
     e50:	3f ce       	rjmp	.-898    	; 0xad0 <__fp_round>

00000e52 <modf>:
     e52:	fa 01       	movw	r30, r20
     e54:	dc 01       	movw	r26, r24
     e56:	aa 0f       	add	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	9b 01       	movw	r18, r22
     e5c:	ac 01       	movw	r20, r24
     e5e:	bf 57       	subi	r27, 0x7F	; 127
     e60:	28 f4       	brcc	.+10     	; 0xe6c <modf+0x1a>
     e62:	22 27       	eor	r18, r18
     e64:	33 27       	eor	r19, r19
     e66:	44 27       	eor	r20, r20
     e68:	50 78       	andi	r21, 0x80	; 128
     e6a:	1f c0       	rjmp	.+62     	; 0xeaa <modf+0x58>
     e6c:	b7 51       	subi	r27, 0x17	; 23
     e6e:	88 f4       	brcc	.+34     	; 0xe92 <modf+0x40>
     e70:	ab 2f       	mov	r26, r27
     e72:	00 24       	eor	r0, r0
     e74:	46 95       	lsr	r20
     e76:	37 95       	ror	r19
     e78:	27 95       	ror	r18
     e7a:	01 1c       	adc	r0, r1
     e7c:	a3 95       	inc	r26
     e7e:	d2 f3       	brmi	.-12     	; 0xe74 <modf+0x22>
     e80:	00 20       	and	r0, r0
     e82:	69 f0       	breq	.+26     	; 0xe9e <modf+0x4c>
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	44 1f       	adc	r20, r20
     e8a:	b3 95       	inc	r27
     e8c:	da f3       	brmi	.-10     	; 0xe84 <modf+0x32>
     e8e:	0d d0       	rcall	.+26     	; 0xeaa <modf+0x58>
     e90:	35 cd       	rjmp	.-1430   	; 0x8fc <__subsf3>
     e92:	61 30       	cpi	r22, 0x01	; 1
     e94:	71 05       	cpc	r23, r1
     e96:	a0 e8       	ldi	r26, 0x80	; 128
     e98:	8a 07       	cpc	r24, r26
     e9a:	b9 46       	sbci	r27, 0x69	; 105
     e9c:	30 f4       	brcc	.+12     	; 0xeaa <modf+0x58>
     e9e:	9b 01       	movw	r18, r22
     ea0:	ac 01       	movw	r20, r24
     ea2:	66 27       	eor	r22, r22
     ea4:	77 27       	eor	r23, r23
     ea6:	88 27       	eor	r24, r24
     ea8:	90 78       	andi	r25, 0x80	; 128
     eaa:	30 96       	adiw	r30, 0x00	; 0
     eac:	21 f0       	breq	.+8      	; 0xeb6 <modf+0x64>
     eae:	20 83       	st	Z, r18
     eb0:	31 83       	std	Z+1, r19	; 0x01
     eb2:	42 83       	std	Z+2, r20	; 0x02
     eb4:	53 83       	std	Z+3, r21	; 0x03
     eb6:	08 95       	ret

00000eb8 <__divsf3>:
     eb8:	0c d0       	rcall	.+24     	; 0xed2 <__divsf3x>
     eba:	0a ce       	rjmp	.-1004   	; 0xad0 <__fp_round>
     ebc:	02 de       	rcall	.-1020   	; 0xac2 <__fp_pscB>
     ebe:	40 f0       	brcs	.+16     	; 0xed0 <__divsf3+0x18>
     ec0:	f9 dd       	rcall	.-1038   	; 0xab4 <__fp_pscA>
     ec2:	30 f0       	brcs	.+12     	; 0xed0 <__divsf3+0x18>
     ec4:	21 f4       	brne	.+8      	; 0xece <__divsf3+0x16>
     ec6:	5f 3f       	cpi	r21, 0xFF	; 255
     ec8:	19 f0       	breq	.+6      	; 0xed0 <__divsf3+0x18>
     eca:	eb cd       	rjmp	.-1066   	; 0xaa2 <__fp_inf>
     ecc:	51 11       	cpse	r21, r1
     ece:	34 ce       	rjmp	.-920    	; 0xb38 <__fp_szero>
     ed0:	ee cd       	rjmp	.-1060   	; 0xaae <__fp_nan>

00000ed2 <__divsf3x>:
     ed2:	0f de       	rcall	.-994    	; 0xaf2 <__fp_split3>
     ed4:	98 f3       	brcs	.-26     	; 0xebc <__divsf3+0x4>

00000ed6 <__divsf3_pse>:
     ed6:	99 23       	and	r25, r25
     ed8:	c9 f3       	breq	.-14     	; 0xecc <__divsf3+0x14>
     eda:	55 23       	and	r21, r21
     edc:	b1 f3       	breq	.-20     	; 0xeca <__divsf3+0x12>
     ede:	95 1b       	sub	r25, r21
     ee0:	55 0b       	sbc	r21, r21
     ee2:	bb 27       	eor	r27, r27
     ee4:	aa 27       	eor	r26, r26
     ee6:	62 17       	cp	r22, r18
     ee8:	73 07       	cpc	r23, r19
     eea:	84 07       	cpc	r24, r20
     eec:	38 f0       	brcs	.+14     	; 0xefc <__divsf3_pse+0x26>
     eee:	9f 5f       	subi	r25, 0xFF	; 255
     ef0:	5f 4f       	sbci	r21, 0xFF	; 255
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	44 1f       	adc	r20, r20
     ef8:	aa 1f       	adc	r26, r26
     efa:	a9 f3       	breq	.-22     	; 0xee6 <__divsf3_pse+0x10>
     efc:	33 d0       	rcall	.+102    	; 0xf64 <__divsf3_pse+0x8e>
     efe:	0e 2e       	mov	r0, r30
     f00:	3a f0       	brmi	.+14     	; 0xf10 <__divsf3_pse+0x3a>
     f02:	e0 e8       	ldi	r30, 0x80	; 128
     f04:	30 d0       	rcall	.+96     	; 0xf66 <__divsf3_pse+0x90>
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	50 40       	sbci	r21, 0x00	; 0
     f0a:	e6 95       	lsr	r30
     f0c:	00 1c       	adc	r0, r0
     f0e:	ca f7       	brpl	.-14     	; 0xf02 <__divsf3_pse+0x2c>
     f10:	29 d0       	rcall	.+82     	; 0xf64 <__divsf3_pse+0x8e>
     f12:	fe 2f       	mov	r31, r30
     f14:	27 d0       	rcall	.+78     	; 0xf64 <__divsf3_pse+0x8e>
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	bb 1f       	adc	r27, r27
     f1e:	26 17       	cp	r18, r22
     f20:	37 07       	cpc	r19, r23
     f22:	48 07       	cpc	r20, r24
     f24:	ab 07       	cpc	r26, r27
     f26:	b0 e8       	ldi	r27, 0x80	; 128
     f28:	09 f0       	breq	.+2      	; 0xf2c <__divsf3_pse+0x56>
     f2a:	bb 0b       	sbc	r27, r27
     f2c:	80 2d       	mov	r24, r0
     f2e:	bf 01       	movw	r22, r30
     f30:	ff 27       	eor	r31, r31
     f32:	93 58       	subi	r25, 0x83	; 131
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	2a f0       	brmi	.+10     	; 0xf42 <__divsf3_pse+0x6c>
     f38:	9e 3f       	cpi	r25, 0xFE	; 254
     f3a:	51 05       	cpc	r21, r1
     f3c:	68 f0       	brcs	.+26     	; 0xf58 <__divsf3_pse+0x82>
     f3e:	b1 cd       	rjmp	.-1182   	; 0xaa2 <__fp_inf>
     f40:	fb cd       	rjmp	.-1034   	; 0xb38 <__fp_szero>
     f42:	5f 3f       	cpi	r21, 0xFF	; 255
     f44:	ec f3       	brlt	.-6      	; 0xf40 <__divsf3_pse+0x6a>
     f46:	98 3e       	cpi	r25, 0xE8	; 232
     f48:	dc f3       	brlt	.-10     	; 0xf40 <__divsf3_pse+0x6a>
     f4a:	86 95       	lsr	r24
     f4c:	77 95       	ror	r23
     f4e:	67 95       	ror	r22
     f50:	b7 95       	ror	r27
     f52:	f7 95       	ror	r31
     f54:	9f 5f       	subi	r25, 0xFF	; 255
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__divsf3_pse+0x74>
     f58:	88 0f       	add	r24, r24
     f5a:	91 1d       	adc	r25, r1
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	97 f9       	bld	r25, 7
     f62:	08 95       	ret
     f64:	e1 e0       	ldi	r30, 0x01	; 1
     f66:	66 0f       	add	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	88 1f       	adc	r24, r24
     f6c:	bb 1f       	adc	r27, r27
     f6e:	62 17       	cp	r22, r18
     f70:	73 07       	cpc	r23, r19
     f72:	84 07       	cpc	r24, r20
     f74:	ba 07       	cpc	r27, r26
     f76:	20 f0       	brcs	.+8      	; 0xf80 <__divsf3_pse+0xaa>
     f78:	62 1b       	sub	r22, r18
     f7a:	73 0b       	sbc	r23, r19
     f7c:	84 0b       	sbc	r24, r20
     f7e:	ba 0b       	sbc	r27, r26
     f80:	ee 1f       	adc	r30, r30
     f82:	88 f7       	brcc	.-30     	; 0xf66 <__divsf3_pse+0x90>
     f84:	e0 95       	com	r30
     f86:	08 95       	ret

00000f88 <__fp_mpack>:
     f88:	9f 3f       	cpi	r25, 0xFF	; 255
     f8a:	31 f0       	breq	.+12     	; 0xf98 <__fp_mpack_finite+0xc>

00000f8c <__fp_mpack_finite>:
     f8c:	91 50       	subi	r25, 0x01	; 1
     f8e:	20 f4       	brcc	.+8      	; 0xf98 <__fp_mpack_finite+0xc>
     f90:	87 95       	ror	r24
     f92:	77 95       	ror	r23
     f94:	67 95       	ror	r22
     f96:	b7 95       	ror	r27
     f98:	88 0f       	add	r24, r24
     f9a:	91 1d       	adc	r25, r1
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	97 f9       	bld	r25, 7
     fa2:	08 95       	ret

00000fa4 <__udivmodhi4>:
     fa4:	aa 1b       	sub	r26, r26
     fa6:	bb 1b       	sub	r27, r27
     fa8:	51 e1       	ldi	r21, 0x11	; 17
     faa:	07 c0       	rjmp	.+14     	; 0xfba <__udivmodhi4_ep>

00000fac <__udivmodhi4_loop>:
     fac:	aa 1f       	adc	r26, r26
     fae:	bb 1f       	adc	r27, r27
     fb0:	a6 17       	cp	r26, r22
     fb2:	b7 07       	cpc	r27, r23
     fb4:	10 f0       	brcs	.+4      	; 0xfba <__udivmodhi4_ep>
     fb6:	a6 1b       	sub	r26, r22
     fb8:	b7 0b       	sbc	r27, r23

00000fba <__udivmodhi4_ep>:
     fba:	88 1f       	adc	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	5a 95       	dec	r21
     fc0:	a9 f7       	brne	.-22     	; 0xfac <__udivmodhi4_loop>
     fc2:	80 95       	com	r24
     fc4:	90 95       	com	r25
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	08 95       	ret

00000fcc <__divmodhi4>:
     fcc:	97 fb       	bst	r25, 7
     fce:	09 2e       	mov	r0, r25
     fd0:	07 26       	eor	r0, r23
     fd2:	0a d0       	rcall	.+20     	; 0xfe8 <__divmodhi4_neg1>
     fd4:	77 fd       	sbrc	r23, 7
     fd6:	04 d0       	rcall	.+8      	; 0xfe0 <__divmodhi4_neg2>
     fd8:	e5 df       	rcall	.-54     	; 0xfa4 <__udivmodhi4>
     fda:	06 d0       	rcall	.+12     	; 0xfe8 <__divmodhi4_neg1>
     fdc:	00 20       	and	r0, r0
     fde:	1a f4       	brpl	.+6      	; 0xfe6 <__divmodhi4_exit>

00000fe0 <__divmodhi4_neg2>:
     fe0:	70 95       	com	r23
     fe2:	61 95       	neg	r22
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255

00000fe6 <__divmodhi4_exit>:
     fe6:	08 95       	ret

00000fe8 <__divmodhi4_neg1>:
     fe8:	f6 f7       	brtc	.-4      	; 0xfe6 <__divmodhi4_exit>
     fea:	90 95       	com	r25
     fec:	81 95       	neg	r24
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__divmodsi4>:
     ff2:	97 fb       	bst	r25, 7
     ff4:	09 2e       	mov	r0, r25
     ff6:	05 26       	eor	r0, r21
     ff8:	0e d0       	rcall	.+28     	; 0x1016 <__divmodsi4_neg1>
     ffa:	57 fd       	sbrc	r21, 7
     ffc:	04 d0       	rcall	.+8      	; 0x1006 <__divmodsi4_neg2>
     ffe:	14 d0       	rcall	.+40     	; 0x1028 <__udivmodsi4>
    1000:	0a d0       	rcall	.+20     	; 0x1016 <__divmodsi4_neg1>
    1002:	00 1c       	adc	r0, r0
    1004:	38 f4       	brcc	.+14     	; 0x1014 <__divmodsi4_exit>

00001006 <__divmodsi4_neg2>:
    1006:	50 95       	com	r21
    1008:	40 95       	com	r20
    100a:	30 95       	com	r19
    100c:	21 95       	neg	r18
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	4f 4f       	sbci	r20, 0xFF	; 255
    1012:	5f 4f       	sbci	r21, 0xFF	; 255

00001014 <__divmodsi4_exit>:
    1014:	08 95       	ret

00001016 <__divmodsi4_neg1>:
    1016:	f6 f7       	brtc	.-4      	; 0x1014 <__divmodsi4_exit>
    1018:	90 95       	com	r25
    101a:	80 95       	com	r24
    101c:	70 95       	com	r23
    101e:	61 95       	neg	r22
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	8f 4f       	sbci	r24, 0xFF	; 255
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	08 95       	ret

00001028 <__udivmodsi4>:
    1028:	a1 e2       	ldi	r26, 0x21	; 33
    102a:	1a 2e       	mov	r1, r26
    102c:	aa 1b       	sub	r26, r26
    102e:	bb 1b       	sub	r27, r27
    1030:	fd 01       	movw	r30, r26
    1032:	0d c0       	rjmp	.+26     	; 0x104e <__udivmodsi4_ep>

00001034 <__udivmodsi4_loop>:
    1034:	aa 1f       	adc	r26, r26
    1036:	bb 1f       	adc	r27, r27
    1038:	ee 1f       	adc	r30, r30
    103a:	ff 1f       	adc	r31, r31
    103c:	a2 17       	cp	r26, r18
    103e:	b3 07       	cpc	r27, r19
    1040:	e4 07       	cpc	r30, r20
    1042:	f5 07       	cpc	r31, r21
    1044:	20 f0       	brcs	.+8      	; 0x104e <__udivmodsi4_ep>
    1046:	a2 1b       	sub	r26, r18
    1048:	b3 0b       	sbc	r27, r19
    104a:	e4 0b       	sbc	r30, r20
    104c:	f5 0b       	sbc	r31, r21

0000104e <__udivmodsi4_ep>:
    104e:	66 1f       	adc	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	88 1f       	adc	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	1a 94       	dec	r1
    1058:	69 f7       	brne	.-38     	; 0x1034 <__udivmodsi4_loop>
    105a:	60 95       	com	r22
    105c:	70 95       	com	r23
    105e:	80 95       	com	r24
    1060:	90 95       	com	r25
    1062:	9b 01       	movw	r18, r22
    1064:	ac 01       	movw	r20, r24
    1066:	bd 01       	movw	r22, r26
    1068:	cf 01       	movw	r24, r30
    106a:	08 95       	ret

0000106c <_exit>:
    106c:	f8 94       	cli

0000106e <__stop_program>:
    106e:	ff cf       	rjmp	.-2      	; 0x106e <__stop_program>
