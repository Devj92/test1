
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000018ec  00001980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800204  00800204  00001984  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000950  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00004c08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001779  00000000  00000000  00004d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a9  00000000  00000000  00006481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000996  00000000  00000000  0000682a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  000071c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00007670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c35  00000000  00000000  00007b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_25>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_45>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	ec ee       	ldi	r30, 0xEC	; 236
     12a:	f8 e1       	ldi	r31, 0x18	; 24
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 30       	cpi	r26, 0x04	; 4
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	a4 e0       	ldi	r26, 0x04	; 4
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a6 34       	cpi	r26, 0x46	; 70
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <main>
     150:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
     158:	10 92 28 02 	sts	0x0228, r1
	TCCR4B = 0x00; //stop
     15c:	e1 ea       	ldi	r30, 0xA1	; 161
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
     162:	86 ec       	ldi	r24, 0xC6	; 198
     164:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //Counter lower 8 bit value
     168:	87 e6       	ldi	r24, 0x67	; 103
     16a:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
     16e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
     172:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
     176:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
     17a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
     17e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
     182:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     186:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     18a:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
     18e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
     192:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 83       	st	Z, r24
}
     19a:	08 95       	ret

0000019c <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
     19c:	1f 92       	push	r1
     19e:	0f 92       	push	r0
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	0f 92       	push	r0
     1a4:	11 24       	eor	r1, r1
     1a6:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
     1a8:	80 91 28 02 	lds	r24, 0x0228
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	80 93 28 02 	sts	0x0228, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
     1b2:	86 ec       	ldi	r24, 0xC6	; 198
     1b4:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //reload counter low value
     1b8:	87 e6       	ldi	r24, 0x67	; 103
     1ba:	80 93 a4 00 	sts	0x00A4, r24
}
     1be:	8f 91       	pop	r24
     1c0:	0f 90       	pop	r0
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	0f 90       	pop	r0
     1c6:	1f 90       	pop	r1
     1c8:	18 95       	reti

000001ca <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
     1ca:	f8 94       	cli
	timer4_init();
     1cc:	0e 94 ac 00 	call	0x158	; 0x158 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
     1d6:	78 94       	sei

}
     1d8:	08 95       	ret

000001da <micros>:

int micros(void)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     1e2:	10 91 28 02 	lds	r17, 0x0228
     1e6:	c0 91 a4 00 	lds	r28, 0x00A4
     1ea:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     1ee:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
}

int micros(void)
{
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     1f2:	ce 01       	movw	r24, r28
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	bc 01       	movw	r22, r24
     1fa:	cd 01       	movw	r24, r26
     1fc:	67 56       	subi	r22, 0x67	; 103
     1fe:	76 4c       	sbci	r23, 0xC6	; 198
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	29 e9       	ldi	r18, 0x99	; 153
     206:	39 e3       	ldi	r19, 0x39	; 57
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0e 94 37 0c 	call	0x186e	; 0x186e <__divmodsi4>
     210:	da 01       	movw	r26, r20
     212:	c9 01       	movw	r24, r18
     214:	81 0f       	add	r24, r17
     216:	91 1d       	adc	r25, r1
     218:	a1 1d       	adc	r26, r1
     21a:	b1 1d       	adc	r27, r1
     21c:	8c 01       	movw	r16, r24
     21e:	9d 01       	movw	r18, r26
     220:	48 ee       	ldi	r20, 0xE8	; 232
     222:	53 e0       	ldi	r21, 0x03	; 3
     224:	04 9f       	mul	r16, r20
     226:	c0 01       	movw	r24, r0
     228:	05 9f       	mul	r16, r21
     22a:	90 0d       	add	r25, r0
     22c:	14 9f       	mul	r17, r20
     22e:	90 0d       	add	r25, r0
     230:	11 24       	eor	r1, r1
	start_timer4();
	return time;

}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	08 95       	ret

0000023c <millis>:
int millis(int mode)
{
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	8c 01       	movw	r16, r24
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     246:	c0 91 28 02 	lds	r28, 0x0228
     24a:	60 91 a4 00 	lds	r22, 0x00A4
     24e:	70 91 a5 00 	lds	r23, 0x00A5
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	67 56       	subi	r22, 0x67	; 103
     258:	76 4c       	sbci	r23, 0xC6	; 198
     25a:	80 40       	sbci	r24, 0x00	; 0
     25c:	90 40       	sbci	r25, 0x00	; 0
     25e:	29 e9       	ldi	r18, 0x99	; 153
     260:	39 e3       	ldi	r19, 0x39	; 57
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	0e 94 37 0c 	call	0x186e	; 0x186e <__divmodsi4>
     26a:	d0 e0       	ldi	r29, 0x00	; 0
     26c:	c2 0f       	add	r28, r18
     26e:	d3 1f       	adc	r29, r19
	if (mode==0)
     270:	01 15       	cp	r16, r1
     272:	11 05       	cpc	r17, r1
     274:	11 f4       	brne	.+4      	; 0x27a <millis+0x3e>
	{		
		start_timer4();
     276:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
	}	
	return time;

}
     27a:	8c 2f       	mov	r24, r28
     27c:	9d 2f       	mov	r25, r29
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	08 95       	ret

00000288 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     288:	86 e6       	ldi	r24, 0x66	; 102
     28a:	9e e0       	ldi	r25, 0x0E	; 14
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_set_4bit+0x4>
     290:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     292:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     294:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     296:	80 e3       	ldi	r24, 0x30	; 48
     298:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     29a:	42 9a       	sbi	0x08, 2	; 8
     29c:	ef ef       	ldi	r30, 0xFF	; 255
     29e:	f7 e4       	ldi	r31, 0x47	; 71
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_set_4bit+0x18>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_set_4bit+0x1e>
     2a6:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2a8:	42 98       	cbi	0x08, 2	; 8
     2aa:	e6 e6       	ldi	r30, 0x66	; 102
     2ac:	fe e0       	ldi	r31, 0x0E	; 14
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_set_4bit+0x26>
     2b2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2b4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2b8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2ba:	42 9a       	sbi	0x08, 2	; 8
     2bc:	ef ef       	ldi	r30, 0xFF	; 255
     2be:	f7 e4       	ldi	r31, 0x47	; 71
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_set_4bit+0x38>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_set_4bit+0x3e>
     2c6:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2c8:	42 98       	cbi	0x08, 2	; 8
     2ca:	e6 e6       	ldi	r30, 0x66	; 102
     2cc:	fe e0       	ldi	r31, 0x0E	; 14
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <lcd_set_4bit+0x46>
     2d2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2d4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2d6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2d8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2da:	42 9a       	sbi	0x08, 2	; 8
     2dc:	8f ef       	ldi	r24, 0xFF	; 255
     2de:	97 e4       	ldi	r25, 0x47	; 71
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_set_4bit+0x58>
     2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lcd_set_4bit+0x5e>
     2e6:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2e8:	42 98       	cbi	0x08, 2	; 8
     2ea:	e6 e6       	ldi	r30, 0x66	; 102
     2ec:	fe e0       	ldi	r31, 0x0E	; 14
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_set_4bit+0x66>
     2f2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2f4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2f6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     2f8:	80 e2       	ldi	r24, 0x20	; 32
     2fa:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2fc:	42 9a       	sbi	0x08, 2	; 8
     2fe:	8f ef       	ldi	r24, 0xFF	; 255
     300:	97 e4       	ldi	r25, 0x47	; 71
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <lcd_set_4bit+0x7a>
     306:	00 c0       	rjmp	.+0      	; 0x308 <lcd_set_4bit+0x80>
     308:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     30a:	42 98       	cbi	0x08, 2	; 8
}
     30c:	08 95       	ret

0000030e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     30e:	98 b1       	in	r25, 0x08	; 8
     310:	9f 70       	andi	r25, 0x0F	; 15
     312:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     314:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     316:	28 2f       	mov	r18, r24
     318:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     31a:	92 2b       	or	r25, r18
     31c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     31e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     320:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     322:	42 9a       	sbi	0x08, 2	; 8
     324:	ef ef       	ldi	r30, 0xFF	; 255
     326:	f7 e4       	ldi	r31, 0x47	; 71
     328:	31 97       	sbiw	r30, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <lcd_wr_command+0x1a>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <lcd_wr_command+0x20>
     32e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     330:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     332:	98 b1       	in	r25, 0x08	; 8
     334:	9f 70       	andi	r25, 0x0F	; 15
     336:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     338:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     33a:	82 95       	swap	r24
     33c:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     33e:	89 2b       	or	r24, r25
     340:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     342:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     344:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     346:	42 9a       	sbi	0x08, 2	; 8
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	97 e4       	ldi	r25, 0x47	; 71
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <lcd_wr_command+0x3e>
     350:	00 c0       	rjmp	.+0      	; 0x352 <lcd_wr_command+0x44>
     352:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     354:	42 98       	cbi	0x08, 2	; 8
}
     356:	08 95       	ret

00000358 <lcd_init>:
     358:	86 e6       	ldi	r24, 0x66	; 102
     35a:	9e e0       	ldi	r25, 0x0E	; 14
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_init+0x4>
     360:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     362:	88 e2       	ldi	r24, 0x28	; 40
     364:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     374:	8e e0       	ldi	r24, 0x0E	; 14
     376:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     37a:	80 e8       	ldi	r24, 0x80	; 128
     37c:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
}
     380:	08 95       	ret

00000382 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     382:	98 b1       	in	r25, 0x08	; 8
     384:	9f 70       	andi	r25, 0x0F	; 15
     386:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     388:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     38a:	28 2f       	mov	r18, r24
     38c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     38e:	92 2b       	or	r25, r18
     390:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     392:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     394:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     396:	42 9a       	sbi	0x08, 2	; 8
     398:	ef ef       	ldi	r30, 0xFF	; 255
     39a:	f7 e4       	ldi	r31, 0x47	; 71
     39c:	31 97       	sbiw	r30, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_wr_char+0x1a>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_wr_char+0x20>
     3a2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3a4:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     3a6:	98 b1       	in	r25, 0x08	; 8
     3a8:	9f 70       	andi	r25, 0x0F	; 15
     3aa:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     3ac:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     3ae:	82 95       	swap	r24
     3b0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     3b2:	89 2b       	or	r24, r25
     3b4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     3b6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3b8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3ba:	42 9a       	sbi	0x08, 2	; 8
     3bc:	8f ef       	ldi	r24, 0xFF	; 255
     3be:	97 e4       	ldi	r25, 0x47	; 71
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <lcd_wr_char+0x3e>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_wr_char+0x44>
     3c6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3c8:	42 98       	cbi	0x08, 2	; 8
}
     3ca:	08 95       	ret

000003cc <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     3cc:	80 e8       	ldi	r24, 0x80	; 128
     3ce:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
}
     3d2:	08 95       	ret

000003d4 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	ec 01       	movw	r28, r24
	while(*str != '\0')
     3da:	88 81       	ld	r24, Y
     3dc:	88 23       	and	r24, r24
     3de:	31 f0       	breq	.+12     	; 0x3ec <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     3e0:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     3e2:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     3e6:	89 91       	ld	r24, Y+
     3e8:	88 23       	and	r24, r24
     3ea:	d9 f7       	brne	.-10     	; 0x3e2 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	79 f0       	breq	.+30     	; 0x414 <lcd_cursor+0x22>
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	18 f4       	brcc	.+6      	; 0x400 <lcd_cursor+0xe>
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	c9 f4       	brne	.+50     	; 0x430 <lcd_cursor+0x3e>
     3fe:	05 c0       	rjmp	.+10     	; 0x40a <lcd_cursor+0x18>
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	69 f0       	breq	.+26     	; 0x41e <lcd_cursor+0x2c>
     404:	84 30       	cpi	r24, 0x04	; 4
     406:	a1 f4       	brne	.+40     	; 0x430 <lcd_cursor+0x3e>
     408:	0f c0       	rjmp	.+30     	; 0x428 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     40a:	86 2f       	mov	r24, r22
     40c:	81 58       	subi	r24, 0x81	; 129
     40e:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
     412:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     414:	86 2f       	mov	r24, r22
     416:	81 54       	subi	r24, 0x41	; 65
     418:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
     41c:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     41e:	86 2f       	mov	r24, r22
     420:	8d 56       	subi	r24, 0x6D	; 109
     422:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
     426:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     428:	86 2f       	mov	r24, r22
     42a:	8d 52       	subi	r24, 0x2D	; 45
     42c:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
     430:	08 95       	ret

00000432 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	8a 01       	movw	r16, r20
     43c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     43e:	88 23       	and	r24, r24
     440:	11 f0       	breq	.+4      	; 0x446 <lcd_print+0x14>
     442:	66 23       	and	r22, r22
     444:	19 f4       	brne	.+6      	; 0x44c <lcd_print+0x1a>
	{
		lcd_home();
     446:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_home>
     44a:	02 c0       	rjmp	.+4      	; 0x450 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     44c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     450:	c5 30       	cpi	r28, 0x05	; 5
     452:	d1 05       	cpc	r29, r1
     454:	71 f4       	brne	.+28     	; 0x472 <lcd_print+0x40>
	{
		million=value/10000+48;
     456:	c8 01       	movw	r24, r16
     458:	60 e1       	ldi	r22, 0x10	; 16
     45a:	77 e2       	ldi	r23, 0x27	; 39
     45c:	0e 94 10 0c 	call	0x1820	; 0x1820 <__udivmodhi4>
     460:	cb 01       	movw	r24, r22
     462:	c0 96       	adiw	r24, 0x30	; 48
     464:	90 93 23 02 	sts	0x0223, r25
     468:	80 93 22 02 	sts	0x0222, r24
		lcd_wr_char(million);
     46c:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_wr_char>
     470:	03 c0       	rjmp	.+6      	; 0x478 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     472:	c4 30       	cpi	r28, 0x04	; 4
     474:	d1 05       	cpc	r29, r1
     476:	b9 f4       	brne	.+46     	; 0x4a6 <lcd_print+0x74>
	{
		temp = value/1000;
     478:	c8 01       	movw	r24, r16
     47a:	68 ee       	ldi	r22, 0xE8	; 232
     47c:	73 e0       	ldi	r23, 0x03	; 3
     47e:	0e 94 10 0c 	call	0x1820	; 0x1820 <__udivmodhi4>
     482:	cb 01       	movw	r24, r22
     484:	70 93 25 02 	sts	0x0225, r23
     488:	60 93 24 02 	sts	0x0224, r22
		thousand = temp%10 + 48;
     48c:	6a e0       	ldi	r22, 0x0A	; 10
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	0e 94 10 0c 	call	0x1820	; 0x1820 <__udivmodhi4>
     494:	c0 96       	adiw	r24, 0x30	; 48
     496:	90 93 41 02 	sts	0x0241, r25
     49a:	80 93 40 02 	sts	0x0240, r24
		lcd_wr_char(thousand);
     49e:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_wr_char>
		flag=1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     4a8:	c3 30       	cpi	r28, 0x03	; 3
     4aa:	d1 05       	cpc	r29, r1
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <lcd_print+0x80>
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	b1 f4       	brne	.+44     	; 0x4de <lcd_print+0xac>
	{
		temp = value/100;
     4b2:	c8 01       	movw	r24, r16
     4b4:	64 e6       	ldi	r22, 0x64	; 100
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	0e 94 10 0c 	call	0x1820	; 0x1820 <__udivmodhi4>
     4bc:	cb 01       	movw	r24, r22
     4be:	70 93 25 02 	sts	0x0225, r23
     4c2:	60 93 24 02 	sts	0x0224, r22
		hundred = temp%10 + 48;
     4c6:	6a e0       	ldi	r22, 0x0A	; 10
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 10 0c 	call	0x1820	; 0x1820 <__udivmodhi4>
     4ce:	c0 96       	adiw	r24, 0x30	; 48
     4d0:	90 93 39 02 	sts	0x0239, r25
     4d4:	80 93 38 02 	sts	0x0238, r24
		lcd_wr_char(hundred);
     4d8:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_wr_char>
		flag=1;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     4de:	c2 30       	cpi	r28, 0x02	; 2
     4e0:	d1 05       	cpc	r29, r1
     4e2:	11 f0       	breq	.+4      	; 0x4e8 <lcd_print+0xb6>
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	b1 f4       	brne	.+44     	; 0x514 <lcd_print+0xe2>
	{
		temp = value/10;
     4e8:	2a e0       	ldi	r18, 0x0A	; 10
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	c8 01       	movw	r24, r16
     4ee:	b9 01       	movw	r22, r18
     4f0:	0e 94 10 0c 	call	0x1820	; 0x1820 <__udivmodhi4>
     4f4:	cb 01       	movw	r24, r22
     4f6:	70 93 25 02 	sts	0x0225, r23
     4fa:	60 93 24 02 	sts	0x0224, r22
		tens = temp%10 + 48;
     4fe:	b9 01       	movw	r22, r18
     500:	0e 94 10 0c 	call	0x1820	; 0x1820 <__udivmodhi4>
     504:	c0 96       	adiw	r24, 0x30	; 48
     506:	90 93 2e 02 	sts	0x022E, r25
     50a:	80 93 2d 02 	sts	0x022D, r24
		lcd_wr_char(tens);
     50e:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_wr_char>
		flag=1;
     512:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     514:	c1 30       	cpi	r28, 0x01	; 1
     516:	d1 05       	cpc	r29, r1
     518:	11 f0       	breq	.+4      	; 0x51e <lcd_print+0xec>
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	61 f4       	brne	.+24     	; 0x536 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     51e:	c8 01       	movw	r24, r16
     520:	6a e0       	ldi	r22, 0x0A	; 10
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	0e 94 10 0c 	call	0x1820	; 0x1820 <__udivmodhi4>
     528:	c0 96       	adiw	r24, 0x30	; 48
     52a:	90 93 3f 02 	sts	0x023F, r25
     52e:	80 93 3e 02 	sts	0x023E, r24
		lcd_wr_char(unit);
     532:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_wr_char>
	}
	if(digits>5)
     536:	c6 30       	cpi	r28, 0x06	; 6
     538:	d1 05       	cpc	r29, r1
     53a:	1c f0       	brlt	.+6      	; 0x542 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     53c:	85 e4       	ldi	r24, 0x45	; 69
     53e:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_wr_char>
	}
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	08 95       	ret

0000054c <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_wr_command>
}	
     552:	08 95       	ret

00000554 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
     554:	87 b1       	in	r24, 0x07	; 7
     556:	87 6f       	ori	r24, 0xF7	; 247
     558:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
     55a:	88 b1       	in	r24, 0x08	; 8
     55c:	80 78       	andi	r24, 0x80	; 128
     55e:	88 b9       	out	0x08, r24	; 8
}
     560:	08 95       	ret

00000562 <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
     562:	ec eb       	ldi	r30, 0xBC	; 188
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
     568:	80 e1       	ldi	r24, 0x10	; 16
     56a:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
     56e:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
     572:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
     576:	84 e0       	ldi	r24, 0x04	; 4
     578:	80 83       	st	Z, r24
}
     57a:	08 95       	ret

0000057c <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     57c:	94 ea       	ldi	r25, 0xA4	; 164
     57e:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     582:	ec eb       	ldi	r30, 0xBC	; 188
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	90 81       	ld	r25, Z
     588:	99 23       	and	r25, r25
     58a:	ec f7       	brge	.-6      	; 0x586 <write_byte+0xa>
     58c:	ef ef       	ldi	r30, 0xFF	; 255
     58e:	ff e8       	ldi	r31, 0x8F	; 143
     590:	31 97       	sbiw	r30, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <write_byte+0x14>
     594:	00 c0       	rjmp	.+0      	; 0x596 <write_byte+0x1a>
     596:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
     598:	96 ea       	ldi	r25, 0xA6	; 166
     59a:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     59e:	94 e8       	ldi	r25, 0x84	; 132
     5a0:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5a4:	ec eb       	ldi	r30, 0xBC	; 188
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	90 81       	ld	r25, Z
     5aa:	99 23       	and	r25, r25
     5ac:	ec f7       	brge	.-6      	; 0x5a8 <write_byte+0x2c>
     5ae:	ef ef       	ldi	r30, 0xFF	; 255
     5b0:	ff e8       	ldi	r31, 0x8F	; 143
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <write_byte+0x36>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <write_byte+0x3c>
     5b8:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     5ba:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     5be:	94 e8       	ldi	r25, 0x84	; 132
     5c0:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5c4:	ec eb       	ldi	r30, 0xBC	; 188
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	90 81       	ld	r25, Z
     5ca:	99 23       	and	r25, r25
     5cc:	ec f7       	brge	.-6      	; 0x5c8 <write_byte+0x4c>
     5ce:	ef ef       	ldi	r30, 0xFF	; 255
     5d0:	ff e8       	ldi	r31, 0x8F	; 143
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <write_byte+0x56>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <write_byte+0x5c>
     5d8:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     5da:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     5de:	84 e8       	ldi	r24, 0x84	; 132
     5e0:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5e4:	ec eb       	ldi	r30, 0xBC	; 188
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	88 23       	and	r24, r24
     5ec:	ec f7       	brge	.-6      	; 0x5e8 <write_byte+0x6c>
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	9f e8       	ldi	r25, 0x8F	; 143
     5f2:	01 97       	sbiw	r24, 0x01	; 1
     5f4:	f1 f7       	brne	.-4      	; 0x5f2 <write_byte+0x76>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <write_byte+0x7c>
     5f8:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     5fa:	84 e9       	ldi	r24, 0x94	; 148
     5fc:	80 93 bc 00 	sts	0x00BC, r24
}
     600:	08 95       	ret

00000602 <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     602:	94 ea       	ldi	r25, 0xA4	; 164
     604:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     608:	ec eb       	ldi	r30, 0xBC	; 188
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	90 81       	ld	r25, Z
     60e:	99 23       	and	r25, r25
     610:	ec f7       	brge	.-6      	; 0x60c <read_byte+0xa>

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
     612:	96 ea       	ldi	r25, 0xA6	; 166
     614:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     618:	94 e8       	ldi	r25, 0x84	; 132
     61a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	90 81       	ld	r25, Z
     624:	99 23       	and	r25, r25
     626:	ec f7       	brge	.-6      	; 0x622 <read_byte+0x20>

 TWDR = address;                                   // send address of register byte want to access register
     628:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     62c:	84 e8       	ldi	r24, 0x84	; 132
     62e:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     632:	ec eb       	ldi	r30, 0xBC	; 188
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	88 23       	and	r24, r24
     63a:	ec f7       	brge	.-6      	; 0x636 <read_byte+0x34>
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     63c:	84 ea       	ldi	r24, 0xA4	; 164
     63e:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     642:	ec eb       	ldi	r30, 0xBC	; 188
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	88 23       	and	r24, r24
     64a:	ec f7       	brge	.-6      	; 0x646 <read_byte+0x44>


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
     64c:	87 ea       	ldi	r24, 0xA7	; 167
     64e:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     652:	84 e8       	ldi	r24, 0x84	; 132
     654:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     658:	ec eb       	ldi	r30, 0xBC	; 188
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	88 23       	and	r24, r24
     660:	ec f7       	brge	.-6      	; 0x65c <read_byte+0x5a>
 
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     662:	84 e8       	ldi	r24, 0x84	; 132
     664:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     668:	ec eb       	ldi	r30, 0xBC	; 188
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	88 23       	and	r24, r24
     670:	ec f7       	brge	.-6      	; 0x66c <read_byte+0x6a>
 rtc_recv_data = TWDR;
     672:	eb eb       	ldi	r30, 0xBB	; 187
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     678:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     67a:	94 e8       	ldi	r25, 0x84	; 132
     67c:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     680:	ec eb       	ldi	r30, 0xBC	; 188
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	90 81       	ld	r25, Z
     686:	99 23       	and	r25, r25
     688:	ec f7       	brge	.-6      	; 0x684 <read_byte+0x82>
  
 return(rtc_recv_data);                            // return the read value to called function
}
     68a:	08 95       	ret

0000068c <init_devices>:


// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
     68c:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
     68e:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_port_config>
 lcd_set_4bit();
     692:	0e 94 44 01 	call	0x288	; 0x288 <lcd_set_4bit>
 lcd_init();
     696:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_init>
 twi_init();         // configur the I2cC, i.e TWI module 
     69a:	0e 94 b1 02 	call	0x562	; 0x562 <twi_init>
 sei();              // re-enable interrupts
     69e:	78 94       	sei
 //all peripherals are now initialized
}
     6a0:	08 95       	ret

000006a2 <pr_int>:

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	c8 2f       	mov	r28, r24
     6b0:	d6 2f       	mov	r29, r22
     6b2:	8a 01       	movw	r16, r20
     6b4:	79 01       	movw	r14, r18
	if (c<0)
     6b6:	55 23       	and	r21, r21
     6b8:	a4 f4       	brge	.+40     	; 0x6e2 <pr_int+0x40>
	{
		lcd_cursor(a,b);
     6ba:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_cursor>
		lcd_string("-");
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
     6c6:	6d 2f       	mov	r22, r29
     6c8:	6f 5f       	subi	r22, 0xFF	; 255
     6ca:	a8 01       	movw	r20, r16
     6cc:	11 23       	and	r17, r17
     6ce:	24 f4       	brge	.+8      	; 0x6d8 <pr_int+0x36>
     6d0:	44 27       	eor	r20, r20
     6d2:	55 27       	eor	r21, r21
     6d4:	40 1b       	sub	r20, r16
     6d6:	51 0b       	sbc	r21, r17
     6d8:	8c 2f       	mov	r24, r28
     6da:	97 01       	movw	r18, r14
     6dc:	0e 94 19 02 	call	0x432	; 0x432 <lcd_print>
     6e0:	0d c0       	rjmp	.+26     	; 0x6fc <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
     6e2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_cursor>
		lcd_string("+");
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_string>
		lcd_print(a,b+1,c,d);
     6ee:	6d 2f       	mov	r22, r29
     6f0:	6f 5f       	subi	r22, 0xFF	; 255
     6f2:	8c 2f       	mov	r24, r28
     6f4:	a8 01       	movw	r20, r16
     6f6:	97 01       	movw	r18, r14
     6f8:	0e 94 19 02 	call	0x432	; 0x432 <lcd_print>
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	08 95       	ret

0000070a <sign>:
		return (n-65536);
	}
	else
		return n;
		
}
     70a:	08 95       	ret

0000070c <init_adxl>:
// Main Programme start here.
//-------------------------------------------------------------------------------
void init_adxl(void)
{   
 
 init_devices();
     70c:	0e 94 46 03 	call	0x68c	; 0x68c <init_devices>

	write_byte(0x0,0x2D);
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	6d e2       	ldi	r22, 0x2D	; 45
     714:	0e 94 be 02 	call	0x57c	; 0x57c <write_byte>
	write_byte(0x8,0x2D);
     718:	88 e0       	ldi	r24, 0x08	; 8
     71a:	6d e2       	ldi	r22, 0x2D	; 45
     71c:	0e 94 be 02 	call	0x57c	; 0x57c <write_byte>
}
     720:	08 95       	ret

00000722 <acc_angle>:

int acc_angle(void)
{
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
		int x_acc,y_acc,z_acc;
		//long x,y,z;
		float angle;
 
	  
	   x_byte1 = read_byte(X1);
     732:	82 e3       	ldi	r24, 0x32	; 50
     734:	0e 94 01 03 	call	0x602	; 0x602 <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
     738:	83 e3       	ldi	r24, 0x33	; 51
     73a:	0e 94 01 03 	call	0x602	; 0x602 <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
     73e:	84 e3       	ldi	r24, 0x34	; 52
     740:	0e 94 01 03 	call	0x602	; 0x602 <read_byte>
     744:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
     746:	85 e3       	ldi	r24, 0x35	; 53
     748:	0e 94 01 03 	call	0x602	; 0x602 <read_byte>
     74c:	d8 2f       	mov	r29, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
     74e:	86 e3       	ldi	r24, 0x36	; 54
     750:	0e 94 01 03 	call	0x602	; 0x602 <read_byte>
     754:	c8 2f       	mov	r28, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
     756:	87 e3       	ldi	r24, 0x37	; 55
     758:	0e 94 01 03 	call	0x602	; 0x602 <read_byte>
     75c:	c8 2e       	mov	r12, r24
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
     75e:	3d 2f       	mov	r19, r29
     760:	20 e0       	ldi	r18, 0x00	; 0
	  y_byte |= y_byte1;
     762:	80 2f       	mov	r24, r16
     764:	90 e0       	ldi	r25, 0x00	; 0
	  y_acc=sign(y_byte);
     766:	82 2b       	or	r24, r18
     768:	93 2b       	or	r25, r19
     76a:	0e 94 85 03 	call	0x70a	; 0x70a <sign>
     76e:	8c 01       	movw	r16, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
     770:	3c 2d       	mov	r19, r12
     772:	20 e0       	ldi	r18, 0x00	; 0
	  z_byte |= z_byte1;
     774:	8c 2f       	mov	r24, r28
     776:	90 e0       	ldi	r25, 0x00	; 0
	  z_acc=sign(z_byte);
     778:	82 2b       	or	r24, r18
     77a:	93 2b       	or	r25, r19
     77c:	0e 94 85 03 	call	0x70a	; 0x70a <sign>
     780:	ec 01       	movw	r28, r24
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
     782:	b8 01       	movw	r22, r16
     784:	88 27       	eor	r24, r24
     786:	77 fd       	sbrc	r23, 7
     788:	80 95       	com	r24
     78a:	98 2f       	mov	r25, r24
     78c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__floatsisf>
     790:	6b 01       	movw	r12, r22
     792:	7c 01       	movw	r14, r24
     794:	be 01       	movw	r22, r28
     796:	88 27       	eor	r24, r24
     798:	77 fd       	sbrc	r23, 7
     79a:	80 95       	com	r24
     79c:	98 2f       	mov	r25, r24
     79e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__floatsisf>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c7 01       	movw	r24, r14
     7a8:	b6 01       	movw	r22, r12
     7aa:	0e 94 2f 0a 	call	0x145e	; 0x145e <__divsf3>
     7ae:	0e 94 03 0a 	call	0x1406	; 0x1406 <atan>
	  angle *= 1800.0/3.14;
     7b2:	26 ee       	ldi	r18, 0xE6	; 230
     7b4:	3f e4       	ldi	r19, 0x4F	; 79
     7b6:	4f e0       	ldi	r20, 0x0F	; 15
     7b8:	54 e4       	ldi	r21, 0x44	; 68
     7ba:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
	  //pr_int(1,1,angle,3);
	  
	return angle;
     7be:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixsfsi>
}
     7c2:	86 2f       	mov	r24, r22
     7c4:	97 2f       	mov	r25, r23
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	08 95       	ret

000007d8 <write_byte_gyro>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte_gyro(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     7d8:	94 ea       	ldi	r25, 0xA4	; 164
     7da:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     7de:	ec eb       	ldi	r30, 0xBC	; 188
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	90 81       	ld	r25, Z
     7e4:	99 23       	and	r25, r25
     7e6:	ec f7       	brge	.-6      	; 0x7e2 <write_byte_gyro+0xa>
     7e8:	ef ef       	ldi	r30, 0xFF	; 255
     7ea:	ff e8       	ldi	r31, 0x8F	; 143
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <write_byte_gyro+0x14>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <write_byte_gyro+0x1a>
     7f2:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLAVE_W;                                     // load SLA_W into TWDR Register
     7f4:	92 ed       	ldi	r25, 0xD2	; 210
     7f6:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     7fa:	94 e8       	ldi	r25, 0x84	; 132
     7fc:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     800:	ec eb       	ldi	r30, 0xBC	; 188
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	90 81       	ld	r25, Z
     806:	99 23       	and	r25, r25
     808:	ec f7       	brge	.-6      	; 0x804 <write_byte_gyro+0x2c>
     80a:	ef ef       	ldi	r30, 0xFF	; 255
     80c:	ff e8       	ldi	r31, 0x8F	; 143
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <write_byte_gyro+0x36>
     812:	00 c0       	rjmp	.+0      	; 0x814 <write_byte_gyro+0x3c>
     814:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     816:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     81a:	94 e8       	ldi	r25, 0x84	; 132
     81c:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     820:	ec eb       	ldi	r30, 0xBC	; 188
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	90 81       	ld	r25, Z
     826:	99 23       	and	r25, r25
     828:	ec f7       	brge	.-6      	; 0x824 <write_byte_gyro+0x4c>
     82a:	ef ef       	ldi	r30, 0xFF	; 255
     82c:	ff e8       	ldi	r31, 0x8F	; 143
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <write_byte_gyro+0x56>
     832:	00 c0       	rjmp	.+0      	; 0x834 <write_byte_gyro+0x5c>
     834:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     836:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     83a:	84 e8       	ldi	r24, 0x84	; 132
     83c:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     840:	ec eb       	ldi	r30, 0xBC	; 188
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	88 23       	and	r24, r24
     848:	ec f7       	brge	.-6      	; 0x844 <write_byte_gyro+0x6c>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	9f e8       	ldi	r25, 0x8F	; 143
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <write_byte_gyro+0x76>
     852:	00 c0       	rjmp	.+0      	; 0x854 <write_byte_gyro+0x7c>
     854:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     856:	84 e9       	ldi	r24, 0x94	; 148
     858:	80 93 bc 00 	sts	0x00BC, r24
}
     85c:	08 95       	ret

0000085e <read_byte_gyro>:
unsigned char read_byte_gyro(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     85e:	94 ea       	ldi	r25, 0xA4	; 164
     860:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     864:	ec eb       	ldi	r30, 0xBC	; 188
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	90 81       	ld	r25, Z
     86a:	99 23       	and	r25, r25
     86c:	ec f7       	brge	.-6      	; 0x868 <read_byte_gyro+0xa>
 //_delay_ms(10);

 

 TWDR = SLAVE_W;									   // load SLA_W into TWDR Register
     86e:	92 ed       	ldi	r25, 0xD2	; 210
     870:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     874:	94 e8       	ldi	r25, 0x84	; 132
     876:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     87a:	ec eb       	ldi	r30, 0xBC	; 188
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	90 81       	ld	r25, Z
     880:	99 23       	and	r25, r25
     882:	ec f7       	brge	.-6      	; 0x87e <read_byte_gyro+0x20>
 //_delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
     884:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     888:	84 e8       	ldi	r24, 0x84	; 132
     88a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     88e:	ec eb       	ldi	r30, 0xBC	; 188
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	88 23       	and	r24, r24
     896:	ec f7       	brge	.-6      	; 0x892 <read_byte_gyro+0x34>
// _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     898:	84 ea       	ldi	r24, 0xA4	; 164
     89a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     89e:	ec eb       	ldi	r30, 0xBC	; 188
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	88 23       	and	r24, r24
     8a6:	ec f7       	brge	.-6      	; 0x8a2 <read_byte_gyro+0x44>
 //_delay_ms(10);


 
 TWDR = SLAVE_R;									   // load SLA_R into TWDR Register
     8a8:	83 ed       	ldi	r24, 0xD3	; 211
     8aa:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     8ae:	84 e8       	ldi	r24, 0x84	; 132
     8b0:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8b4:	ec eb       	ldi	r30, 0xBC	; 188
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	88 23       	and	r24, r24
     8bc:	ec f7       	brge	.-6      	; 0x8b8 <read_byte_gyro+0x5a>
 //_delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     8be:	84 e8       	ldi	r24, 0x84	; 132
     8c0:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8c4:	ec eb       	ldi	r30, 0xBC	; 188
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	88 23       	and	r24, r24
     8cc:	ec f7       	brge	.-6      	; 0x8c8 <read_byte_gyro+0x6a>
 rtc_recv_data = TWDR;
     8ce:	eb eb       	ldi	r30, 0xBB	; 187
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
 //_delay_ms(10);
 

 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     8d4:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     8d6:	94 e8       	ldi	r25, 0x84	; 132
     8d8:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8dc:	ec eb       	ldi	r30, 0xBC	; 188
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	90 81       	ld	r25, Z
     8e2:	99 23       	and	r25, r25
     8e4:	ec f7       	brge	.-6      	; 0x8e0 <read_byte_gyro+0x82>
 //_delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
     8e6:	08 95       	ret

000008e8 <init_gyro>:

void init_gyro(void)
{   
 

	 write_byte_gyro(0x0F,0x20);       //Normal mode of control reg.1
     8e8:	8f e0       	ldi	r24, 0x0F	; 15
     8ea:	60 e2       	ldi	r22, 0x20	; 32
     8ec:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <write_byte_gyro>
}
     8f0:	08 95       	ret

000008f2 <comp_filter>:

//Complementary filter
float comp_filter(float newAngle,  float newRate) 
{   
     8f2:	4f 92       	push	r4
     8f4:	5f 92       	push	r5
     8f6:	6f 92       	push	r6
     8f8:	7f 92       	push	r7
     8fa:	8f 92       	push	r8
     8fc:	9f 92       	push	r9
     8fe:	af 92       	push	r10
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	00 d0       	rcall	.+0      	; 0x914 <comp_filter+0x22>
     914:	0f 92       	push	r0
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	29 83       	std	Y+1, r18	; 0x01
     91c:	3a 83       	std	Y+2, r19	; 0x02
     91e:	4b 83       	std	Y+3, r20	; 0x03
     920:	5c 83       	std	Y+4, r21	; 0x04
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     922:	80 90 1a 02 	lds	r8, 0x021A
     926:	90 90 1b 02 	lds	r9, 0x021B
     92a:	a0 90 1c 02 	lds	r10, 0x021C
     92e:	b0 90 1d 02 	lds	r11, 0x021D
     932:	a5 01       	movw	r20, r10
     934:	94 01       	movw	r18, r8
     936:	0e 94 9e 09 	call	0x133c	; 0x133c <__subsf3>
     93a:	c6 2e       	mov	r12, r22
     93c:	d7 2e       	mov	r13, r23
     93e:	f8 2e       	mov	r15, r24
     940:	e9 2e       	mov	r14, r25
	filterTerm2  += filterTerm0 * dt;
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     942:	38 2f       	mov	r19, r24
     944:	86 2f       	mov	r24, r22
     946:	9d 2d       	mov	r25, r13
     948:	af 2d       	mov	r26, r15
     94a:	be 2d       	mov	r27, r14
     94c:	bc 01       	movw	r22, r24
     94e:	cd 01       	movw	r24, r26
     950:	0c 2d       	mov	r16, r12
     952:	1d 2d       	mov	r17, r13
     954:	23 2f       	mov	r18, r19
     956:	3b 2f       	mov	r19, r27
     958:	a9 01       	movw	r20, r18
     95a:	98 01       	movw	r18, r16
     95c:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	40 ef       	ldi	r20, 0xF0	; 240
     966:	51 e4       	ldi	r21, 0x41	; 65
     968:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     96c:	2b 01       	movw	r4, r22
     96e:	3c 01       	movw	r6, r24
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     970:	80 2f       	mov	r24, r16
     972:	91 2f       	mov	r25, r17
     974:	af 2d       	mov	r26, r15
     976:	be 2d       	mov	r27, r14
     978:	bc 01       	movw	r22, r24
     97a:	cd 01       	movw	r24, r26
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 ef       	ldi	r20, 0xF0	; 240
     982:	51 e4       	ldi	r21, 0x41	; 65
     984:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 ef       	ldi	r20, 0xF0	; 240
     98e:	51 e4       	ldi	r21, 0x41	; 65
     990:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
	filterTerm2  += filterTerm0 * dt;
     994:	2a e0       	ldi	r18, 0x0A	; 10
     996:	37 ed       	ldi	r19, 0xD7	; 215
     998:	43 e2       	ldi	r20, 0x23	; 35
     99a:	5c e3       	ldi	r21, 0x3C	; 60
     99c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	a9 01       	movw	r20, r18
     9a6:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     9aa:	9b 01       	movw	r18, r22
     9ac:	ac 01       	movw	r20, r24
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     9ae:	c3 01       	movw	r24, r6
     9b0:	b2 01       	movw	r22, r4
     9b2:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     9b6:	29 81       	ldd	r18, Y+1	; 0x01
     9b8:	3a 81       	ldd	r19, Y+2	; 0x02
     9ba:	4b 81       	ldd	r20, Y+3	; 0x03
     9bc:	5c 81       	ldd	r21, Y+4	; 0x04
     9be:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
	filterAngle = (filterTerm1 * dt) + filterAngle;
     9c2:	2a e0       	ldi	r18, 0x0A	; 10
     9c4:	37 ed       	ldi	r19, 0xD7	; 215
     9c6:	43 e2       	ldi	r20, 0x23	; 35
     9c8:	5c e3       	ldi	r21, 0x3C	; 60
     9ca:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     9ce:	9b 01       	movw	r18, r22
     9d0:	ac 01       	movw	r20, r24
     9d2:	c5 01       	movw	r24, r10
     9d4:	b4 01       	movw	r22, r8
     9d6:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     9da:	26 2f       	mov	r18, r22
     9dc:	37 2f       	mov	r19, r23
     9de:	f8 2f       	mov	r31, r24
     9e0:	e9 2f       	mov	r30, r25
     9e2:	46 2f       	mov	r20, r22
     9e4:	57 2f       	mov	r21, r23
     9e6:	68 2f       	mov	r22, r24
     9e8:	79 2f       	mov	r23, r25
     9ea:	40 93 1a 02 	sts	0x021A, r20
     9ee:	50 93 1b 02 	sts	0x021B, r21
     9f2:	60 93 1c 02 	sts	0x021C, r22
     9f6:	70 93 1d 02 	sts	0x021D, r23

	return filterAngle; // This is actually the current angle, but is stored for the next iteration
}
     9fa:	82 2f       	mov	r24, r18
     9fc:	93 2f       	mov	r25, r19
     9fe:	af 2f       	mov	r26, r31
     a00:	be 2f       	mov	r27, r30
     a02:	bc 01       	movw	r22, r24
     a04:	cd 01       	movw	r24, r26
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	df 90       	pop	r13
     a1c:	cf 90       	pop	r12
     a1e:	bf 90       	pop	r11
     a20:	af 90       	pop	r10
     a22:	9f 90       	pop	r9
     a24:	8f 90       	pop	r8
     a26:	7f 90       	pop	r7
     a28:	6f 90       	pop	r6
     a2a:	5f 90       	pop	r5
     a2c:	4f 90       	pop	r4
     a2e:	08 95       	ret

00000a30 <gyro_Rate>:
//-------------------------------------
// Main Programme start here.
//-------------------------------------------------------------------------------
float gyro_Rate(void)
{   
     a30:	cf 93       	push	r28
  int16_t x_ang=0;
  int filt_ang=0;
 
	   
	   
	  x_byte1 = read_byte_gyro(XL);
     a32:	88 e2       	ldi	r24, 0x28	; 40
     a34:	0e 94 2f 04 	call	0x85e	; 0x85e <read_byte_gyro>
     a38:	c8 2f       	mov	r28, r24
	  //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte_gyro(XH);
     a3a:	89 e2       	ldi	r24, 0x29	; 41
     a3c:	0e 94 2f 04 	call	0x85e	; 0x85e <read_byte_gyro>
	   //lcd_print(2,1,x_byte2,3);
	   
	   x_byte = x_byte2;   // to print 10 bit integer value on LCD
	   x_byte = (x_byte << 8);
     a40:	38 2f       	mov	r19, r24
     a42:	20 e0       	ldi	r18, 0x00	; 0
	   x_byte |= x_byte1;
     a44:	8c 2f       	mov	r24, r28
     a46:	90 e0       	ldi	r25, 0x00	; 0
	   x_ang = sign(x_byte);
     a48:	82 2b       	or	r24, r18
     a4a:	93 2b       	or	r25, r19
     a4c:	0e 94 85 03 	call	0x70a	; 0x70a <sign>
	   x_ang /=100;
     a50:	64 e6       	ldi	r22, 0x64	; 100
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	0e 94 24 0c 	call	0x1848	; 0x1848 <__divmodhi4>
	   return x_ang;
     a58:	88 27       	eor	r24, r24
     a5a:	77 fd       	sbrc	r23, 7
     a5c:	80 95       	com	r24
     a5e:	98 2f       	mov	r25, r24
     a60:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__floatsisf>
}
     a64:	46 2f       	mov	r20, r22
     a66:	57 2f       	mov	r21, r23
     a68:	68 2f       	mov	r22, r24
     a6a:	79 2f       	mov	r23, r25
     a6c:	cb 01       	movw	r24, r22
     a6e:	ba 01       	movw	r22, r20
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <Compute>:
int para_flag=0;
double error =0;


void Compute()                          //Function for PID controller
{
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
	
	/*Compute all the working error variables*/
	error = Input - Setpoint;
     a82:	c0 90 3a 02 	lds	r12, 0x023A
     a86:	d0 90 3b 02 	lds	r13, 0x023B
     a8a:	e0 90 3c 02 	lds	r14, 0x023C
     a8e:	f0 90 3d 02 	lds	r15, 0x023D
     a92:	c0 92 04 02 	sts	0x0204, r12
     a96:	d0 92 05 02 	sts	0x0205, r13
     a9a:	e0 92 06 02 	sts	0x0206, r14
     a9e:	f0 92 07 02 	sts	0x0207, r15
	Iterm += ki*0.01*error;            //Taking the sum of all previous errors to implement integral part of PID
     aa2:	60 91 33 02 	lds	r22, 0x0233
     aa6:	70 91 34 02 	lds	r23, 0x0234
     aaa:	80 91 35 02 	lds	r24, 0x0235
     aae:	90 91 36 02 	lds	r25, 0x0236
     ab2:	2a e0       	ldi	r18, 0x0A	; 10
     ab4:	37 ed       	ldi	r19, 0xD7	; 215
     ab6:	43 e2       	ldi	r20, 0x23	; 35
     ab8:	5c e3       	ldi	r21, 0x3C	; 60
     aba:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	c7 01       	movw	r24, r14
     ac4:	b6 01       	movw	r22, r12
     ac6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     aca:	20 91 12 02 	lds	r18, 0x0212
     ace:	30 91 13 02 	lds	r19, 0x0213
     ad2:	40 91 14 02 	lds	r20, 0x0214
     ad6:	50 91 15 02 	lds	r21, 0x0215
     ada:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     ade:	16 2f       	mov	r17, r22
     ae0:	d7 2f       	mov	r29, r23
     ae2:	c8 2f       	mov	r28, r24
     ae4:	c9 2e       	mov	r12, r25
     ae6:	86 2f       	mov	r24, r22
     ae8:	9d 2f       	mov	r25, r29
     aea:	ac 2f       	mov	r26, r28
     aec:	bc 2d       	mov	r27, r12
     aee:	80 93 12 02 	sts	0x0212, r24
     af2:	90 93 13 02 	sts	0x0213, r25
     af6:	a0 93 14 02 	sts	0x0214, r26
     afa:	b0 93 15 02 	sts	0x0215, r27
	if (Iterm >= 255)                 //Clamping te Integral part
     afe:	bc 01       	movw	r22, r24
     b00:	cd 01       	movw	r24, r26
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	4f e7       	ldi	r20, 0x7F	; 127
     b08:	53 e4       	ldi	r21, 0x43	; 67
     b0a:	0e 94 9f 0b 	call	0x173e	; 0x173e <__gesf2>
     b0e:	88 23       	and	r24, r24
     b10:	6c f0       	brlt	.+26     	; 0xb2c <Compute+0xb8>
	{
		Iterm = 255;
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	af e7       	ldi	r26, 0x7F	; 127
     b18:	b3 e4       	ldi	r27, 0x43	; 67
     b1a:	80 93 12 02 	sts	0x0212, r24
     b1e:	90 93 13 02 	sts	0x0213, r25
     b22:	a0 93 14 02 	sts	0x0214, r26
     b26:	b0 93 15 02 	sts	0x0215, r27
     b2a:	1a c0       	rjmp	.+52     	; 0xb60 <Compute+0xec>
	}
	else if (Iterm <= -255)
     b2c:	81 2f       	mov	r24, r17
     b2e:	9d 2f       	mov	r25, r29
     b30:	ac 2f       	mov	r26, r28
     b32:	bc 2d       	mov	r27, r12
     b34:	bc 01       	movw	r22, r24
     b36:	cd 01       	movw	r24, r26
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	53 ec       	ldi	r21, 0xC3	; 195
     b40:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__cmpsf2>
     b44:	18 16       	cp	r1, r24
     b46:	64 f0       	brlt	.+24     	; 0xb60 <Compute+0xec>
	{
		Iterm = -255;
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	af e7       	ldi	r26, 0x7F	; 127
     b4e:	b3 ec       	ldi	r27, 0xC3	; 195
     b50:	80 93 12 02 	sts	0x0212, r24
     b54:	90 93 13 02 	sts	0x0213, r25
     b58:	a0 93 14 02 	sts	0x0214, r26
     b5c:	b0 93 15 02 	sts	0x0215, r27
	}
	
	if(millis(1)>=10)           //condition to take differences after regular interval of time.
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 1e 01 	call	0x23c	; 0x23c <millis>
     b68:	8a 30       	cpi	r24, 0x0A	; 10
     b6a:	91 05       	cpc	r25, r1
     b6c:	4c f1       	brlt	.+82     	; 0xbc0 <Compute+0x14c>
	{
		 dErr= (error - lastErr);   //Differential term of PID
     b6e:	c0 90 04 02 	lds	r12, 0x0204
     b72:	d0 90 05 02 	lds	r13, 0x0205
     b76:	e0 90 06 02 	lds	r14, 0x0206
     b7a:	f0 90 07 02 	lds	r15, 0x0207
     b7e:	c7 01       	movw	r24, r14
     b80:	b6 01       	movw	r22, r12
     b82:	20 91 2f 02 	lds	r18, 0x022F
     b86:	30 91 30 02 	lds	r19, 0x0230
     b8a:	40 91 31 02 	lds	r20, 0x0231
     b8e:	50 91 32 02 	lds	r21, 0x0232
     b92:	0e 94 9e 09 	call	0x133c	; 0x133c <__subsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	80 93 0e 02 	sts	0x020E, r24
     b9e:	90 93 0f 02 	sts	0x020F, r25
     ba2:	a0 93 10 02 	sts	0x0210, r26
     ba6:	b0 93 11 02 	sts	0x0211, r27
		lastErr=error;
     baa:	c0 92 2f 02 	sts	0x022F, r12
     bae:	d0 92 30 02 	sts	0x0230, r13
     bb2:	e0 92 31 02 	sts	0x0231, r14
     bb6:	f0 92 32 02 	sts	0x0232, r15
		start_timer4();
     bba:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
     bbe:	0b c0       	rjmp	.+22     	; 0xbd6 <Compute+0x162>
	}
	else
	{
		dErr=0;
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	dc 01       	movw	r26, r24
     bc6:	80 93 0e 02 	sts	0x020E, r24
     bca:	90 93 0f 02 	sts	0x020F, r25
     bce:	a0 93 10 02 	sts	0x0210, r26
     bd2:	b0 93 11 02 	sts	0x0211, r27
	}	
	
	Output = kp*error + Iterm + kd*0.1*dErr;                      //Compute PID Output
     bd6:	60 91 42 02 	lds	r22, 0x0242
     bda:	70 91 43 02 	lds	r23, 0x0243
     bde:	80 91 44 02 	lds	r24, 0x0244
     be2:	90 91 45 02 	lds	r25, 0x0245
     be6:	20 91 04 02 	lds	r18, 0x0204
     bea:	30 91 05 02 	lds	r19, 0x0205
     bee:	40 91 06 02 	lds	r20, 0x0206
     bf2:	50 91 07 02 	lds	r21, 0x0207
     bf6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     bfa:	20 91 12 02 	lds	r18, 0x0212
     bfe:	30 91 13 02 	lds	r19, 0x0213
     c02:	40 91 14 02 	lds	r20, 0x0214
     c06:	50 91 15 02 	lds	r21, 0x0215
     c0a:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     c0e:	6b 01       	movw	r12, r22
     c10:	7c 01       	movw	r14, r24
     c12:	60 91 1e 02 	lds	r22, 0x021E
     c16:	70 91 1f 02 	lds	r23, 0x021F
     c1a:	80 91 20 02 	lds	r24, 0x0220
     c1e:	90 91 21 02 	lds	r25, 0x0221
     c22:	2d ec       	ldi	r18, 0xCD	; 205
     c24:	3c ec       	ldi	r19, 0xCC	; 204
     c26:	4c ec       	ldi	r20, 0xCC	; 204
     c28:	5d e3       	ldi	r21, 0x3D	; 61
     c2a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     c2e:	20 91 0e 02 	lds	r18, 0x020E
     c32:	30 91 0f 02 	lds	r19, 0x020F
     c36:	40 91 10 02 	lds	r20, 0x0210
     c3a:	50 91 11 02 	lds	r21, 0x0211
     c3e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	c7 01       	movw	r24, r14
     c48:	b6 01       	movw	r22, r12
     c4a:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	80 93 29 02 	sts	0x0229, r24
     c56:	90 93 2a 02 	sts	0x022A, r25
     c5a:	a0 93 2b 02 	sts	0x022B, r26
     c5e:	b0 93 2c 02 	sts	0x022C, r27
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	08 95       	ret

00000c72 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00;                //disable while setting baud rate
     c72:	e1 ec       	ldi	r30, 0xC1	; 193
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     c78:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F;                // 14745600 Hzset baud rate lo
     c82:	8f e5       	ldi	r24, 0x5F	; 95
     c84:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00;                //set baud rate hi
     c88:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     c8c:	88 e9       	ldi	r24, 0x98	; 152
     c8e:	80 83       	st	Z, r24
}
     c90:	08 95       	ret

00000c92 <__vector_25>:

ISR(USART0_RX_vect)
{
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	0b b6       	in	r0, 0x3b	; 59
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
	data = UDR0;
     cbc:	80 91 c6 00 	lds	r24, 0x00C6
     cc0:	80 93 37 02 	sts	0x0237, r24
	if (data == 55)
     cc4:	87 33       	cpi	r24, 0x37	; 55
     cc6:	b9 f4       	brne	.+46     	; 0xcf6 <__vector_25+0x64>
	{
		para = kp;
     cc8:	80 91 42 02 	lds	r24, 0x0242
     ccc:	90 91 43 02 	lds	r25, 0x0243
     cd0:	a0 91 44 02 	lds	r26, 0x0244
     cd4:	b0 91 45 02 	lds	r27, 0x0245
     cd8:	80 93 0a 02 	sts	0x020A, r24
     cdc:	90 93 0b 02 	sts	0x020B, r25
     ce0:	a0 93 0c 02 	sts	0x020C, r26
     ce4:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	90 93 09 02 	sts	0x0209, r25
     cf0:	80 93 08 02 	sts	0x0208, r24
     cf4:	31 c0       	rjmp	.+98     	; 0xd58 <__vector_25+0xc6>
		
	}
	else if (data == 56)
     cf6:	88 33       	cpi	r24, 0x38	; 56
     cf8:	b9 f4       	brne	.+46     	; 0xd28 <__vector_25+0x96>
	{
		para = ki;
     cfa:	80 91 33 02 	lds	r24, 0x0233
     cfe:	90 91 34 02 	lds	r25, 0x0234
     d02:	a0 91 35 02 	lds	r26, 0x0235
     d06:	b0 91 36 02 	lds	r27, 0x0236
     d0a:	80 93 0a 02 	sts	0x020A, r24
     d0e:	90 93 0b 02 	sts	0x020B, r25
     d12:	a0 93 0c 02 	sts	0x020C, r26
     d16:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=2;
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	90 93 09 02 	sts	0x0209, r25
     d22:	80 93 08 02 	sts	0x0208, r24
     d26:	18 c0       	rjmp	.+48     	; 0xd58 <__vector_25+0xc6>
	}
	else if (data == 57)
     d28:	89 33       	cpi	r24, 0x39	; 57
     d2a:	b1 f4       	brne	.+44     	; 0xd58 <__vector_25+0xc6>
	{
		para = kd;
     d2c:	80 91 1e 02 	lds	r24, 0x021E
     d30:	90 91 1f 02 	lds	r25, 0x021F
     d34:	a0 91 20 02 	lds	r26, 0x0220
     d38:	b0 91 21 02 	lds	r27, 0x0221
     d3c:	80 93 0a 02 	sts	0x020A, r24
     d40:	90 93 0b 02 	sts	0x020B, r25
     d44:	a0 93 0c 02 	sts	0x020C, r26
     d48:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=3;
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	90 93 09 02 	sts	0x0209, r25
     d54:	80 93 08 02 	sts	0x0208, r24
	}
	
	
	if (data==49)
     d58:	80 91 37 02 	lds	r24, 0x0237
     d5c:	81 33       	cpi	r24, 0x31	; 49
     d5e:	c9 f4       	brne	.+50     	; 0xd92 <__vector_25+0x100>
	{
		para++;
     d60:	60 91 0a 02 	lds	r22, 0x020A
     d64:	70 91 0b 02 	lds	r23, 0x020B
     d68:	80 91 0c 02 	lds	r24, 0x020C
     d6c:	90 91 0d 02 	lds	r25, 0x020D
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e8       	ldi	r20, 0x80	; 128
     d76:	5f e3       	ldi	r21, 0x3F	; 63
     d78:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	80 93 0a 02 	sts	0x020A, r24
     d84:	90 93 0b 02 	sts	0x020B, r25
     d88:	a0 93 0c 02 	sts	0x020C, r26
     d8c:	b0 93 0d 02 	sts	0x020D, r27
     d90:	86 c0       	rjmp	.+268    	; 0xe9e <__vector_25+0x20c>
	}
	else if (data==50)
     d92:	82 33       	cpi	r24, 0x32	; 50
     d94:	c9 f4       	brne	.+50     	; 0xdc8 <__vector_25+0x136>
	{
		para += 5;
     d96:	60 91 0a 02 	lds	r22, 0x020A
     d9a:	70 91 0b 02 	lds	r23, 0x020B
     d9e:	80 91 0c 02 	lds	r24, 0x020C
     da2:	90 91 0d 02 	lds	r25, 0x020D
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 ea       	ldi	r20, 0xA0	; 160
     dac:	50 e4       	ldi	r21, 0x40	; 64
     dae:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	80 93 0a 02 	sts	0x020A, r24
     dba:	90 93 0b 02 	sts	0x020B, r25
     dbe:	a0 93 0c 02 	sts	0x020C, r26
     dc2:	b0 93 0d 02 	sts	0x020D, r27
     dc6:	6b c0       	rjmp	.+214    	; 0xe9e <__vector_25+0x20c>
	}
	else if (data==52)
     dc8:	84 33       	cpi	r24, 0x34	; 52
     dca:	c9 f4       	brne	.+50     	; 0xdfe <__vector_25+0x16c>
	{
		para--;
     dcc:	60 91 0a 02 	lds	r22, 0x020A
     dd0:	70 91 0b 02 	lds	r23, 0x020B
     dd4:	80 91 0c 02 	lds	r24, 0x020C
     dd8:	90 91 0d 02 	lds	r25, 0x020D
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e8       	ldi	r20, 0x80	; 128
     de2:	5f e3       	ldi	r21, 0x3F	; 63
     de4:	0e 94 9e 09 	call	0x133c	; 0x133c <__subsf3>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	80 93 0a 02 	sts	0x020A, r24
     df0:	90 93 0b 02 	sts	0x020B, r25
     df4:	a0 93 0c 02 	sts	0x020C, r26
     df8:	b0 93 0d 02 	sts	0x020D, r27
     dfc:	50 c0       	rjmp	.+160    	; 0xe9e <__vector_25+0x20c>
	}
	else if (data==53)
     dfe:	85 33       	cpi	r24, 0x35	; 53
     e00:	c9 f4       	brne	.+50     	; 0xe34 <__vector_25+0x1a2>
	{
		para -= 5;
     e02:	60 91 0a 02 	lds	r22, 0x020A
     e06:	70 91 0b 02 	lds	r23, 0x020B
     e0a:	80 91 0c 02 	lds	r24, 0x020C
     e0e:	90 91 0d 02 	lds	r25, 0x020D
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 ea       	ldi	r20, 0xA0	; 160
     e18:	50 e4       	ldi	r21, 0x40	; 64
     e1a:	0e 94 9e 09 	call	0x133c	; 0x133c <__subsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	80 93 0a 02 	sts	0x020A, r24
     e26:	90 93 0b 02 	sts	0x020B, r25
     e2a:	a0 93 0c 02 	sts	0x020C, r26
     e2e:	b0 93 0d 02 	sts	0x020D, r27
     e32:	35 c0       	rjmp	.+106    	; 0xe9e <__vector_25+0x20c>
	}
	else if (data == 51)
     e34:	83 33       	cpi	r24, 0x33	; 51
     e36:	c9 f4       	brne	.+50     	; 0xe6a <__vector_25+0x1d8>
	{
		para += 0.1;
     e38:	60 91 0a 02 	lds	r22, 0x020A
     e3c:	70 91 0b 02 	lds	r23, 0x020B
     e40:	80 91 0c 02 	lds	r24, 0x020C
     e44:	90 91 0d 02 	lds	r25, 0x020D
     e48:	2d ec       	ldi	r18, 0xCD	; 205
     e4a:	3c ec       	ldi	r19, 0xCC	; 204
     e4c:	4c ec       	ldi	r20, 0xCC	; 204
     e4e:	5d e3       	ldi	r21, 0x3D	; 61
     e50:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	80 93 0a 02 	sts	0x020A, r24
     e5c:	90 93 0b 02 	sts	0x020B, r25
     e60:	a0 93 0c 02 	sts	0x020C, r26
     e64:	b0 93 0d 02 	sts	0x020D, r27
     e68:	1a c0       	rjmp	.+52     	; 0xe9e <__vector_25+0x20c>
	}
	else if (data == 54)
     e6a:	86 33       	cpi	r24, 0x36	; 54
     e6c:	c1 f4       	brne	.+48     	; 0xe9e <__vector_25+0x20c>
	{
		para -=0.1;
     e6e:	60 91 0a 02 	lds	r22, 0x020A
     e72:	70 91 0b 02 	lds	r23, 0x020B
     e76:	80 91 0c 02 	lds	r24, 0x020C
     e7a:	90 91 0d 02 	lds	r25, 0x020D
     e7e:	2d ec       	ldi	r18, 0xCD	; 205
     e80:	3c ec       	ldi	r19, 0xCC	; 204
     e82:	4c ec       	ldi	r20, 0xCC	; 204
     e84:	5d e3       	ldi	r21, 0x3D	; 61
     e86:	0e 94 9e 09 	call	0x133c	; 0x133c <__subsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	80 93 0a 02 	sts	0x020A, r24
     e92:	90 93 0b 02 	sts	0x020B, r25
     e96:	a0 93 0c 02 	sts	0x020C, r26
     e9a:	b0 93 0d 02 	sts	0x020D, r27
	}
	
	
	
	if (para_flag == 1)
     e9e:	80 91 08 02 	lds	r24, 0x0208
     ea2:	90 91 09 02 	lds	r25, 0x0209
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	11 f5       	brne	.+68     	; 0xef0 <__vector_25+0x25e>
	{
		kp = para;
     eac:	60 91 0a 02 	lds	r22, 0x020A
     eb0:	70 91 0b 02 	lds	r23, 0x020B
     eb4:	80 91 0c 02 	lds	r24, 0x020C
     eb8:	90 91 0d 02 	lds	r25, 0x020D
     ebc:	60 93 42 02 	sts	0x0242, r22
     ec0:	70 93 43 02 	sts	0x0243, r23
     ec4:	80 93 44 02 	sts	0x0244, r24
     ec8:	90 93 45 02 	sts	0x0245, r25
		lcd_print(1,1,kp*10,4);
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     ed8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
     edc:	8b 01       	movw	r16, r22
     ede:	9c 01       	movw	r18, r24
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	a8 01       	movw	r20, r16
     ee6:	24 e0       	ldi	r18, 0x04	; 4
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	0e 94 19 02 	call	0x432	; 0x432 <lcd_print>
     eee:	49 c0       	rjmp	.+146    	; 0xf82 <__vector_25+0x2f0>
	}
	else if (para_flag == 2)
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	91 05       	cpc	r25, r1
     ef4:	11 f5       	brne	.+68     	; 0xf3a <__vector_25+0x2a8>
	{
		ki = para;
     ef6:	60 91 0a 02 	lds	r22, 0x020A
     efa:	70 91 0b 02 	lds	r23, 0x020B
     efe:	80 91 0c 02 	lds	r24, 0x020C
     f02:	90 91 0d 02 	lds	r25, 0x020D
     f06:	60 93 33 02 	sts	0x0233, r22
     f0a:	70 93 34 02 	sts	0x0234, r23
     f0e:	80 93 35 02 	sts	0x0235, r24
     f12:	90 93 36 02 	sts	0x0236, r25
		lcd_print(1,6,ki*10,4);
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	51 e4       	ldi	r21, 0x41	; 65
     f1e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     f22:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
     f26:	8b 01       	movw	r16, r22
     f28:	9c 01       	movw	r18, r24
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	66 e0       	ldi	r22, 0x06	; 6
     f2e:	a8 01       	movw	r20, r16
     f30:	24 e0       	ldi	r18, 0x04	; 4
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	0e 94 19 02 	call	0x432	; 0x432 <lcd_print>
     f38:	24 c0       	rjmp	.+72     	; 0xf82 <__vector_25+0x2f0>
	}
	else if (para_flag == 3)
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f5       	brne	.+66     	; 0xf82 <__vector_25+0x2f0>
	{
		kd = para;
     f40:	60 91 0a 02 	lds	r22, 0x020A
     f44:	70 91 0b 02 	lds	r23, 0x020B
     f48:	80 91 0c 02 	lds	r24, 0x020C
     f4c:	90 91 0d 02 	lds	r25, 0x020D
     f50:	60 93 1e 02 	sts	0x021E, r22
     f54:	70 93 1f 02 	sts	0x021F, r23
     f58:	80 93 20 02 	sts	0x0220, r24
     f5c:	90 93 21 02 	sts	0x0221, r25
		lcd_print(1,11,kd*10,4);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
     f6c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
     f70:	8b 01       	movw	r16, r22
     f72:	9c 01       	movw	r18, r24
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	6b e0       	ldi	r22, 0x0B	; 11
     f78:	a8 01       	movw	r20, r16
     f7a:	24 e0       	ldi	r18, 0x04	; 4
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	0e 94 19 02 	call	0x432	; 0x432 <lcd_print>
	}
	
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	0f 90       	pop	r0
     fa0:	0b be       	out	0x3b, r0	; 59
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <motion_pin_config>:



void motion_pin_config (void)
{
	DDRL = DDRL | 0xE4;    //set direction of the PORTL2.5,6,7 pins as output
     fac:	aa e0       	ldi	r26, 0x0A	; 10
     fae:	b1 e0       	ldi	r27, 0x01	; 1
     fb0:	8c 91       	ld	r24, X
     fb2:	84 6e       	ori	r24, 0xE4	; 228
     fb4:	8c 93       	st	X, r24
	PORTL = PORTL & 0x18;  //set initial value of the PORTL2.5,6,7 pins to logic 0
     fb6:	eb e0       	ldi	r30, 0x0B	; 11
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	80 81       	ld	r24, Z
     fbc:	88 71       	andi	r24, 0x18	; 24
     fbe:	80 83       	st	Z, r24
	DDRL = DDRL | 0x18;    //Setting PL3 and PL4 pins as output for PWM generation
     fc0:	8c 91       	ld	r24, X
     fc2:	88 61       	ori	r24, 0x18	; 24
     fc4:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18;  //PL3 and PL4 pins are for velocity control using PWM
     fc6:	80 81       	ld	r24, Z
     fc8:	88 61       	ori	r24, 0x18	; 24
     fca:	80 83       	st	Z, r24
}
     fcc:	08 95       	ret

00000fce <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
     fce:	0e 94 d6 07 	call	0xfac	; 0xfac <motion_pin_config>
}
     fd2:	08 95       	ret

00000fd4 <timer5_init>:
// TIMER5 initialize - prescale:1024
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// timer5 value: 56.250Hz
void timer5_init(void)
{
	TCCR5B = 0x00; //stop
     fd4:	e1 e2       	ldi	r30, 0x21	; 33
     fd6:	f1 e0       	ldi	r31, 0x01	; 1
     fd8:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //setup
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
     fe6:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
     fea:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
     fee:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
     ff2:	80 93 2a 01 	sts	0x012A, r24
	TCCR5A = 0xA1;
     ff6:	81 ea       	ldi	r24, 0xA1	; 161
     ff8:	80 93 20 01 	sts	0x0120, r24
	TCCR5C = 0x00;
     ffc:	10 92 22 01 	sts	0x0122, r1
	TCCR5B = 0x0D; //start Timer
    1000:	8d e0       	ldi	r24, 0x0D	; 13
    1002:	80 83       	st	Z, r24
}
    1004:	08 95       	ret

00001006 <set_PWM_value>:

// Function for robot velocity control
void set_PWM_value(unsigned char value) 	//set 8 bit PWM value
{
	OCR5AH = 0x00;
    1006:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = value;  //motor  is faster	
    100a:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    100e:	10 92 2b 01 	sts	0x012B, r1
	if(value<=245)    //Modification to make velocity of two motors equal
    1012:	86 3f       	cpi	r24, 0xF6	; 246
    1014:	20 f4       	brcc	.+8      	; 0x101e <set_PWM_value+0x18>
	{
		OCR5BL = value+10;
    1016:	86 5f       	subi	r24, 0xF6	; 246
    1018:	80 93 2a 01 	sts	0x012A, r24
    101c:	08 95       	ret
	}
	else
	{
		OCR5BL = 255;
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	80 93 2a 01 	sts	0x012A, r24
    1024:	08 95       	ret

00001026 <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortLRestore = 0;

	PortLRestore = PORTL; 			// reading the PORTL's original status
    1026:	eb e0       	ldi	r30, 0x0B	; 11
    1028:	f1 e0       	ldi	r31, 0x01	; 1
    102a:	90 81       	ld	r25, Z
	PortLRestore &= 0x18; 			// setting lower direction nibbel to 0
    102c:	98 71       	andi	r25, 0x18	; 24
	PortLRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTL status
    102e:	89 2b       	or	r24, r25
	PORTL = PortLRestore; 			// setting the command to the port
    1030:	80 83       	st	Z, r24
}
    1032:	08 95       	ret

00001034 <forward>:

void forward (void) 		//both inputs forward
{
	motion_set(0xA0);
    1034:	80 ea       	ldi	r24, 0xA0	; 160
    1036:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    103a:	08 95       	ret

0000103c <back>:

void back (void) 			//both inputs backward
{
	motion_set(0x44);
    103c:	84 e4       	ldi	r24, 0x44	; 68
    103e:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    1042:	08 95       	ret

00001044 <left>:

void left (void) 			//input12 backward, input34 forward
{
	motion_set(0x84);
    1044:	84 e8       	ldi	r24, 0x84	; 132
    1046:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    104a:	08 95       	ret

0000104c <right>:



void right (void) 			//input34 backward, input12 forward
{
	motion_set(0x60);
    104c:	80 e6       	ldi	r24, 0x60	; 96
    104e:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    1052:	08 95       	ret

00001054 <soft_left>:

void soft_left (void) 		//input12 stationary, input34 forward
{
	motion_set(0x80);
    1054:	80 e8       	ldi	r24, 0x80	; 128
    1056:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    105a:	08 95       	ret

0000105c <soft_right>:

void soft_right (void)      //input12 forward, input34 stationary
{
	motion_set(0x20);
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    1062:	08 95       	ret

00001064 <soft_left_2>:

void soft_left_2 (void)     //input12 backward, input34 stationary
{
	motion_set(0x40);
    1064:	80 e4       	ldi	r24, 0x40	; 64
    1066:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    106a:	08 95       	ret

0000106c <soft_right_2>:

void soft_right_2 (void)    //input12 stationary, input34 backward
{
	motion_set(0x04);
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    1072:	08 95       	ret

00001074 <stop>:

void stop (void)            // both input stationary
{
	motion_set(0x00);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	0e 94 13 08 	call	0x1026	; 0x1026 <motion_set>
}
    107a:	08 95       	ret

0000107c <init_devices1>:

void init_devices1 (void)
{
	cli(); //Clears the global interrupts
    107c:	f8 94       	cli
	
	lcd_port_config();  // configure the LCD port
    107e:	0e 94 aa 02 	call	0x554	; 0x554 <lcd_port_config>
	lcd_set_4bit();
    1082:	0e 94 44 01 	call	0x288	; 0x288 <lcd_set_4bit>
	lcd_init();
    1086:	0e 94 ac 01 	call	0x358	; 0x358 <lcd_init>
	port_init();
    108a:	0e 94 e7 07 	call	0xfce	; 0xfce <port_init>
	timer5_init();
    108e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <timer5_init>
	sei(); //Enables the global interrupts
    1092:	78 94       	sei
}
    1094:	08 95       	ret

00001096 <SetTunings>:

void SetTunings(double Kp, double Ki, double Kd)   //Function to set tuning parameters of PID
{
    1096:	8f 92       	push	r8
    1098:	9f 92       	push	r9
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	4b 01       	movw	r8, r22
    10a8:	5c 01       	movw	r10, r24
    10aa:	da 01       	movw	r26, r20
    10ac:	c9 01       	movw	r24, r18
	kp = Kp;
    10ae:	80 92 42 02 	sts	0x0242, r8
    10b2:	90 92 43 02 	sts	0x0243, r9
    10b6:	a0 92 44 02 	sts	0x0244, r10
    10ba:	b0 92 45 02 	sts	0x0245, r11
	ki = Ki;
    10be:	80 93 33 02 	sts	0x0233, r24
    10c2:	90 93 34 02 	sts	0x0234, r25
    10c6:	a0 93 35 02 	sts	0x0235, r26
    10ca:	b0 93 36 02 	sts	0x0236, r27
	kd = Kd;
    10ce:	e0 92 1e 02 	sts	0x021E, r14
    10d2:	f0 92 1f 02 	sts	0x021F, r15
    10d6:	00 93 20 02 	sts	0x0220, r16
    10da:	10 93 21 02 	sts	0x0221, r17
}
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	9f 90       	pop	r9
    10ec:	8f 90       	pop	r8
    10ee:	08 95       	ret

000010f0 <main>:
{
	double acc_Angle;
	int gyro_Angle;
	int filt_Angle;
	unsigned int pwm_value;
	init_adxl();               //Initialise accelerometer
    10f0:	0e 94 86 03 	call	0x70c	; 0x70c <init_adxl>
	init_gyro();               //Initialise gyroscope
    10f4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <init_gyro>
	init_devices1();
    10f8:	0e 94 3e 08 	call	0x107c	; 0x107c <init_devices1>
	uart0_init();              //Initailize UART1 for serial communiaction
    10fc:	0e 94 39 06 	call	0xc72	; 0xc72 <uart0_init>
	start_timer4();            //Timer for timing calculations
    1100:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
	
	SetTunings(9.1,8,5);
    1104:	6a e9       	ldi	r22, 0x9A	; 154
    1106:	79 e9       	ldi	r23, 0x99	; 153
    1108:	81 e1       	ldi	r24, 0x11	; 17
    110a:	91 e4       	ldi	r25, 0x41	; 65
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	51 e4       	ldi	r21, 0x41	; 65
    1114:	0f 2e       	mov	r0, r31
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	ef 2e       	mov	r14, r31
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	ff 2e       	mov	r15, r31
    111e:	f0 ea       	ldi	r31, 0xA0	; 160
    1120:	0f 2f       	mov	r16, r31
    1122:	f0 e4       	ldi	r31, 0x40	; 64
    1124:	1f 2f       	mov	r17, r31
    1126:	f0 2d       	mov	r31, r0
    1128:	0e 94 4b 08 	call	0x1096	; 0x1096 <SetTunings>
	lcd_print(1,1,kp*10,4);
    112c:	60 91 42 02 	lds	r22, 0x0242
    1130:	70 91 43 02 	lds	r23, 0x0243
    1134:	80 91 44 02 	lds	r24, 0x0244
    1138:	90 91 45 02 	lds	r25, 0x0245
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e2       	ldi	r20, 0x20	; 32
    1142:	51 e4       	ldi	r21, 0x41	; 65
    1144:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
    1148:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
    114c:	8b 01       	movw	r16, r22
    114e:	9c 01       	movw	r18, r24
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	a8 01       	movw	r20, r16
    1156:	24 e0       	ldi	r18, 0x04	; 4
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	0e 94 19 02 	call	0x432	; 0x432 <lcd_print>
	lcd_print(1,6,ki*10,4);
    115e:	60 91 33 02 	lds	r22, 0x0233
    1162:	70 91 34 02 	lds	r23, 0x0234
    1166:	80 91 35 02 	lds	r24, 0x0235
    116a:	90 91 36 02 	lds	r25, 0x0236
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
    117a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
    117e:	8b 01       	movw	r16, r22
    1180:	9c 01       	movw	r18, r24
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	66 e0       	ldi	r22, 0x06	; 6
    1186:	a8 01       	movw	r20, r16
    1188:	24 e0       	ldi	r18, 0x04	; 4
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	0e 94 19 02 	call	0x432	; 0x432 <lcd_print>
	lcd_print(1,11,kd*10,4);
    1190:	60 91 1e 02 	lds	r22, 0x021E
    1194:	70 91 1f 02 	lds	r23, 0x021F
    1198:	80 91 20 02 	lds	r24, 0x0220
    119c:	90 91 21 02 	lds	r25, 0x0221
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e2       	ldi	r20, 0x20	; 32
    11a6:	51 e4       	ldi	r21, 0x41	; 65
    11a8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
    11ac:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
    11b0:	8b 01       	movw	r16, r22
    11b2:	9c 01       	movw	r18, r24
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	6b e0       	ldi	r22, 0x0B	; 11
    11b8:	a8 01       	movw	r20, r16
    11ba:	24 e0       	ldi	r18, 0x04	; 4
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	0e 94 19 02 	call	0x432	; 0x432 <lcd_print>
		{
			pwm_value = (-Output)+20;
			if(pwm_value>=255)
			{
				
				pwm_value=255;
    11c2:	0f 2e       	mov	r0, r31
    11c4:	ff ef       	ldi	r31, 0xFF	; 255
    11c6:	4f 2e       	mov	r4, r31
    11c8:	55 24       	eor	r5, r5
    11ca:	f0 2d       	mov	r31, r0
		{
			stop();
		}
		
		//_delay_ms(20); 
		UDR0=0xFF;
    11cc:	06 ec       	ldi	r16, 0xC6	; 198
    11ce:	10 e0       	ldi	r17, 0x00	; 0
    11d0:	77 24       	eor	r7, r7
    11d2:	7a 94       	dec	r7
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();        //Accelerometer angle
    11d4:	0e 94 91 03 	call	0x722	; 0x722 <acc_angle>
    11d8:	ec 01       	movw	r28, r24
		gyro_Angle=gyro_Rate();           //Anugular rate from Gyroscope
    11da:	0e 94 18 05 	call	0xa30	; 0xa30 <gyro_Rate>
    11de:	6b 01       	movw	r12, r22
    11e0:	7c 01       	movw	r14, r24
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();        //Accelerometer angle
    11e2:	be 01       	movw	r22, r28
    11e4:	88 27       	eor	r24, r24
    11e6:	77 fd       	sbrc	r23, 7
    11e8:	80 95       	com	r24
    11ea:	98 2f       	mov	r25, r24
    11ec:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__floatsisf>
    11f0:	2d ec       	ldi	r18, 0xCD	; 205
    11f2:	3c ec       	ldi	r19, 0xCC	; 204
    11f4:	4c ec       	ldi	r20, 0xCC	; 204
    11f6:	5d e3       	ldi	r21, 0x3D	; 61
    11f8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
    11fc:	4b 01       	movw	r8, r22
    11fe:	5c 01       	movw	r10, r24
		gyro_Angle=gyro_Rate();           //Anugular rate from Gyroscope
    1200:	c7 01       	movw	r24, r14
    1202:	b6 01       	movw	r22, r12
    1204:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixsfsi>
		filt_Angle=comp_filter(acc_Angle,gyro_Angle);  //Filtered angle after passing through Complementary filter
    1208:	88 27       	eor	r24, r24
    120a:	77 fd       	sbrc	r23, 7
    120c:	80 95       	com	r24
    120e:	98 2f       	mov	r25, r24
    1210:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__floatsisf>
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	c5 01       	movw	r24, r10
    121a:	b4 01       	movw	r22, r8
    121c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <comp_filter>
    1220:	0e 94 97 0a 	call	0x152e	; 0x152e <__fixsfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	ec 01       	movw	r28, r24
		Input=filt_Angle;                              //Input for error calculation of PID
    122a:	be 01       	movw	r22, r28
    122c:	88 27       	eor	r24, r24
    122e:	77 fd       	sbrc	r23, 7
    1230:	80 95       	com	r24
    1232:	98 2f       	mov	r25, r24
    1234:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__floatsisf>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	80 93 3a 02 	sts	0x023A, r24
    1240:	90 93 3b 02 	sts	0x023B, r25
    1244:	a0 93 3c 02 	sts	0x023C, r26
    1248:	b0 93 3d 02 	sts	0x023D, r27
		Compute();                                  //Calling PID 
    124c:	0e 94 3a 05 	call	0xa74	; 0xa74 <Compute>
		if (Output>0)                               //Mapping PID output to velocity of motors
    1250:	c0 90 29 02 	lds	r12, 0x0229
    1254:	d0 90 2a 02 	lds	r13, 0x022A
    1258:	e0 90 2b 02 	lds	r14, 0x022B
    125c:	f0 90 2c 02 	lds	r15, 0x022C
    1260:	c7 01       	movw	r24, r14
    1262:	b6 01       	movw	r22, r12
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	0e 94 9f 0b 	call	0x173e	; 0x173e <__gesf2>
    126e:	18 16       	cp	r1, r24
    1270:	ac f4       	brge	.+42     	; 0x129c <main+0x1ac>
		{
			pwm_value = (Output+20);
    1272:	c7 01       	movw	r24, r14
    1274:	b6 01       	movw	r22, r12
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 ea       	ldi	r20, 0xA0	; 160
    127c:	51 e4       	ldi	r21, 0x41	; 65
    127e:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
    1282:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	91 05       	cpc	r25, r1
    128e:	08 f0       	brcs	.+2      	; 0x1292 <main+0x1a2>
			{
				
				pwm_value=255;
    1290:	c2 01       	movw	r24, r4
			}
			set_PWM_value(pwm_value);
    1292:	0e 94 03 08 	call	0x1006	; 0x1006 <set_PWM_value>
			forward();
    1296:	0e 94 1a 08 	call	0x1034	; 0x1034 <forward>
    129a:	29 c0       	rjmp	.+82     	; 0x12ee <main+0x1fe>
		}
		else if(Output<0)
    129c:	c7 01       	movw	r24, r14
    129e:	b6 01       	movw	r22, r12
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	a9 01       	movw	r20, r18
    12a6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__cmpsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	ac f4       	brge	.+42     	; 0x12d8 <main+0x1e8>
		{
			pwm_value = (-Output)+20;
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	80 ea       	ldi	r24, 0xA0	; 160
    12b4:	91 e4       	ldi	r25, 0x41	; 65
    12b6:	a7 01       	movw	r20, r14
    12b8:	96 01       	movw	r18, r12
    12ba:	0e 94 9e 09 	call	0x133c	; 0x133c <__subsf3>
    12be:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    12c6:	8f 3f       	cpi	r24, 0xFF	; 255
    12c8:	91 05       	cpc	r25, r1
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <main+0x1de>
			{
				
				pwm_value=255;
    12cc:	c2 01       	movw	r24, r4
			}
			set_PWM_value(pwm_value);
    12ce:	0e 94 03 08 	call	0x1006	; 0x1006 <set_PWM_value>
			back();
    12d2:	0e 94 1e 08 	call	0x103c	; 0x103c <back>
    12d6:	0b c0       	rjmp	.+22     	; 0x12ee <main+0x1fe>
		}
		else if(Output==0)
    12d8:	c7 01       	movw	r24, r14
    12da:	b6 01       	movw	r22, r12
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__cmpsf2>
    12e6:	88 23       	and	r24, r24
    12e8:	11 f4       	brne	.+4      	; 0x12ee <main+0x1fe>
		{
			stop();
    12ea:	0e 94 3a 08 	call	0x1074	; 0x1074 <stop>
		}
		
		//_delay_ms(20); 
		UDR0=0xFF;
    12ee:	f8 01       	movw	r30, r16
    12f0:	70 82       	st	Z, r7
    12f2:	86 e6       	ldi	r24, 0x66	; 102
    12f4:	9e e0       	ldi	r25, 0x0E	; 14
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <main+0x206>
    12fa:	00 00       	nop
		_delay_ms(1);
		UDR0=(uint8_t)(filt_Angle+100);
    12fc:	cc 59       	subi	r28, 0x9C	; 156
    12fe:	c0 83       	st	Z, r28
    1300:	86 e6       	ldi	r24, 0x66	; 102
    1302:	9e e0       	ldi	r25, 0x0E	; 14
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <main+0x214>
    1308:	00 00       	nop
		_delay_ms(1);
		uint8_t op=(Output/2)+127;
    130a:	60 91 29 02 	lds	r22, 0x0229
    130e:	70 91 2a 02 	lds	r23, 0x022A
    1312:	80 91 2b 02 	lds	r24, 0x022B
    1316:	90 91 2c 02 	lds	r25, 0x022C
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	5f e3       	ldi	r21, 0x3F	; 63
    1322:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3>
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	4e ef       	ldi	r20, 0xFE	; 254
    132c:	52 e4       	ldi	r21, 0x42	; 66
    132e:	0e 94 9f 09 	call	0x133e	; 0x133e <__addsf3>
    1332:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fixunssfsi>
		UDR0=op;
    1336:	f8 01       	movw	r30, r16
    1338:	60 83       	st	Z, r22
	}
    133a:	4c cf       	rjmp	.-360    	; 0x11d4 <main+0xe4>

0000133c <__subsf3>:
    133c:	50 58       	subi	r21, 0x80	; 128

0000133e <__addsf3>:
    133e:	bb 27       	eor	r27, r27
    1340:	aa 27       	eor	r26, r26
    1342:	0e d0       	rcall	.+28     	; 0x1360 <__addsf3x>
    1344:	c2 c1       	rjmp	.+900    	; 0x16ca <__fp_round>
    1346:	b3 d1       	rcall	.+870    	; 0x16ae <__fp_pscA>
    1348:	30 f0       	brcs	.+12     	; 0x1356 <__addsf3+0x18>
    134a:	b8 d1       	rcall	.+880    	; 0x16bc <__fp_pscB>
    134c:	20 f0       	brcs	.+8      	; 0x1356 <__addsf3+0x18>
    134e:	31 f4       	brne	.+12     	; 0x135c <__addsf3+0x1e>
    1350:	9f 3f       	cpi	r25, 0xFF	; 255
    1352:	11 f4       	brne	.+4      	; 0x1358 <__addsf3+0x1a>
    1354:	1e f4       	brtc	.+6      	; 0x135c <__addsf3+0x1e>
    1356:	83 c1       	rjmp	.+774    	; 0x165e <__fp_nan>
    1358:	0e f4       	brtc	.+2      	; 0x135c <__addsf3+0x1e>
    135a:	e0 95       	com	r30
    135c:	e7 fb       	bst	r30, 7
    135e:	79 c1       	rjmp	.+754    	; 0x1652 <__fp_inf>

00001360 <__addsf3x>:
    1360:	e9 2f       	mov	r30, r25
    1362:	c4 d1       	rcall	.+904    	; 0x16ec <__fp_split3>
    1364:	80 f3       	brcs	.-32     	; 0x1346 <__addsf3+0x8>
    1366:	ba 17       	cp	r27, r26
    1368:	62 07       	cpc	r22, r18
    136a:	73 07       	cpc	r23, r19
    136c:	84 07       	cpc	r24, r20
    136e:	95 07       	cpc	r25, r21
    1370:	18 f0       	brcs	.+6      	; 0x1378 <__addsf3x+0x18>
    1372:	71 f4       	brne	.+28     	; 0x1390 <__addsf3x+0x30>
    1374:	9e f5       	brtc	.+102    	; 0x13dc <__addsf3x+0x7c>
    1376:	dc c1       	rjmp	.+952    	; 0x1730 <__fp_zero>
    1378:	0e f4       	brtc	.+2      	; 0x137c <__addsf3x+0x1c>
    137a:	e0 95       	com	r30
    137c:	0b 2e       	mov	r0, r27
    137e:	ba 2f       	mov	r27, r26
    1380:	a0 2d       	mov	r26, r0
    1382:	0b 01       	movw	r0, r22
    1384:	b9 01       	movw	r22, r18
    1386:	90 01       	movw	r18, r0
    1388:	0c 01       	movw	r0, r24
    138a:	ca 01       	movw	r24, r20
    138c:	a0 01       	movw	r20, r0
    138e:	11 24       	eor	r1, r1
    1390:	ff 27       	eor	r31, r31
    1392:	59 1b       	sub	r21, r25
    1394:	99 f0       	breq	.+38     	; 0x13bc <__addsf3x+0x5c>
    1396:	59 3f       	cpi	r21, 0xF9	; 249
    1398:	50 f4       	brcc	.+20     	; 0x13ae <__addsf3x+0x4e>
    139a:	50 3e       	cpi	r21, 0xE0	; 224
    139c:	68 f1       	brcs	.+90     	; 0x13f8 <__addsf3x+0x98>
    139e:	1a 16       	cp	r1, r26
    13a0:	f0 40       	sbci	r31, 0x00	; 0
    13a2:	a2 2f       	mov	r26, r18
    13a4:	23 2f       	mov	r18, r19
    13a6:	34 2f       	mov	r19, r20
    13a8:	44 27       	eor	r20, r20
    13aa:	58 5f       	subi	r21, 0xF8	; 248
    13ac:	f3 cf       	rjmp	.-26     	; 0x1394 <__addsf3x+0x34>
    13ae:	46 95       	lsr	r20
    13b0:	37 95       	ror	r19
    13b2:	27 95       	ror	r18
    13b4:	a7 95       	ror	r26
    13b6:	f0 40       	sbci	r31, 0x00	; 0
    13b8:	53 95       	inc	r21
    13ba:	c9 f7       	brne	.-14     	; 0x13ae <__addsf3x+0x4e>
    13bc:	7e f4       	brtc	.+30     	; 0x13dc <__addsf3x+0x7c>
    13be:	1f 16       	cp	r1, r31
    13c0:	ba 0b       	sbc	r27, r26
    13c2:	62 0b       	sbc	r22, r18
    13c4:	73 0b       	sbc	r23, r19
    13c6:	84 0b       	sbc	r24, r20
    13c8:	ba f0       	brmi	.+46     	; 0x13f8 <__addsf3x+0x98>
    13ca:	91 50       	subi	r25, 0x01	; 1
    13cc:	a1 f0       	breq	.+40     	; 0x13f6 <__addsf3x+0x96>
    13ce:	ff 0f       	add	r31, r31
    13d0:	bb 1f       	adc	r27, r27
    13d2:	66 1f       	adc	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	88 1f       	adc	r24, r24
    13d8:	c2 f7       	brpl	.-16     	; 0x13ca <__addsf3x+0x6a>
    13da:	0e c0       	rjmp	.+28     	; 0x13f8 <__addsf3x+0x98>
    13dc:	ba 0f       	add	r27, r26
    13de:	62 1f       	adc	r22, r18
    13e0:	73 1f       	adc	r23, r19
    13e2:	84 1f       	adc	r24, r20
    13e4:	48 f4       	brcc	.+18     	; 0x13f8 <__addsf3x+0x98>
    13e6:	87 95       	ror	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	b7 95       	ror	r27
    13ee:	f7 95       	ror	r31
    13f0:	9e 3f       	cpi	r25, 0xFE	; 254
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <__addsf3x+0x96>
    13f4:	b3 cf       	rjmp	.-154    	; 0x135c <__addsf3+0x1e>
    13f6:	93 95       	inc	r25
    13f8:	88 0f       	add	r24, r24
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <__addsf3x+0x9e>
    13fc:	99 27       	eor	r25, r25
    13fe:	ee 0f       	add	r30, r30
    1400:	97 95       	ror	r25
    1402:	87 95       	ror	r24
    1404:	08 95       	ret

00001406 <atan>:
    1406:	df 93       	push	r29
    1408:	dd 27       	eor	r29, r29
    140a:	b9 2f       	mov	r27, r25
    140c:	bf 77       	andi	r27, 0x7F	; 127
    140e:	40 e8       	ldi	r20, 0x80	; 128
    1410:	5f e3       	ldi	r21, 0x3F	; 63
    1412:	16 16       	cp	r1, r22
    1414:	17 06       	cpc	r1, r23
    1416:	48 07       	cpc	r20, r24
    1418:	5b 07       	cpc	r21, r27
    141a:	10 f4       	brcc	.+4      	; 0x1420 <atan+0x1a>
    141c:	d9 2f       	mov	r29, r25
    141e:	93 d1       	rcall	.+806    	; 0x1746 <inverse>
    1420:	9f 93       	push	r25
    1422:	8f 93       	push	r24
    1424:	7f 93       	push	r23
    1426:	6f 93       	push	r22
    1428:	f8 d1       	rcall	.+1008   	; 0x181a <square>
    142a:	e4 ee       	ldi	r30, 0xE4	; 228
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	1a d1       	rcall	.+564    	; 0x1664 <__fp_powser>
    1430:	4c d1       	rcall	.+664    	; 0x16ca <__fp_round>
    1432:	2f 91       	pop	r18
    1434:	3f 91       	pop	r19
    1436:	4f 91       	pop	r20
    1438:	5f 91       	pop	r21
    143a:	98 d1       	rcall	.+816    	; 0x176c <__mulsf3x>
    143c:	dd 23       	and	r29, r29
    143e:	49 f0       	breq	.+18     	; 0x1452 <atan+0x4c>
    1440:	90 58       	subi	r25, 0x80	; 128
    1442:	a2 ea       	ldi	r26, 0xA2	; 162
    1444:	2a ed       	ldi	r18, 0xDA	; 218
    1446:	3f e0       	ldi	r19, 0x0F	; 15
    1448:	49 ec       	ldi	r20, 0xC9	; 201
    144a:	5f e3       	ldi	r21, 0x3F	; 63
    144c:	d0 78       	andi	r29, 0x80	; 128
    144e:	5d 27       	eor	r21, r29
    1450:	87 df       	rcall	.-242    	; 0x1360 <__addsf3x>
    1452:	df 91       	pop	r29
    1454:	3a c1       	rjmp	.+628    	; 0x16ca <__fp_round>

00001456 <__cmpsf2>:
    1456:	d9 d0       	rcall	.+434    	; 0x160a <__fp_cmp>
    1458:	08 f4       	brcc	.+2      	; 0x145c <__cmpsf2+0x6>
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	08 95       	ret

0000145e <__divsf3>:
    145e:	0c d0       	rcall	.+24     	; 0x1478 <__divsf3x>
    1460:	34 c1       	rjmp	.+616    	; 0x16ca <__fp_round>
    1462:	2c d1       	rcall	.+600    	; 0x16bc <__fp_pscB>
    1464:	40 f0       	brcs	.+16     	; 0x1476 <__divsf3+0x18>
    1466:	23 d1       	rcall	.+582    	; 0x16ae <__fp_pscA>
    1468:	30 f0       	brcs	.+12     	; 0x1476 <__divsf3+0x18>
    146a:	21 f4       	brne	.+8      	; 0x1474 <__divsf3+0x16>
    146c:	5f 3f       	cpi	r21, 0xFF	; 255
    146e:	19 f0       	breq	.+6      	; 0x1476 <__divsf3+0x18>
    1470:	f0 c0       	rjmp	.+480    	; 0x1652 <__fp_inf>
    1472:	51 11       	cpse	r21, r1
    1474:	5e c1       	rjmp	.+700    	; 0x1732 <__fp_szero>
    1476:	f3 c0       	rjmp	.+486    	; 0x165e <__fp_nan>

00001478 <__divsf3x>:
    1478:	39 d1       	rcall	.+626    	; 0x16ec <__fp_split3>
    147a:	98 f3       	brcs	.-26     	; 0x1462 <__divsf3+0x4>

0000147c <__divsf3_pse>:
    147c:	99 23       	and	r25, r25
    147e:	c9 f3       	breq	.-14     	; 0x1472 <__divsf3+0x14>
    1480:	55 23       	and	r21, r21
    1482:	b1 f3       	breq	.-20     	; 0x1470 <__divsf3+0x12>
    1484:	95 1b       	sub	r25, r21
    1486:	55 0b       	sbc	r21, r21
    1488:	bb 27       	eor	r27, r27
    148a:	aa 27       	eor	r26, r26
    148c:	62 17       	cp	r22, r18
    148e:	73 07       	cpc	r23, r19
    1490:	84 07       	cpc	r24, r20
    1492:	38 f0       	brcs	.+14     	; 0x14a2 <__divsf3_pse+0x26>
    1494:	9f 5f       	subi	r25, 0xFF	; 255
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	22 0f       	add	r18, r18
    149a:	33 1f       	adc	r19, r19
    149c:	44 1f       	adc	r20, r20
    149e:	aa 1f       	adc	r26, r26
    14a0:	a9 f3       	breq	.-22     	; 0x148c <__divsf3_pse+0x10>
    14a2:	33 d0       	rcall	.+102    	; 0x150a <__divsf3_pse+0x8e>
    14a4:	0e 2e       	mov	r0, r30
    14a6:	3a f0       	brmi	.+14     	; 0x14b6 <__divsf3_pse+0x3a>
    14a8:	e0 e8       	ldi	r30, 0x80	; 128
    14aa:	30 d0       	rcall	.+96     	; 0x150c <__divsf3_pse+0x90>
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	50 40       	sbci	r21, 0x00	; 0
    14b0:	e6 95       	lsr	r30
    14b2:	00 1c       	adc	r0, r0
    14b4:	ca f7       	brpl	.-14     	; 0x14a8 <__divsf3_pse+0x2c>
    14b6:	29 d0       	rcall	.+82     	; 0x150a <__divsf3_pse+0x8e>
    14b8:	fe 2f       	mov	r31, r30
    14ba:	27 d0       	rcall	.+78     	; 0x150a <__divsf3_pse+0x8e>
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	88 1f       	adc	r24, r24
    14c2:	bb 1f       	adc	r27, r27
    14c4:	26 17       	cp	r18, r22
    14c6:	37 07       	cpc	r19, r23
    14c8:	48 07       	cpc	r20, r24
    14ca:	ab 07       	cpc	r26, r27
    14cc:	b0 e8       	ldi	r27, 0x80	; 128
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <__divsf3_pse+0x56>
    14d0:	bb 0b       	sbc	r27, r27
    14d2:	80 2d       	mov	r24, r0
    14d4:	bf 01       	movw	r22, r30
    14d6:	ff 27       	eor	r31, r31
    14d8:	93 58       	subi	r25, 0x83	; 131
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    14dc:	2a f0       	brmi	.+10     	; 0x14e8 <__divsf3_pse+0x6c>
    14de:	9e 3f       	cpi	r25, 0xFE	; 254
    14e0:	51 05       	cpc	r21, r1
    14e2:	68 f0       	brcs	.+26     	; 0x14fe <__divsf3_pse+0x82>
    14e4:	b6 c0       	rjmp	.+364    	; 0x1652 <__fp_inf>
    14e6:	25 c1       	rjmp	.+586    	; 0x1732 <__fp_szero>
    14e8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ea:	ec f3       	brlt	.-6      	; 0x14e6 <__divsf3_pse+0x6a>
    14ec:	98 3e       	cpi	r25, 0xE8	; 232
    14ee:	dc f3       	brlt	.-10     	; 0x14e6 <__divsf3_pse+0x6a>
    14f0:	86 95       	lsr	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f7 95       	ror	r31
    14fa:	9f 5f       	subi	r25, 0xFF	; 255
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__divsf3_pse+0x74>
    14fe:	88 0f       	add	r24, r24
    1500:	91 1d       	adc	r25, r1
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	97 f9       	bld	r25, 7
    1508:	08 95       	ret
    150a:	e1 e0       	ldi	r30, 0x01	; 1
    150c:	66 0f       	add	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	bb 1f       	adc	r27, r27
    1514:	62 17       	cp	r22, r18
    1516:	73 07       	cpc	r23, r19
    1518:	84 07       	cpc	r24, r20
    151a:	ba 07       	cpc	r27, r26
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__divsf3_pse+0xaa>
    151e:	62 1b       	sub	r22, r18
    1520:	73 0b       	sbc	r23, r19
    1522:	84 0b       	sbc	r24, r20
    1524:	ba 0b       	sbc	r27, r26
    1526:	ee 1f       	adc	r30, r30
    1528:	88 f7       	brcc	.-30     	; 0x150c <__divsf3_pse+0x90>
    152a:	e0 95       	com	r30
    152c:	08 95       	ret

0000152e <__fixsfsi>:
    152e:	04 d0       	rcall	.+8      	; 0x1538 <__fixunssfsi>
    1530:	68 94       	set
    1532:	b1 11       	cpse	r27, r1
    1534:	fe c0       	rjmp	.+508    	; 0x1732 <__fp_szero>
    1536:	08 95       	ret

00001538 <__fixunssfsi>:
    1538:	e1 d0       	rcall	.+450    	; 0x16fc <__fp_splitA>
    153a:	88 f0       	brcs	.+34     	; 0x155e <__fixunssfsi+0x26>
    153c:	9f 57       	subi	r25, 0x7F	; 127
    153e:	90 f0       	brcs	.+36     	; 0x1564 <__fixunssfsi+0x2c>
    1540:	b9 2f       	mov	r27, r25
    1542:	99 27       	eor	r25, r25
    1544:	b7 51       	subi	r27, 0x17	; 23
    1546:	a0 f0       	brcs	.+40     	; 0x1570 <__fixunssfsi+0x38>
    1548:	d1 f0       	breq	.+52     	; 0x157e <__fixunssfsi+0x46>
    154a:	66 0f       	add	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	88 1f       	adc	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	1a f0       	brmi	.+6      	; 0x155a <__fixunssfsi+0x22>
    1554:	ba 95       	dec	r27
    1556:	c9 f7       	brne	.-14     	; 0x154a <__fixunssfsi+0x12>
    1558:	12 c0       	rjmp	.+36     	; 0x157e <__fixunssfsi+0x46>
    155a:	b1 30       	cpi	r27, 0x01	; 1
    155c:	81 f0       	breq	.+32     	; 0x157e <__fixunssfsi+0x46>
    155e:	e8 d0       	rcall	.+464    	; 0x1730 <__fp_zero>
    1560:	b1 e0       	ldi	r27, 0x01	; 1
    1562:	08 95       	ret
    1564:	e5 c0       	rjmp	.+458    	; 0x1730 <__fp_zero>
    1566:	67 2f       	mov	r22, r23
    1568:	78 2f       	mov	r23, r24
    156a:	88 27       	eor	r24, r24
    156c:	b8 5f       	subi	r27, 0xF8	; 248
    156e:	39 f0       	breq	.+14     	; 0x157e <__fixunssfsi+0x46>
    1570:	b9 3f       	cpi	r27, 0xF9	; 249
    1572:	cc f3       	brlt	.-14     	; 0x1566 <__fixunssfsi+0x2e>
    1574:	86 95       	lsr	r24
    1576:	77 95       	ror	r23
    1578:	67 95       	ror	r22
    157a:	b3 95       	inc	r27
    157c:	d9 f7       	brne	.-10     	; 0x1574 <__fixunssfsi+0x3c>
    157e:	3e f4       	brtc	.+14     	; 0x158e <__fixunssfsi+0x56>
    1580:	90 95       	com	r25
    1582:	80 95       	com	r24
    1584:	70 95       	com	r23
    1586:	61 95       	neg	r22
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	08 95       	ret

00001590 <__floatunsisf>:
    1590:	e8 94       	clt
    1592:	09 c0       	rjmp	.+18     	; 0x15a6 <__floatsisf+0x12>

00001594 <__floatsisf>:
    1594:	97 fb       	bst	r25, 7
    1596:	3e f4       	brtc	.+14     	; 0x15a6 <__floatsisf+0x12>
    1598:	90 95       	com	r25
    159a:	80 95       	com	r24
    159c:	70 95       	com	r23
    159e:	61 95       	neg	r22
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	8f 4f       	sbci	r24, 0xFF	; 255
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	99 23       	and	r25, r25
    15a8:	a9 f0       	breq	.+42     	; 0x15d4 <__floatsisf+0x40>
    15aa:	f9 2f       	mov	r31, r25
    15ac:	96 e9       	ldi	r25, 0x96	; 150
    15ae:	bb 27       	eor	r27, r27
    15b0:	93 95       	inc	r25
    15b2:	f6 95       	lsr	r31
    15b4:	87 95       	ror	r24
    15b6:	77 95       	ror	r23
    15b8:	67 95       	ror	r22
    15ba:	b7 95       	ror	r27
    15bc:	f1 11       	cpse	r31, r1
    15be:	f8 cf       	rjmp	.-16     	; 0x15b0 <__floatsisf+0x1c>
    15c0:	fa f4       	brpl	.+62     	; 0x1600 <__floatsisf+0x6c>
    15c2:	bb 0f       	add	r27, r27
    15c4:	11 f4       	brne	.+4      	; 0x15ca <__floatsisf+0x36>
    15c6:	60 ff       	sbrs	r22, 0
    15c8:	1b c0       	rjmp	.+54     	; 0x1600 <__floatsisf+0x6c>
    15ca:	6f 5f       	subi	r22, 0xFF	; 255
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	8f 4f       	sbci	r24, 0xFF	; 255
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	16 c0       	rjmp	.+44     	; 0x1600 <__floatsisf+0x6c>
    15d4:	88 23       	and	r24, r24
    15d6:	11 f0       	breq	.+4      	; 0x15dc <__floatsisf+0x48>
    15d8:	96 e9       	ldi	r25, 0x96	; 150
    15da:	11 c0       	rjmp	.+34     	; 0x15fe <__floatsisf+0x6a>
    15dc:	77 23       	and	r23, r23
    15de:	21 f0       	breq	.+8      	; 0x15e8 <__floatsisf+0x54>
    15e0:	9e e8       	ldi	r25, 0x8E	; 142
    15e2:	87 2f       	mov	r24, r23
    15e4:	76 2f       	mov	r23, r22
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__floatsisf+0x5e>
    15e8:	66 23       	and	r22, r22
    15ea:	71 f0       	breq	.+28     	; 0x1608 <__floatsisf+0x74>
    15ec:	96 e8       	ldi	r25, 0x86	; 134
    15ee:	86 2f       	mov	r24, r22
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	2a f0       	brmi	.+10     	; 0x1600 <__floatsisf+0x6c>
    15f6:	9a 95       	dec	r25
    15f8:	66 0f       	add	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	88 1f       	adc	r24, r24
    15fe:	da f7       	brpl	.-10     	; 0x15f6 <__floatsisf+0x62>
    1600:	88 0f       	add	r24, r24
    1602:	96 95       	lsr	r25
    1604:	87 95       	ror	r24
    1606:	97 f9       	bld	r25, 7
    1608:	08 95       	ret

0000160a <__fp_cmp>:
    160a:	99 0f       	add	r25, r25
    160c:	00 08       	sbc	r0, r0
    160e:	55 0f       	add	r21, r21
    1610:	aa 0b       	sbc	r26, r26
    1612:	e0 e8       	ldi	r30, 0x80	; 128
    1614:	fe ef       	ldi	r31, 0xFE	; 254
    1616:	16 16       	cp	r1, r22
    1618:	17 06       	cpc	r1, r23
    161a:	e8 07       	cpc	r30, r24
    161c:	f9 07       	cpc	r31, r25
    161e:	c0 f0       	brcs	.+48     	; 0x1650 <__fp_cmp+0x46>
    1620:	12 16       	cp	r1, r18
    1622:	13 06       	cpc	r1, r19
    1624:	e4 07       	cpc	r30, r20
    1626:	f5 07       	cpc	r31, r21
    1628:	98 f0       	brcs	.+38     	; 0x1650 <__fp_cmp+0x46>
    162a:	62 1b       	sub	r22, r18
    162c:	73 0b       	sbc	r23, r19
    162e:	84 0b       	sbc	r24, r20
    1630:	95 0b       	sbc	r25, r21
    1632:	39 f4       	brne	.+14     	; 0x1642 <__fp_cmp+0x38>
    1634:	0a 26       	eor	r0, r26
    1636:	61 f0       	breq	.+24     	; 0x1650 <__fp_cmp+0x46>
    1638:	23 2b       	or	r18, r19
    163a:	24 2b       	or	r18, r20
    163c:	25 2b       	or	r18, r21
    163e:	21 f4       	brne	.+8      	; 0x1648 <__fp_cmp+0x3e>
    1640:	08 95       	ret
    1642:	0a 26       	eor	r0, r26
    1644:	09 f4       	brne	.+2      	; 0x1648 <__fp_cmp+0x3e>
    1646:	a1 40       	sbci	r26, 0x01	; 1
    1648:	a6 95       	lsr	r26
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	81 1d       	adc	r24, r1
    164e:	81 1d       	adc	r24, r1
    1650:	08 95       	ret

00001652 <__fp_inf>:
    1652:	97 f9       	bld	r25, 7
    1654:	9f 67       	ori	r25, 0x7F	; 127
    1656:	80 e8       	ldi	r24, 0x80	; 128
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	08 95       	ret

0000165e <__fp_nan>:
    165e:	9f ef       	ldi	r25, 0xFF	; 255
    1660:	80 ec       	ldi	r24, 0xC0	; 192
    1662:	08 95       	ret

00001664 <__fp_powser>:
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	1f 93       	push	r17
    166a:	0f 93       	push	r16
    166c:	ff 92       	push	r15
    166e:	ef 92       	push	r14
    1670:	df 92       	push	r13
    1672:	7b 01       	movw	r14, r22
    1674:	8c 01       	movw	r16, r24
    1676:	68 94       	set
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <__fp_powser+0x20>
    167a:	da 2e       	mov	r13, r26
    167c:	ef 01       	movw	r28, r30
    167e:	76 d0       	rcall	.+236    	; 0x176c <__mulsf3x>
    1680:	fe 01       	movw	r30, r28
    1682:	e8 94       	clt
    1684:	a5 91       	lpm	r26, Z+
    1686:	25 91       	lpm	r18, Z+
    1688:	35 91       	lpm	r19, Z+
    168a:	45 91       	lpm	r20, Z+
    168c:	55 91       	lpm	r21, Z+
    168e:	ae f3       	brts	.-22     	; 0x167a <__fp_powser+0x16>
    1690:	ef 01       	movw	r28, r30
    1692:	66 de       	rcall	.-820    	; 0x1360 <__addsf3x>
    1694:	fe 01       	movw	r30, r28
    1696:	97 01       	movw	r18, r14
    1698:	a8 01       	movw	r20, r16
    169a:	da 94       	dec	r13
    169c:	79 f7       	brne	.-34     	; 0x167c <__fp_powser+0x18>
    169e:	df 90       	pop	r13
    16a0:	ef 90       	pop	r14
    16a2:	ff 90       	pop	r15
    16a4:	0f 91       	pop	r16
    16a6:	1f 91       	pop	r17
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <__fp_pscA>:
    16ae:	00 24       	eor	r0, r0
    16b0:	0a 94       	dec	r0
    16b2:	16 16       	cp	r1, r22
    16b4:	17 06       	cpc	r1, r23
    16b6:	18 06       	cpc	r1, r24
    16b8:	09 06       	cpc	r0, r25
    16ba:	08 95       	ret

000016bc <__fp_pscB>:
    16bc:	00 24       	eor	r0, r0
    16be:	0a 94       	dec	r0
    16c0:	12 16       	cp	r1, r18
    16c2:	13 06       	cpc	r1, r19
    16c4:	14 06       	cpc	r1, r20
    16c6:	05 06       	cpc	r0, r21
    16c8:	08 95       	ret

000016ca <__fp_round>:
    16ca:	09 2e       	mov	r0, r25
    16cc:	03 94       	inc	r0
    16ce:	00 0c       	add	r0, r0
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <__fp_round+0xc>
    16d2:	88 23       	and	r24, r24
    16d4:	52 f0       	brmi	.+20     	; 0x16ea <__fp_round+0x20>
    16d6:	bb 0f       	add	r27, r27
    16d8:	40 f4       	brcc	.+16     	; 0x16ea <__fp_round+0x20>
    16da:	bf 2b       	or	r27, r31
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <__fp_round+0x18>
    16de:	60 ff       	sbrs	r22, 0
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <__fp_round+0x20>
    16e2:	6f 5f       	subi	r22, 0xFF	; 255
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	08 95       	ret

000016ec <__fp_split3>:
    16ec:	57 fd       	sbrc	r21, 7
    16ee:	90 58       	subi	r25, 0x80	; 128
    16f0:	44 0f       	add	r20, r20
    16f2:	55 1f       	adc	r21, r21
    16f4:	59 f0       	breq	.+22     	; 0x170c <__fp_splitA+0x10>
    16f6:	5f 3f       	cpi	r21, 0xFF	; 255
    16f8:	71 f0       	breq	.+28     	; 0x1716 <__fp_splitA+0x1a>
    16fa:	47 95       	ror	r20

000016fc <__fp_splitA>:
    16fc:	88 0f       	add	r24, r24
    16fe:	97 fb       	bst	r25, 7
    1700:	99 1f       	adc	r25, r25
    1702:	61 f0       	breq	.+24     	; 0x171c <__fp_splitA+0x20>
    1704:	9f 3f       	cpi	r25, 0xFF	; 255
    1706:	79 f0       	breq	.+30     	; 0x1726 <__fp_splitA+0x2a>
    1708:	87 95       	ror	r24
    170a:	08 95       	ret
    170c:	12 16       	cp	r1, r18
    170e:	13 06       	cpc	r1, r19
    1710:	14 06       	cpc	r1, r20
    1712:	55 1f       	adc	r21, r21
    1714:	f2 cf       	rjmp	.-28     	; 0x16fa <__fp_split3+0xe>
    1716:	46 95       	lsr	r20
    1718:	f1 df       	rcall	.-30     	; 0x16fc <__fp_splitA>
    171a:	08 c0       	rjmp	.+16     	; 0x172c <__fp_splitA+0x30>
    171c:	16 16       	cp	r1, r22
    171e:	17 06       	cpc	r1, r23
    1720:	18 06       	cpc	r1, r24
    1722:	99 1f       	adc	r25, r25
    1724:	f1 cf       	rjmp	.-30     	; 0x1708 <__fp_splitA+0xc>
    1726:	86 95       	lsr	r24
    1728:	71 05       	cpc	r23, r1
    172a:	61 05       	cpc	r22, r1
    172c:	08 94       	sec
    172e:	08 95       	ret

00001730 <__fp_zero>:
    1730:	e8 94       	clt

00001732 <__fp_szero>:
    1732:	bb 27       	eor	r27, r27
    1734:	66 27       	eor	r22, r22
    1736:	77 27       	eor	r23, r23
    1738:	cb 01       	movw	r24, r22
    173a:	97 f9       	bld	r25, 7
    173c:	08 95       	ret

0000173e <__gesf2>:
    173e:	65 df       	rcall	.-310    	; 0x160a <__fp_cmp>
    1740:	08 f4       	brcc	.+2      	; 0x1744 <__gesf2+0x6>
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	08 95       	ret

00001746 <inverse>:
    1746:	9b 01       	movw	r18, r22
    1748:	ac 01       	movw	r20, r24
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	80 e8       	ldi	r24, 0x80	; 128
    1750:	9f e3       	ldi	r25, 0x3F	; 63
    1752:	85 ce       	rjmp	.-758    	; 0x145e <__divsf3>

00001754 <__mulsf3>:
    1754:	0b d0       	rcall	.+22     	; 0x176c <__mulsf3x>
    1756:	b9 cf       	rjmp	.-142    	; 0x16ca <__fp_round>
    1758:	aa df       	rcall	.-172    	; 0x16ae <__fp_pscA>
    175a:	28 f0       	brcs	.+10     	; 0x1766 <__mulsf3+0x12>
    175c:	af df       	rcall	.-162    	; 0x16bc <__fp_pscB>
    175e:	18 f0       	brcs	.+6      	; 0x1766 <__mulsf3+0x12>
    1760:	95 23       	and	r25, r21
    1762:	09 f0       	breq	.+2      	; 0x1766 <__mulsf3+0x12>
    1764:	76 cf       	rjmp	.-276    	; 0x1652 <__fp_inf>
    1766:	7b cf       	rjmp	.-266    	; 0x165e <__fp_nan>
    1768:	11 24       	eor	r1, r1
    176a:	e3 cf       	rjmp	.-58     	; 0x1732 <__fp_szero>

0000176c <__mulsf3x>:
    176c:	bf df       	rcall	.-130    	; 0x16ec <__fp_split3>
    176e:	a0 f3       	brcs	.-24     	; 0x1758 <__mulsf3+0x4>

00001770 <__mulsf3_pse>:
    1770:	95 9f       	mul	r25, r21
    1772:	d1 f3       	breq	.-12     	; 0x1768 <__mulsf3+0x14>
    1774:	95 0f       	add	r25, r21
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	55 1f       	adc	r21, r21
    177a:	62 9f       	mul	r22, r18
    177c:	f0 01       	movw	r30, r0
    177e:	72 9f       	mul	r23, r18
    1780:	bb 27       	eor	r27, r27
    1782:	f0 0d       	add	r31, r0
    1784:	b1 1d       	adc	r27, r1
    1786:	63 9f       	mul	r22, r19
    1788:	aa 27       	eor	r26, r26
    178a:	f0 0d       	add	r31, r0
    178c:	b1 1d       	adc	r27, r1
    178e:	aa 1f       	adc	r26, r26
    1790:	64 9f       	mul	r22, r20
    1792:	66 27       	eor	r22, r22
    1794:	b0 0d       	add	r27, r0
    1796:	a1 1d       	adc	r26, r1
    1798:	66 1f       	adc	r22, r22
    179a:	82 9f       	mul	r24, r18
    179c:	22 27       	eor	r18, r18
    179e:	b0 0d       	add	r27, r0
    17a0:	a1 1d       	adc	r26, r1
    17a2:	62 1f       	adc	r22, r18
    17a4:	73 9f       	mul	r23, r19
    17a6:	b0 0d       	add	r27, r0
    17a8:	a1 1d       	adc	r26, r1
    17aa:	62 1f       	adc	r22, r18
    17ac:	83 9f       	mul	r24, r19
    17ae:	a0 0d       	add	r26, r0
    17b0:	61 1d       	adc	r22, r1
    17b2:	22 1f       	adc	r18, r18
    17b4:	74 9f       	mul	r23, r20
    17b6:	33 27       	eor	r19, r19
    17b8:	a0 0d       	add	r26, r0
    17ba:	61 1d       	adc	r22, r1
    17bc:	23 1f       	adc	r18, r19
    17be:	84 9f       	mul	r24, r20
    17c0:	60 0d       	add	r22, r0
    17c2:	21 1d       	adc	r18, r1
    17c4:	82 2f       	mov	r24, r18
    17c6:	76 2f       	mov	r23, r22
    17c8:	6a 2f       	mov	r22, r26
    17ca:	11 24       	eor	r1, r1
    17cc:	9f 57       	subi	r25, 0x7F	; 127
    17ce:	50 40       	sbci	r21, 0x00	; 0
    17d0:	8a f0       	brmi	.+34     	; 0x17f4 <__mulsf3_pse+0x84>
    17d2:	e1 f0       	breq	.+56     	; 0x180c <__mulsf3_pse+0x9c>
    17d4:	88 23       	and	r24, r24
    17d6:	4a f0       	brmi	.+18     	; 0x17ea <__mulsf3_pse+0x7a>
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	bb 1f       	adc	r27, r27
    17de:	66 1f       	adc	r22, r22
    17e0:	77 1f       	adc	r23, r23
    17e2:	88 1f       	adc	r24, r24
    17e4:	91 50       	subi	r25, 0x01	; 1
    17e6:	50 40       	sbci	r21, 0x00	; 0
    17e8:	a9 f7       	brne	.-22     	; 0x17d4 <__mulsf3_pse+0x64>
    17ea:	9e 3f       	cpi	r25, 0xFE	; 254
    17ec:	51 05       	cpc	r21, r1
    17ee:	70 f0       	brcs	.+28     	; 0x180c <__mulsf3_pse+0x9c>
    17f0:	30 cf       	rjmp	.-416    	; 0x1652 <__fp_inf>
    17f2:	9f cf       	rjmp	.-194    	; 0x1732 <__fp_szero>
    17f4:	5f 3f       	cpi	r21, 0xFF	; 255
    17f6:	ec f3       	brlt	.-6      	; 0x17f2 <__mulsf3_pse+0x82>
    17f8:	98 3e       	cpi	r25, 0xE8	; 232
    17fa:	dc f3       	brlt	.-10     	; 0x17f2 <__mulsf3_pse+0x82>
    17fc:	86 95       	lsr	r24
    17fe:	77 95       	ror	r23
    1800:	67 95       	ror	r22
    1802:	b7 95       	ror	r27
    1804:	f7 95       	ror	r31
    1806:	e7 95       	ror	r30
    1808:	9f 5f       	subi	r25, 0xFF	; 255
    180a:	c1 f7       	brne	.-16     	; 0x17fc <__mulsf3_pse+0x8c>
    180c:	fe 2b       	or	r31, r30
    180e:	88 0f       	add	r24, r24
    1810:	91 1d       	adc	r25, r1
    1812:	96 95       	lsr	r25
    1814:	87 95       	ror	r24
    1816:	97 f9       	bld	r25, 7
    1818:	08 95       	ret

0000181a <square>:
    181a:	9b 01       	movw	r18, r22
    181c:	ac 01       	movw	r20, r24
    181e:	9a cf       	rjmp	.-204    	; 0x1754 <__mulsf3>

00001820 <__udivmodhi4>:
    1820:	aa 1b       	sub	r26, r26
    1822:	bb 1b       	sub	r27, r27
    1824:	51 e1       	ldi	r21, 0x11	; 17
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <__udivmodhi4_ep>

00001828 <__udivmodhi4_loop>:
    1828:	aa 1f       	adc	r26, r26
    182a:	bb 1f       	adc	r27, r27
    182c:	a6 17       	cp	r26, r22
    182e:	b7 07       	cpc	r27, r23
    1830:	10 f0       	brcs	.+4      	; 0x1836 <__udivmodhi4_ep>
    1832:	a6 1b       	sub	r26, r22
    1834:	b7 0b       	sbc	r27, r23

00001836 <__udivmodhi4_ep>:
    1836:	88 1f       	adc	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	5a 95       	dec	r21
    183c:	a9 f7       	brne	.-22     	; 0x1828 <__udivmodhi4_loop>
    183e:	80 95       	com	r24
    1840:	90 95       	com	r25
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	08 95       	ret

00001848 <__divmodhi4>:
    1848:	97 fb       	bst	r25, 7
    184a:	09 2e       	mov	r0, r25
    184c:	07 26       	eor	r0, r23
    184e:	0a d0       	rcall	.+20     	; 0x1864 <__divmodhi4_neg1>
    1850:	77 fd       	sbrc	r23, 7
    1852:	04 d0       	rcall	.+8      	; 0x185c <__divmodhi4_neg2>
    1854:	e5 df       	rcall	.-54     	; 0x1820 <__udivmodhi4>
    1856:	06 d0       	rcall	.+12     	; 0x1864 <__divmodhi4_neg1>
    1858:	00 20       	and	r0, r0
    185a:	1a f4       	brpl	.+6      	; 0x1862 <__divmodhi4_exit>

0000185c <__divmodhi4_neg2>:
    185c:	70 95       	com	r23
    185e:	61 95       	neg	r22
    1860:	7f 4f       	sbci	r23, 0xFF	; 255

00001862 <__divmodhi4_exit>:
    1862:	08 95       	ret

00001864 <__divmodhi4_neg1>:
    1864:	f6 f7       	brtc	.-4      	; 0x1862 <__divmodhi4_exit>
    1866:	90 95       	com	r25
    1868:	81 95       	neg	r24
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	08 95       	ret

0000186e <__divmodsi4>:
    186e:	97 fb       	bst	r25, 7
    1870:	09 2e       	mov	r0, r25
    1872:	05 26       	eor	r0, r21
    1874:	0e d0       	rcall	.+28     	; 0x1892 <__divmodsi4_neg1>
    1876:	57 fd       	sbrc	r21, 7
    1878:	04 d0       	rcall	.+8      	; 0x1882 <__divmodsi4_neg2>
    187a:	14 d0       	rcall	.+40     	; 0x18a4 <__udivmodsi4>
    187c:	0a d0       	rcall	.+20     	; 0x1892 <__divmodsi4_neg1>
    187e:	00 1c       	adc	r0, r0
    1880:	38 f4       	brcc	.+14     	; 0x1890 <__divmodsi4_exit>

00001882 <__divmodsi4_neg2>:
    1882:	50 95       	com	r21
    1884:	40 95       	com	r20
    1886:	30 95       	com	r19
    1888:	21 95       	neg	r18
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	4f 4f       	sbci	r20, 0xFF	; 255
    188e:	5f 4f       	sbci	r21, 0xFF	; 255

00001890 <__divmodsi4_exit>:
    1890:	08 95       	ret

00001892 <__divmodsi4_neg1>:
    1892:	f6 f7       	brtc	.-4      	; 0x1890 <__divmodsi4_exit>
    1894:	90 95       	com	r25
    1896:	80 95       	com	r24
    1898:	70 95       	com	r23
    189a:	61 95       	neg	r22
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	8f 4f       	sbci	r24, 0xFF	; 255
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	08 95       	ret

000018a4 <__udivmodsi4>:
    18a4:	a1 e2       	ldi	r26, 0x21	; 33
    18a6:	1a 2e       	mov	r1, r26
    18a8:	aa 1b       	sub	r26, r26
    18aa:	bb 1b       	sub	r27, r27
    18ac:	fd 01       	movw	r30, r26
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <__udivmodsi4_ep>

000018b0 <__udivmodsi4_loop>:
    18b0:	aa 1f       	adc	r26, r26
    18b2:	bb 1f       	adc	r27, r27
    18b4:	ee 1f       	adc	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	a2 17       	cp	r26, r18
    18ba:	b3 07       	cpc	r27, r19
    18bc:	e4 07       	cpc	r30, r20
    18be:	f5 07       	cpc	r31, r21
    18c0:	20 f0       	brcs	.+8      	; 0x18ca <__udivmodsi4_ep>
    18c2:	a2 1b       	sub	r26, r18
    18c4:	b3 0b       	sbc	r27, r19
    18c6:	e4 0b       	sbc	r30, r20
    18c8:	f5 0b       	sbc	r31, r21

000018ca <__udivmodsi4_ep>:
    18ca:	66 1f       	adc	r22, r22
    18cc:	77 1f       	adc	r23, r23
    18ce:	88 1f       	adc	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	1a 94       	dec	r1
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <__udivmodsi4_loop>
    18d6:	60 95       	com	r22
    18d8:	70 95       	com	r23
    18da:	80 95       	com	r24
    18dc:	90 95       	com	r25
    18de:	9b 01       	movw	r18, r22
    18e0:	ac 01       	movw	r20, r24
    18e2:	bd 01       	movw	r22, r26
    18e4:	cf 01       	movw	r24, r30
    18e6:	08 95       	ret

000018e8 <_exit>:
    18e8:	f8 94       	cli

000018ea <__stop_program>:
    18ea:	ff cf       	rjmp	.-2      	; 0x18ea <__stop_program>
