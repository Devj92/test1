
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001906  0000199a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001906  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800204  00800204  0000199e  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000950  00000000  00000000  000042d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00004c28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001786  00000000  00000000  00004d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003bf  00000000  00000000  000064ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  0000686d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00007200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dc  00000000  00000000  000076c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c79  00000000  00000000  00007ba0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 6e 06 	jmp	0xcdc	; 0xcdc <__vector_25>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_45>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	e6 e0       	ldi	r30, 0x06	; 6
     12a:	f9 e1       	ldi	r31, 0x19	; 25
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 30       	cpi	r26, 0x04	; 4
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	a4 e0       	ldi	r26, 0x04	; 4
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a2 35       	cpi	r26, 0x52	; 82
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 96 08 	call	0x112c	; 0x112c <main>
     150:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
     158:	10 92 38 02 	sts	0x0238, r1
	TCCR4B = 0x00; //stop
     15c:	e1 ea       	ldi	r30, 0xA1	; 161
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
     162:	86 ec       	ldi	r24, 0xC6	; 198
     164:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //Counter lower 8 bit value
     168:	87 e6       	ldi	r24, 0x67	; 103
     16a:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
     16e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
     172:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
     176:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
     17a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
     17e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
     182:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     186:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     18a:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
     18e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
     192:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 83       	st	Z, r24
}
     19a:	08 95       	ret

0000019c <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
     19c:	1f 92       	push	r1
     19e:	0f 92       	push	r0
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	0f 92       	push	r0
     1a4:	11 24       	eor	r1, r1
     1a6:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
     1a8:	80 91 38 02 	lds	r24, 0x0238
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	80 93 38 02 	sts	0x0238, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
     1b2:	86 ec       	ldi	r24, 0xC6	; 198
     1b4:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //reload counter low value
     1b8:	87 e6       	ldi	r24, 0x67	; 103
     1ba:	80 93 a4 00 	sts	0x00A4, r24
}
     1be:	8f 91       	pop	r24
     1c0:	0f 90       	pop	r0
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	0f 90       	pop	r0
     1c6:	1f 90       	pop	r1
     1c8:	18 95       	reti

000001ca <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
     1ca:	f8 94       	cli
	timer4_init();
     1cc:	0e 94 ac 00 	call	0x158	; 0x158 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
     1d6:	78 94       	sei

}
     1d8:	08 95       	ret

000001da <micros>:

int micros(void)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     1e2:	10 91 38 02 	lds	r17, 0x0238
     1e6:	c0 91 a4 00 	lds	r28, 0x00A4
     1ea:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     1ee:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
}

int micros(void)
{
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     1f2:	ce 01       	movw	r24, r28
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	bc 01       	movw	r22, r24
     1fa:	cd 01       	movw	r24, r26
     1fc:	67 56       	subi	r22, 0x67	; 103
     1fe:	76 4c       	sbci	r23, 0xC6	; 198
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	29 e9       	ldi	r18, 0x99	; 153
     206:	39 e3       	ldi	r19, 0x39	; 57
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divmodsi4>
     210:	da 01       	movw	r26, r20
     212:	c9 01       	movw	r24, r18
     214:	81 0f       	add	r24, r17
     216:	91 1d       	adc	r25, r1
     218:	a1 1d       	adc	r26, r1
     21a:	b1 1d       	adc	r27, r1
     21c:	8c 01       	movw	r16, r24
     21e:	9d 01       	movw	r18, r26
     220:	48 ee       	ldi	r20, 0xE8	; 232
     222:	53 e0       	ldi	r21, 0x03	; 3
     224:	04 9f       	mul	r16, r20
     226:	c0 01       	movw	r24, r0
     228:	05 9f       	mul	r16, r21
     22a:	90 0d       	add	r25, r0
     22c:	14 9f       	mul	r17, r20
     22e:	90 0d       	add	r25, r0
     230:	11 24       	eor	r1, r1
	start_timer4();
	return time;

}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	08 95       	ret

0000023c <millis>:
int millis(void)
{
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     242:	10 91 38 02 	lds	r17, 0x0238
     246:	c0 91 a4 00 	lds	r28, 0x00A4
     24a:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     24e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>

}
int millis(void)
{
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     252:	ce 01       	movw	r24, r28
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	67 56       	subi	r22, 0x67	; 103
     25e:	76 4c       	sbci	r23, 0xC6	; 198
     260:	80 40       	sbci	r24, 0x00	; 0
     262:	90 40       	sbci	r25, 0x00	; 0
     264:	29 e9       	ldi	r18, 0x99	; 153
     266:	39 e3       	ldi	r19, 0x39	; 57
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	0e 94 44 0c 	call	0x1888	; 0x1888 <__divmodsi4>
     270:	81 2f       	mov	r24, r17
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	28 0f       	add	r18, r24
     276:	39 1f       	adc	r19, r25
	start_timer4();
	return time;

}
     278:	82 2f       	mov	r24, r18
     27a:	93 2f       	mov	r25, r19
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	08 95       	ret

00000284 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     284:	86 e6       	ldi	r24, 0x66	; 102
     286:	9e e0       	ldi	r25, 0x0E	; 14
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_set_4bit+0x4>
     28c:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     28e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     290:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     292:	80 e3       	ldi	r24, 0x30	; 48
     294:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     296:	42 9a       	sbi	0x08, 2	; 8
     298:	ef ef       	ldi	r30, 0xFF	; 255
     29a:	f7 e4       	ldi	r31, 0x47	; 71
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x18>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_set_4bit+0x1e>
     2a2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2a4:	42 98       	cbi	0x08, 2	; 8
     2a6:	e6 e6       	ldi	r30, 0x66	; 102
     2a8:	fe e0       	ldi	r31, 0x0E	; 14
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_set_4bit+0x26>
     2ae:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2b0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2b4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2b6:	42 9a       	sbi	0x08, 2	; 8
     2b8:	ef ef       	ldi	r30, 0xFF	; 255
     2ba:	f7 e4       	ldi	r31, 0x47	; 71
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_set_4bit+0x38>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_set_4bit+0x3e>
     2c2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2c4:	42 98       	cbi	0x08, 2	; 8
     2c6:	e6 e6       	ldi	r30, 0x66	; 102
     2c8:	fe e0       	ldi	r31, 0x0E	; 14
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_set_4bit+0x46>
     2ce:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2d0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2d2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2d4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2d6:	42 9a       	sbi	0x08, 2	; 8
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
     2da:	97 e4       	ldi	r25, 0x47	; 71
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_set_4bit+0x58>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_set_4bit+0x5e>
     2e2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2e4:	42 98       	cbi	0x08, 2	; 8
     2e6:	e6 e6       	ldi	r30, 0x66	; 102
     2e8:	fe e0       	ldi	r31, 0x0E	; 14
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_set_4bit+0x66>
     2ee:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2f0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2f2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2f8:	42 9a       	sbi	0x08, 2	; 8
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	97 e4       	ldi	r25, 0x47	; 71
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_set_4bit+0x7a>
     302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_set_4bit+0x80>
     304:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     306:	42 98       	cbi	0x08, 2	; 8
}
     308:	08 95       	ret

0000030a <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     30a:	98 b1       	in	r25, 0x08	; 8
     30c:	9f 70       	andi	r25, 0x0F	; 15
     30e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     310:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     312:	28 2f       	mov	r18, r24
     314:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     316:	92 2b       	or	r25, r18
     318:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     31a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     31c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     31e:	42 9a       	sbi	0x08, 2	; 8
     320:	ef ef       	ldi	r30, 0xFF	; 255
     322:	f7 e4       	ldi	r31, 0x47	; 71
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_wr_command+0x1a>
     328:	00 c0       	rjmp	.+0      	; 0x32a <lcd_wr_command+0x20>
     32a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     32c:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     32e:	98 b1       	in	r25, 0x08	; 8
     330:	9f 70       	andi	r25, 0x0F	; 15
     332:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     334:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     336:	82 95       	swap	r24
     338:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     33a:	89 2b       	or	r24, r25
     33c:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     33e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     340:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     342:	42 9a       	sbi	0x08, 2	; 8
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	97 e4       	ldi	r25, 0x47	; 71
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_wr_command+0x3e>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_wr_command+0x44>
     34e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     350:	42 98       	cbi	0x08, 2	; 8
}
     352:	08 95       	ret

00000354 <lcd_init>:
     354:	86 e6       	ldi	r24, 0x66	; 102
     356:	9e e0       	ldi	r25, 0x0E	; 14
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <lcd_init+0x4>
     35c:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     35e:	88 e2       	ldi	r24, 0x28	; 40
     360:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     36a:	86 e0       	ldi	r24, 0x06	; 6
     36c:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     370:	8e e0       	ldi	r24, 0x0E	; 14
     372:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     376:	80 e8       	ldi	r24, 0x80	; 128
     378:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}
     37c:	08 95       	ret

0000037e <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     37e:	98 b1       	in	r25, 0x08	; 8
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     384:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     386:	28 2f       	mov	r18, r24
     388:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     38a:	92 2b       	or	r25, r18
     38c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     38e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     390:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     392:	42 9a       	sbi	0x08, 2	; 8
     394:	ef ef       	ldi	r30, 0xFF	; 255
     396:	f7 e4       	ldi	r31, 0x47	; 71
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_wr_char+0x1a>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_wr_char+0x20>
     39e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3a0:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     3a2:	98 b1       	in	r25, 0x08	; 8
     3a4:	9f 70       	andi	r25, 0x0F	; 15
     3a6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     3a8:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     3aa:	82 95       	swap	r24
     3ac:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     3ae:	89 2b       	or	r24, r25
     3b0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     3b2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3b4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3b6:	42 9a       	sbi	0x08, 2	; 8
     3b8:	8f ef       	ldi	r24, 0xFF	; 255
     3ba:	97 e4       	ldi	r25, 0x47	; 71
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_wr_char+0x3e>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lcd_wr_char+0x44>
     3c2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3c4:	42 98       	cbi	0x08, 2	; 8
}
     3c6:	08 95       	ret

000003c8 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}
     3ce:	08 95       	ret

000003d0 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
	while(*str != '\0')
     3d6:	88 81       	ld	r24, Y
     3d8:	88 23       	and	r24, r24
     3da:	31 f0       	breq	.+12     	; 0x3e8 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     3dc:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     3de:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     3e2:	89 91       	ld	r24, Y+
     3e4:	88 23       	and	r24, r24
     3e6:	d9 f7       	brne	.-10     	; 0x3de <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     3ee:	82 30       	cpi	r24, 0x02	; 2
     3f0:	79 f0       	breq	.+30     	; 0x410 <lcd_cursor+0x22>
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	18 f4       	brcc	.+6      	; 0x3fc <lcd_cursor+0xe>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	c9 f4       	brne	.+50     	; 0x42c <lcd_cursor+0x3e>
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <lcd_cursor+0x18>
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	69 f0       	breq	.+26     	; 0x41a <lcd_cursor+0x2c>
     400:	84 30       	cpi	r24, 0x04	; 4
     402:	a1 f4       	brne	.+40     	; 0x42c <lcd_cursor+0x3e>
     404:	0f c0       	rjmp	.+30     	; 0x424 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     406:	86 2f       	mov	r24, r22
     408:	81 58       	subi	r24, 0x81	; 129
     40a:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
     40e:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     410:	86 2f       	mov	r24, r22
     412:	81 54       	subi	r24, 0x41	; 65
     414:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
     418:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     41a:	86 2f       	mov	r24, r22
     41c:	8d 56       	subi	r24, 0x6D	; 109
     41e:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
     422:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     424:	86 2f       	mov	r24, r22
     426:	8d 52       	subi	r24, 0x2D	; 45
     428:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
     42c:	08 95       	ret

0000042e <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	8a 01       	movw	r16, r20
     438:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     43a:	88 23       	and	r24, r24
     43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0x14>
     43e:	66 23       	and	r22, r22
     440:	19 f4       	brne	.+6      	; 0x448 <lcd_print+0x1a>
	{
		lcd_home();
     442:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_home>
     446:	02 c0       	rjmp	.+4      	; 0x44c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     448:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
	}
	if(digits==5 || flag==1)
     44c:	c5 30       	cpi	r28, 0x05	; 5
     44e:	d1 05       	cpc	r29, r1
     450:	71 f4       	brne	.+28     	; 0x46e <lcd_print+0x40>
	{
		million=value/10000+48;
     452:	c8 01       	movw	r24, r16
     454:	60 e1       	ldi	r22, 0x10	; 16
     456:	77 e2       	ldi	r23, 0x27	; 39
     458:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
     45c:	cb 01       	movw	r24, r22
     45e:	c0 96       	adiw	r24, 0x30	; 48
     460:	90 93 33 02 	sts	0x0233, r25
     464:	80 93 32 02 	sts	0x0232, r24
		lcd_wr_char(million);
     468:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
     46c:	03 c0       	rjmp	.+6      	; 0x474 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     46e:	c4 30       	cpi	r28, 0x04	; 4
     470:	d1 05       	cpc	r29, r1
     472:	b9 f4       	brne	.+46     	; 0x4a2 <lcd_print+0x74>
	{
		temp = value/1000;
     474:	c8 01       	movw	r24, r16
     476:	68 ee       	ldi	r22, 0xE8	; 232
     478:	73 e0       	ldi	r23, 0x03	; 3
     47a:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
     47e:	cb 01       	movw	r24, r22
     480:	70 93 35 02 	sts	0x0235, r23
     484:	60 93 34 02 	sts	0x0234, r22
		thousand = temp%10 + 48;
     488:	6a e0       	ldi	r22, 0x0A	; 10
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
     490:	c0 96       	adiw	r24, 0x30	; 48
     492:	90 93 4d 02 	sts	0x024D, r25
     496:	80 93 4c 02 	sts	0x024C, r24
		lcd_wr_char(thousand);
     49a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     4a2:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     4a4:	c3 30       	cpi	r28, 0x03	; 3
     4a6:	d1 05       	cpc	r29, r1
     4a8:	11 f0       	breq	.+4      	; 0x4ae <lcd_print+0x80>
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	b1 f4       	brne	.+44     	; 0x4da <lcd_print+0xac>
	{
		temp = value/100;
     4ae:	c8 01       	movw	r24, r16
     4b0:	64 e6       	ldi	r22, 0x64	; 100
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
     4b8:	cb 01       	movw	r24, r22
     4ba:	70 93 35 02 	sts	0x0235, r23
     4be:	60 93 34 02 	sts	0x0234, r22
		hundred = temp%10 + 48;
     4c2:	6a e0       	ldi	r22, 0x0A	; 10
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
     4ca:	c0 96       	adiw	r24, 0x30	; 48
     4cc:	90 93 45 02 	sts	0x0245, r25
     4d0:	80 93 44 02 	sts	0x0244, r24
		lcd_wr_char(hundred);
     4d4:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     4da:	c2 30       	cpi	r28, 0x02	; 2
     4dc:	d1 05       	cpc	r29, r1
     4de:	11 f0       	breq	.+4      	; 0x4e4 <lcd_print+0xb6>
     4e0:	81 30       	cpi	r24, 0x01	; 1
     4e2:	b1 f4       	brne	.+44     	; 0x510 <lcd_print+0xe2>
	{
		temp = value/10;
     4e4:	2a e0       	ldi	r18, 0x0A	; 10
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	c8 01       	movw	r24, r16
     4ea:	b9 01       	movw	r22, r18
     4ec:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
     4f0:	cb 01       	movw	r24, r22
     4f2:	70 93 35 02 	sts	0x0235, r23
     4f6:	60 93 34 02 	sts	0x0234, r22
		tens = temp%10 + 48;
     4fa:	b9 01       	movw	r22, r18
     4fc:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
     500:	c0 96       	adiw	r24, 0x30	; 48
     502:	90 93 3e 02 	sts	0x023E, r25
     506:	80 93 3d 02 	sts	0x023D, r24
		lcd_wr_char(tens);
     50a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     510:	c1 30       	cpi	r28, 0x01	; 1
     512:	d1 05       	cpc	r29, r1
     514:	11 f0       	breq	.+4      	; 0x51a <lcd_print+0xec>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	61 f4       	brne	.+24     	; 0x532 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     51a:	c8 01       	movw	r24, r16
     51c:	6a e0       	ldi	r22, 0x0A	; 10
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	0e 94 1d 0c 	call	0x183a	; 0x183a <__udivmodhi4>
     524:	c0 96       	adiw	r24, 0x30	; 48
     526:	90 93 4b 02 	sts	0x024B, r25
     52a:	80 93 4a 02 	sts	0x024A, r24
		lcd_wr_char(unit);
     52e:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	}
	if(digits>5)
     532:	c6 30       	cpi	r28, 0x06	; 6
     534:	d1 05       	cpc	r29, r1
     536:	1c f0       	brlt	.+6      	; 0x53e <lcd_print+0x110>
	{
		lcd_wr_char('E');
     538:	85 e4       	ldi	r24, 0x45	; 69
     53a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	}
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}	
     54e:	08 95       	ret

00000550 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
     550:	87 b1       	in	r24, 0x07	; 7
     552:	87 6f       	ori	r24, 0xF7	; 247
     554:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
     556:	88 b1       	in	r24, 0x08	; 8
     558:	80 78       	andi	r24, 0x80	; 128
     55a:	88 b9       	out	0x08, r24	; 8
}
     55c:	08 95       	ret

0000055e <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
     55e:	ec eb       	ldi	r30, 0xBC	; 188
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
     56a:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
     56e:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	80 83       	st	Z, r24
}
     576:	08 95       	ret

00000578 <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     578:	94 ea       	ldi	r25, 0xA4	; 164
     57a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     57e:	ec eb       	ldi	r30, 0xBC	; 188
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	90 81       	ld	r25, Z
     584:	99 23       	and	r25, r25
     586:	ec f7       	brge	.-6      	; 0x582 <write_byte+0xa>
     588:	ef ef       	ldi	r30, 0xFF	; 255
     58a:	ff e8       	ldi	r31, 0x8F	; 143
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <write_byte+0x14>
     590:	00 c0       	rjmp	.+0      	; 0x592 <write_byte+0x1a>
     592:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
     594:	96 ea       	ldi	r25, 0xA6	; 166
     596:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     59a:	94 e8       	ldi	r25, 0x84	; 132
     59c:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5a0:	ec eb       	ldi	r30, 0xBC	; 188
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	90 81       	ld	r25, Z
     5a6:	99 23       	and	r25, r25
     5a8:	ec f7       	brge	.-6      	; 0x5a4 <write_byte+0x2c>
     5aa:	ef ef       	ldi	r30, 0xFF	; 255
     5ac:	ff e8       	ldi	r31, 0x8F	; 143
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <write_byte+0x36>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <write_byte+0x3c>
     5b4:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     5b6:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     5ba:	94 e8       	ldi	r25, 0x84	; 132
     5bc:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5c0:	ec eb       	ldi	r30, 0xBC	; 188
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	90 81       	ld	r25, Z
     5c6:	99 23       	and	r25, r25
     5c8:	ec f7       	brge	.-6      	; 0x5c4 <write_byte+0x4c>
     5ca:	ef ef       	ldi	r30, 0xFF	; 255
     5cc:	ff e8       	ldi	r31, 0x8F	; 143
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <write_byte+0x56>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <write_byte+0x5c>
     5d4:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     5d6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     5da:	84 e8       	ldi	r24, 0x84	; 132
     5dc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5e0:	ec eb       	ldi	r30, 0xBC	; 188
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	88 23       	and	r24, r24
     5e8:	ec f7       	brge	.-6      	; 0x5e4 <write_byte+0x6c>
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	9f e8       	ldi	r25, 0x8F	; 143
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <write_byte+0x76>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <write_byte+0x7c>
     5f4:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     5f6:	84 e9       	ldi	r24, 0x94	; 148
     5f8:	80 93 bc 00 	sts	0x00BC, r24
}
     5fc:	08 95       	ret

000005fe <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     5fe:	94 ea       	ldi	r25, 0xA4	; 164
     600:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     604:	ec eb       	ldi	r30, 0xBC	; 188
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	90 81       	ld	r25, Z
     60a:	99 23       	and	r25, r25
     60c:	ec f7       	brge	.-6      	; 0x608 <read_byte+0xa>

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
     60e:	96 ea       	ldi	r25, 0xA6	; 166
     610:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     614:	94 e8       	ldi	r25, 0x84	; 132
     616:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     61a:	ec eb       	ldi	r30, 0xBC	; 188
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	90 81       	ld	r25, Z
     620:	99 23       	and	r25, r25
     622:	ec f7       	brge	.-6      	; 0x61e <read_byte+0x20>

 TWDR = address;                                   // send address of register byte want to access register
     624:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     628:	84 e8       	ldi	r24, 0x84	; 132
     62a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     62e:	ec eb       	ldi	r30, 0xBC	; 188
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	ec f7       	brge	.-6      	; 0x632 <read_byte+0x34>
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     638:	84 ea       	ldi	r24, 0xA4	; 164
     63a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <read_byte+0x44>


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
     648:	87 ea       	ldi	r24, 0xA7	; 167
     64a:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     64e:	84 e8       	ldi	r24, 0x84	; 132
     650:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     654:	ec eb       	ldi	r30, 0xBC	; 188
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	88 23       	and	r24, r24
     65c:	ec f7       	brge	.-6      	; 0x658 <read_byte+0x5a>
 
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     65e:	84 e8       	ldi	r24, 0x84	; 132
     660:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     664:	ec eb       	ldi	r30, 0xBC	; 188
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	88 23       	and	r24, r24
     66c:	ec f7       	brge	.-6      	; 0x668 <read_byte+0x6a>
 rtc_recv_data = TWDR;
     66e:	eb eb       	ldi	r30, 0xBB	; 187
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     674:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     676:	94 e8       	ldi	r25, 0x84	; 132
     678:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     67c:	ec eb       	ldi	r30, 0xBC	; 188
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	90 81       	ld	r25, Z
     682:	99 23       	and	r25, r25
     684:	ec f7       	brge	.-6      	; 0x680 <read_byte+0x82>
  
 return(rtc_recv_data);                            // return the read value to called function
}
     686:	08 95       	ret

00000688 <init_devices>:


// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
     688:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
     68a:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_port_config>
 lcd_set_4bit();
     68e:	0e 94 42 01 	call	0x284	; 0x284 <lcd_set_4bit>
 lcd_init();
     692:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_init>
 twi_init();         // configur the I2cC, i.e TWI module 
     696:	0e 94 af 02 	call	0x55e	; 0x55e <twi_init>
 sei();              // re-enable interrupts
     69a:	78 94       	sei
 //all peripherals are now initialized
}
     69c:	08 95       	ret

0000069e <pr_int>:

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	c8 2f       	mov	r28, r24
     6ac:	d6 2f       	mov	r29, r22
     6ae:	8a 01       	movw	r16, r20
     6b0:	79 01       	movw	r14, r18
	if (c<0)
     6b2:	55 23       	and	r21, r21
     6b4:	a4 f4       	brge	.+40     	; 0x6de <pr_int+0x40>
	{
		lcd_cursor(a,b);
     6b6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
		lcd_string("-");
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
     6c2:	6d 2f       	mov	r22, r29
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	a8 01       	movw	r20, r16
     6c8:	11 23       	and	r17, r17
     6ca:	24 f4       	brge	.+8      	; 0x6d4 <pr_int+0x36>
     6cc:	44 27       	eor	r20, r20
     6ce:	55 27       	eor	r21, r21
     6d0:	40 1b       	sub	r20, r16
     6d2:	51 0b       	sbc	r21, r17
     6d4:	8c 2f       	mov	r24, r28
     6d6:	97 01       	movw	r18, r14
     6d8:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
     6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
     6de:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
		lcd_string("+");
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_string>
		lcd_print(a,b+1,c,d);
     6ea:	6d 2f       	mov	r22, r29
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	8c 2f       	mov	r24, r28
     6f0:	a8 01       	movw	r20, r16
     6f2:	97 01       	movw	r18, r14
     6f4:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	}
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	08 95       	ret

00000706 <sign>:
		return (n-65536);
	}
	else
		return n;
		
}
     706:	08 95       	ret

00000708 <init_adxl>:
// Main Programme start here.
//-------------------------------------------------------------------------------
void init_adxl(void)
{   
 
 init_devices();
     708:	0e 94 44 03 	call	0x688	; 0x688 <init_devices>

	write_byte(0x0,0x2D);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	6d e2       	ldi	r22, 0x2D	; 45
     710:	0e 94 bc 02 	call	0x578	; 0x578 <write_byte>
	write_byte(0x8,0x2D);
     714:	88 e0       	ldi	r24, 0x08	; 8
     716:	6d e2       	ldi	r22, 0x2D	; 45
     718:	0e 94 bc 02 	call	0x578	; 0x578 <write_byte>
}
     71c:	08 95       	ret

0000071e <acc_angle>:

int acc_angle(void)
{
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
		int x_acc,y_acc,z_acc;
		//long x,y,z;
		float angle;
 
	  
	   x_byte1 = read_byte(X1);
     72e:	82 e3       	ldi	r24, 0x32	; 50
     730:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
     734:	83 e3       	ldi	r24, 0x33	; 51
     736:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
     73a:	84 e3       	ldi	r24, 0x34	; 52
     73c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
     740:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
     742:	85 e3       	ldi	r24, 0x35	; 53
     744:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
     748:	d8 2f       	mov	r29, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
     74a:	86 e3       	ldi	r24, 0x36	; 54
     74c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
     750:	c8 2f       	mov	r28, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
     752:	87 e3       	ldi	r24, 0x37	; 55
     754:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
     758:	c8 2e       	mov	r12, r24
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
     75a:	3d 2f       	mov	r19, r29
     75c:	20 e0       	ldi	r18, 0x00	; 0
	  y_byte |= y_byte1;
     75e:	80 2f       	mov	r24, r16
     760:	90 e0       	ldi	r25, 0x00	; 0
	  y_acc=sign(y_byte);
     762:	82 2b       	or	r24, r18
     764:	93 2b       	or	r25, r19
     766:	0e 94 83 03 	call	0x706	; 0x706 <sign>
     76a:	8c 01       	movw	r16, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
     76c:	3c 2d       	mov	r19, r12
     76e:	20 e0       	ldi	r18, 0x00	; 0
	  z_byte |= z_byte1;
     770:	8c 2f       	mov	r24, r28
     772:	90 e0       	ldi	r25, 0x00	; 0
	  z_acc=sign(z_byte);
     774:	82 2b       	or	r24, r18
     776:	93 2b       	or	r25, r19
     778:	0e 94 83 03 	call	0x706	; 0x706 <sign>
     77c:	ec 01       	movw	r28, r24
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
     77e:	b8 01       	movw	r22, r16
     780:	88 27       	eor	r24, r24
     782:	77 fd       	sbrc	r23, 7
     784:	80 95       	com	r24
     786:	98 2f       	mov	r25, r24
     788:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatsisf>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	be 01       	movw	r22, r28
     792:	88 27       	eor	r24, r24
     794:	77 fd       	sbrc	r23, 7
     796:	80 95       	com	r24
     798:	98 2f       	mov	r25, r24
     79a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatsisf>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__divsf3>
     7aa:	0e 94 10 0a 	call	0x1420	; 0x1420 <atan>
	  angle *= 1800.0/3.14;
     7ae:	26 ee       	ldi	r18, 0xE6	; 230
     7b0:	3f e4       	ldi	r19, 0x4F	; 79
     7b2:	4f e0       	ldi	r20, 0x0F	; 15
     7b4:	54 e4       	ldi	r21, 0x44	; 68
     7b6:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
	  //pr_int(1,1,angle,3);
	  
	return angle;
     7ba:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fixsfsi>
}
     7be:	86 2f       	mov	r24, r22
     7c0:	97 2f       	mov	r25, r23
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	08 95       	ret

000007d4 <write_byte_gyro>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte_gyro(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     7d4:	94 ea       	ldi	r25, 0xA4	; 164
     7d6:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     7da:	ec eb       	ldi	r30, 0xBC	; 188
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	90 81       	ld	r25, Z
     7e0:	99 23       	and	r25, r25
     7e2:	ec f7       	brge	.-6      	; 0x7de <write_byte_gyro+0xa>
     7e4:	ef ef       	ldi	r30, 0xFF	; 255
     7e6:	ff e8       	ldi	r31, 0x8F	; 143
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <write_byte_gyro+0x14>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <write_byte_gyro+0x1a>
     7ee:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLAVE_W;                                     // load SLA_W into TWDR Register
     7f0:	92 ed       	ldi	r25, 0xD2	; 210
     7f2:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     7f6:	94 e8       	ldi	r25, 0x84	; 132
     7f8:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     7fc:	ec eb       	ldi	r30, 0xBC	; 188
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	90 81       	ld	r25, Z
     802:	99 23       	and	r25, r25
     804:	ec f7       	brge	.-6      	; 0x800 <write_byte_gyro+0x2c>
     806:	ef ef       	ldi	r30, 0xFF	; 255
     808:	ff e8       	ldi	r31, 0x8F	; 143
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <write_byte_gyro+0x36>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <write_byte_gyro+0x3c>
     810:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     812:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     816:	94 e8       	ldi	r25, 0x84	; 132
     818:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     81c:	ec eb       	ldi	r30, 0xBC	; 188
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	90 81       	ld	r25, Z
     822:	99 23       	and	r25, r25
     824:	ec f7       	brge	.-6      	; 0x820 <write_byte_gyro+0x4c>
     826:	ef ef       	ldi	r30, 0xFF	; 255
     828:	ff e8       	ldi	r31, 0x8F	; 143
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <write_byte_gyro+0x56>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <write_byte_gyro+0x5c>
     830:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     832:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     836:	84 e8       	ldi	r24, 0x84	; 132
     838:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     83c:	ec eb       	ldi	r30, 0xBC	; 188
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	88 23       	and	r24, r24
     844:	ec f7       	brge	.-6      	; 0x840 <write_byte_gyro+0x6c>
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	9f e8       	ldi	r25, 0x8F	; 143
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <write_byte_gyro+0x76>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <write_byte_gyro+0x7c>
     850:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     852:	84 e9       	ldi	r24, 0x94	; 148
     854:	80 93 bc 00 	sts	0x00BC, r24
}
     858:	08 95       	ret

0000085a <read_byte_gyro>:
unsigned char read_byte_gyro(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     85a:	94 ea       	ldi	r25, 0xA4	; 164
     85c:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     860:	ec eb       	ldi	r30, 0xBC	; 188
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	90 81       	ld	r25, Z
     866:	99 23       	and	r25, r25
     868:	ec f7       	brge	.-6      	; 0x864 <read_byte_gyro+0xa>
 //_delay_ms(10);

 

 TWDR = SLAVE_W;									   // load SLA_W into TWDR Register
     86a:	92 ed       	ldi	r25, 0xD2	; 210
     86c:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     870:	94 e8       	ldi	r25, 0x84	; 132
     872:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     876:	ec eb       	ldi	r30, 0xBC	; 188
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	90 81       	ld	r25, Z
     87c:	99 23       	and	r25, r25
     87e:	ec f7       	brge	.-6      	; 0x87a <read_byte_gyro+0x20>
 //_delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
     880:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     884:	84 e8       	ldi	r24, 0x84	; 132
     886:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     88a:	ec eb       	ldi	r30, 0xBC	; 188
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	88 23       	and	r24, r24
     892:	ec f7       	brge	.-6      	; 0x88e <read_byte_gyro+0x34>
// _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     894:	84 ea       	ldi	r24, 0xA4	; 164
     896:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     89a:	ec eb       	ldi	r30, 0xBC	; 188
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	88 23       	and	r24, r24
     8a2:	ec f7       	brge	.-6      	; 0x89e <read_byte_gyro+0x44>
 //_delay_ms(10);


 
 TWDR = SLAVE_R;									   // load SLA_R into TWDR Register
     8a4:	83 ed       	ldi	r24, 0xD3	; 211
     8a6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     8aa:	84 e8       	ldi	r24, 0x84	; 132
     8ac:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8b0:	ec eb       	ldi	r30, 0xBC	; 188
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	88 23       	and	r24, r24
     8b8:	ec f7       	brge	.-6      	; 0x8b4 <read_byte_gyro+0x5a>
 //_delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     8ba:	84 e8       	ldi	r24, 0x84	; 132
     8bc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8c0:	ec eb       	ldi	r30, 0xBC	; 188
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	88 23       	and	r24, r24
     8c8:	ec f7       	brge	.-6      	; 0x8c4 <read_byte_gyro+0x6a>
 rtc_recv_data = TWDR;
     8ca:	eb eb       	ldi	r30, 0xBB	; 187
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
 //_delay_ms(10);
 

 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     8d0:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     8d2:	94 e8       	ldi	r25, 0x84	; 132
     8d4:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8d8:	ec eb       	ldi	r30, 0xBC	; 188
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	90 81       	ld	r25, Z
     8de:	99 23       	and	r25, r25
     8e0:	ec f7       	brge	.-6      	; 0x8dc <read_byte_gyro+0x82>
 //_delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
     8e2:	08 95       	ret

000008e4 <init_gyro>:

void init_gyro(void)
{   
 

	 write_byte_gyro(0x0F,0x20);       //Normal mode of control reg.1
     8e4:	8f e0       	ldi	r24, 0x0F	; 15
     8e6:	60 e2       	ldi	r22, 0x20	; 32
     8e8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <write_byte_gyro>
}
     8ec:	08 95       	ret

000008ee <comp_filter>:

//Complementary filter
float comp_filter(float newAngle,  float newRate) 
{   
     8ee:	4f 92       	push	r4
     8f0:	5f 92       	push	r5
     8f2:	6f 92       	push	r6
     8f4:	7f 92       	push	r7
     8f6:	8f 92       	push	r8
     8f8:	9f 92       	push	r9
     8fa:	af 92       	push	r10
     8fc:	bf 92       	push	r11
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	00 d0       	rcall	.+0      	; 0x910 <comp_filter+0x22>
     910:	0f 92       	push	r0
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	29 83       	std	Y+1, r18	; 0x01
     918:	3a 83       	std	Y+2, r19	; 0x02
     91a:	4b 83       	std	Y+3, r20	; 0x03
     91c:	5c 83       	std	Y+4, r21	; 0x04
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     91e:	80 90 2a 02 	lds	r8, 0x022A
     922:	90 90 2b 02 	lds	r9, 0x022B
     926:	a0 90 2c 02 	lds	r10, 0x022C
     92a:	b0 90 2d 02 	lds	r11, 0x022D
     92e:	a5 01       	movw	r20, r10
     930:	94 01       	movw	r18, r8
     932:	0e 94 ab 09 	call	0x1356	; 0x1356 <__subsf3>
     936:	c6 2e       	mov	r12, r22
     938:	d7 2e       	mov	r13, r23
     93a:	f8 2e       	mov	r15, r24
     93c:	e9 2e       	mov	r14, r25
	filterTerm2  += filterTerm0 * dt;
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     93e:	38 2f       	mov	r19, r24
     940:	86 2f       	mov	r24, r22
     942:	9d 2d       	mov	r25, r13
     944:	af 2d       	mov	r26, r15
     946:	be 2d       	mov	r27, r14
     948:	bc 01       	movw	r22, r24
     94a:	cd 01       	movw	r24, r26
     94c:	0c 2d       	mov	r16, r12
     94e:	1d 2d       	mov	r17, r13
     950:	23 2f       	mov	r18, r19
     952:	3b 2f       	mov	r19, r27
     954:	a9 01       	movw	r20, r18
     956:	98 01       	movw	r18, r16
     958:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 ef       	ldi	r20, 0xF0	; 240
     962:	51 e4       	ldi	r21, 0x41	; 65
     964:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     968:	2b 01       	movw	r4, r22
     96a:	3c 01       	movw	r6, r24
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     96c:	80 2f       	mov	r24, r16
     96e:	91 2f       	mov	r25, r17
     970:	af 2d       	mov	r26, r15
     972:	be 2d       	mov	r27, r14
     974:	bc 01       	movw	r22, r24
     976:	cd 01       	movw	r24, r26
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 ef       	ldi	r20, 0xF0	; 240
     97e:	51 e4       	ldi	r21, 0x41	; 65
     980:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 ef       	ldi	r20, 0xF0	; 240
     98a:	51 e4       	ldi	r21, 0x41	; 65
     98c:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
	filterTerm2  += filterTerm0 * dt;
     990:	2a e0       	ldi	r18, 0x0A	; 10
     992:	37 ed       	ldi	r19, 0xD7	; 215
     994:	43 e2       	ldi	r20, 0x23	; 35
     996:	5c e3       	ldi	r21, 0x3C	; 60
     998:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	a9 01       	movw	r20, r18
     9a2:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     9a6:	9b 01       	movw	r18, r22
     9a8:	ac 01       	movw	r20, r24
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     9aa:	c3 01       	movw	r24, r6
     9ac:	b2 01       	movw	r22, r4
     9ae:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	4b 81       	ldd	r20, Y+3	; 0x03
     9b8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ba:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
	filterAngle = (filterTerm1 * dt) + filterAngle;
     9be:	2a e0       	ldi	r18, 0x0A	; 10
     9c0:	37 ed       	ldi	r19, 0xD7	; 215
     9c2:	43 e2       	ldi	r20, 0x23	; 35
     9c4:	5c e3       	ldi	r21, 0x3C	; 60
     9c6:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	c5 01       	movw	r24, r10
     9d0:	b4 01       	movw	r22, r8
     9d2:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     9d6:	26 2f       	mov	r18, r22
     9d8:	37 2f       	mov	r19, r23
     9da:	f8 2f       	mov	r31, r24
     9dc:	e9 2f       	mov	r30, r25
     9de:	46 2f       	mov	r20, r22
     9e0:	57 2f       	mov	r21, r23
     9e2:	68 2f       	mov	r22, r24
     9e4:	79 2f       	mov	r23, r25
     9e6:	40 93 2a 02 	sts	0x022A, r20
     9ea:	50 93 2b 02 	sts	0x022B, r21
     9ee:	60 93 2c 02 	sts	0x022C, r22
     9f2:	70 93 2d 02 	sts	0x022D, r23

	return filterAngle; // This is actually the current angle, but is stored for the next iteration
}
     9f6:	82 2f       	mov	r24, r18
     9f8:	93 2f       	mov	r25, r19
     9fa:	af 2f       	mov	r26, r31
     9fc:	be 2f       	mov	r27, r30
     9fe:	bc 01       	movw	r22, r24
     a00:	cd 01       	movw	r24, r26
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	9f 90       	pop	r9
     a20:	8f 90       	pop	r8
     a22:	7f 90       	pop	r7
     a24:	6f 90       	pop	r6
     a26:	5f 90       	pop	r5
     a28:	4f 90       	pop	r4
     a2a:	08 95       	ret

00000a2c <gyro_Rate>:
//-------------------------------------
// Main Programme start here.
//-------------------------------------------------------------------------------
float gyro_Rate(void)
{   
     a2c:	cf 93       	push	r28
  int16_t x_ang=0;
  int filt_ang=0;
 
	   
	   
	  x_byte1 = read_byte_gyro(XL);
     a2e:	88 e2       	ldi	r24, 0x28	; 40
     a30:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
     a34:	c8 2f       	mov	r28, r24
	  //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte_gyro(XH);
     a36:	89 e2       	ldi	r24, 0x29	; 41
     a38:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
	   //lcd_print(2,1,x_byte2,3);
	   
	   x_byte = x_byte2;   // to print 10 bit integer value on LCD
	   x_byte = (x_byte << 8);
     a3c:	38 2f       	mov	r19, r24
     a3e:	20 e0       	ldi	r18, 0x00	; 0
	   x_byte |= x_byte1;
     a40:	8c 2f       	mov	r24, r28
     a42:	90 e0       	ldi	r25, 0x00	; 0
	   x_ang = sign(x_byte);
     a44:	82 2b       	or	r24, r18
     a46:	93 2b       	or	r25, r19
     a48:	0e 94 83 03 	call	0x706	; 0x706 <sign>
	   x_ang /=100;
     a4c:	64 e6       	ldi	r22, 0x64	; 100
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	0e 94 31 0c 	call	0x1862	; 0x1862 <__divmodhi4>
	   return x_ang;
     a54:	88 27       	eor	r24, r24
     a56:	77 fd       	sbrc	r23, 7
     a58:	80 95       	com	r24
     a5a:	98 2f       	mov	r25, r24
     a5c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatsisf>
}
     a60:	46 2f       	mov	r20, r22
     a62:	57 2f       	mov	r21, r23
     a64:	68 2f       	mov	r22, r24
     a66:	79 2f       	mov	r23, r25
     a68:	cb 01       	movw	r24, r22
     a6a:	ba 01       	movw	r22, r20
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <Compute>:
int para_flag=0;
double error =0;


void Compute()
{
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
	/*How long since we last calculated*/
	//double timeChange = (double)millis();
	
	/*Compute all the working error variables*/
	error = Input - Setpoint;
     a88:	60 91 46 02 	lds	r22, 0x0246
     a8c:	70 91 47 02 	lds	r23, 0x0247
     a90:	80 91 48 02 	lds	r24, 0x0248
     a94:	90 91 49 02 	lds	r25, 0x0249
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e8       	ldi	r20, 0x80	; 128
     a9e:	5f e3       	ldi	r21, 0x3F	; 63
     aa0:	0e 94 ab 09 	call	0x1356	; 0x1356 <__subsf3>
     aa4:	06 2f       	mov	r16, r22
     aa6:	17 2f       	mov	r17, r23
     aa8:	d8 2f       	mov	r29, r24
     aaa:	c9 2f       	mov	r28, r25
     aac:	86 2f       	mov	r24, r22
     aae:	91 2f       	mov	r25, r17
     ab0:	ad 2f       	mov	r26, r29
     ab2:	bc 2f       	mov	r27, r28
     ab4:	80 93 04 02 	sts	0x0204, r24
     ab8:	90 93 05 02 	sts	0x0205, r25
     abc:	a0 93 06 02 	sts	0x0206, r26
     ac0:	b0 93 07 02 	sts	0x0207, r27
	if (error==0)
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	a9 01       	movw	r20, r18
     ace:	0e 94 38 0a 	call	0x1470	; 0x1470 <__cmpsf2>
     ad2:	88 23       	and	r24, r24
     ad4:	59 f4       	brne	.+22     	; 0xaec <Compute+0x7c>
	{
		errSum=0;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	dc 01       	movw	r26, r24
     adc:	80 93 1a 02 	sts	0x021A, r24
     ae0:	90 93 1b 02 	sts	0x021B, r25
     ae4:	a0 93 1c 02 	sts	0x021C, r26
     ae8:	b0 93 1d 02 	sts	0x021D, r27
	}

	errSum += error;//+lastErr+lastErr2+lastErr3;
     aec:	80 2f       	mov	r24, r16
     aee:	91 2f       	mov	r25, r17
     af0:	ad 2f       	mov	r26, r29
     af2:	bc 2f       	mov	r27, r28
     af4:	bc 01       	movw	r22, r24
     af6:	cd 01       	movw	r24, r26
     af8:	20 91 1a 02 	lds	r18, 0x021A
     afc:	30 91 1b 02 	lds	r19, 0x021B
     b00:	40 91 1c 02 	lds	r20, 0x021C
     b04:	50 91 1d 02 	lds	r21, 0x021D
     b08:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     b0c:	e6 2e       	mov	r14, r22
     b0e:	f7 2e       	mov	r15, r23
     b10:	d8 2e       	mov	r13, r24
     b12:	c9 2e       	mov	r12, r25
     b14:	86 2f       	mov	r24, r22
     b16:	9f 2d       	mov	r25, r15
     b18:	ad 2d       	mov	r26, r13
     b1a:	bc 2d       	mov	r27, r12
     b1c:	80 93 1a 02 	sts	0x021A, r24
     b20:	90 93 1b 02 	sts	0x021B, r25
     b24:	a0 93 1c 02 	sts	0x021C, r26
     b28:	b0 93 1d 02 	sts	0x021D, r27
	
	
	double dErr = (error - lastErr);
	
	/*Compute PID Output*/
	Output = kp * error  + ki*errSum + kd*dErr;
     b2c:	80 2f       	mov	r24, r16
     b2e:	91 2f       	mov	r25, r17
     b30:	ad 2f       	mov	r26, r29
     b32:	bc 2f       	mov	r27, r28
     b34:	bc 01       	movw	r22, r24
     b36:	cd 01       	movw	r24, r26
     b38:	20 91 4e 02 	lds	r18, 0x024E
     b3c:	30 91 4f 02 	lds	r19, 0x024F
     b40:	40 91 50 02 	lds	r20, 0x0250
     b44:	50 91 51 02 	lds	r21, 0x0251
     b48:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     b4c:	4b 01       	movw	r8, r22
     b4e:	5c 01       	movw	r10, r24
     b50:	8e 2d       	mov	r24, r14
     b52:	9f 2d       	mov	r25, r15
     b54:	ad 2d       	mov	r26, r13
     b56:	bc 2d       	mov	r27, r12
     b58:	bc 01       	movw	r22, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	20 91 3f 02 	lds	r18, 0x023F
     b60:	30 91 40 02 	lds	r19, 0x0240
     b64:	40 91 41 02 	lds	r20, 0x0241
     b68:	50 91 42 02 	lds	r21, 0x0242
     b6c:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     b70:	9b 01       	movw	r18, r22
     b72:	ac 01       	movw	r20, r24
     b74:	c5 01       	movw	r24, r10
     b76:	b4 01       	movw	r22, r8
     b78:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     b7c:	6b 01       	movw	r12, r22
     b7e:	7c 01       	movw	r14, r24
	{
		errSum = -255;
	}*/
	
	
	double dErr = (error - lastErr);
     b80:	80 2f       	mov	r24, r16
     b82:	91 2f       	mov	r25, r17
     b84:	ad 2f       	mov	r26, r29
     b86:	bc 2f       	mov	r27, r28
     b88:	bc 01       	movw	r22, r24
     b8a:	cd 01       	movw	r24, r26
     b8c:	20 91 16 02 	lds	r18, 0x0216
     b90:	30 91 17 02 	lds	r19, 0x0217
     b94:	40 91 18 02 	lds	r20, 0x0218
     b98:	50 91 19 02 	lds	r21, 0x0219
     b9c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__subsf3>
	
	/*Compute PID Output*/
	Output = kp * error  + ki*errSum + kd*dErr;
     ba0:	20 91 2e 02 	lds	r18, 0x022E
     ba4:	30 91 2f 02 	lds	r19, 0x022F
     ba8:	40 91 30 02 	lds	r20, 0x0230
     bac:	50 91 31 02 	lds	r21, 0x0231
     bb0:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     bb4:	9b 01       	movw	r18, r22
     bb6:	ac 01       	movw	r20, r24
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     bc0:	06 2f       	mov	r16, r22
     bc2:	17 2f       	mov	r17, r23
     bc4:	d8 2f       	mov	r29, r24
     bc6:	c9 2f       	mov	r28, r25
     bc8:	86 2f       	mov	r24, r22
     bca:	91 2f       	mov	r25, r17
     bcc:	ad 2f       	mov	r26, r29
     bce:	bc 2f       	mov	r27, r28
     bd0:	80 93 39 02 	sts	0x0239, r24
     bd4:	90 93 3a 02 	sts	0x023A, r25
     bd8:	a0 93 3b 02 	sts	0x023B, r26
     bdc:	b0 93 3c 02 	sts	0x023C, r27
	
	if (Output >= 255)
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4f e7       	ldi	r20, 0x7F	; 127
     bea:	53 e4       	ldi	r21, 0x43	; 67
     bec:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__gesf2>
     bf0:	88 23       	and	r24, r24
     bf2:	6c f0       	brlt	.+26     	; 0xc0e <Compute+0x19e>
	{
		Output = 255;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	af e7       	ldi	r26, 0x7F	; 127
     bfa:	b3 e4       	ldi	r27, 0x43	; 67
     bfc:	80 93 39 02 	sts	0x0239, r24
     c00:	90 93 3a 02 	sts	0x023A, r25
     c04:	a0 93 3b 02 	sts	0x023B, r26
     c08:	b0 93 3c 02 	sts	0x023C, r27
     c0c:	1a c0       	rjmp	.+52     	; 0xc42 <Compute+0x1d2>
	}
	else if (Output <= -255)
     c0e:	80 2f       	mov	r24, r16
     c10:	91 2f       	mov	r25, r17
     c12:	ad 2f       	mov	r26, r29
     c14:	bc 2f       	mov	r27, r28
     c16:	bc 01       	movw	r22, r24
     c18:	cd 01       	movw	r24, r26
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	4f e7       	ldi	r20, 0x7F	; 127
     c20:	53 ec       	ldi	r21, 0xC3	; 195
     c22:	0e 94 38 0a 	call	0x1470	; 0x1470 <__cmpsf2>
     c26:	18 16       	cp	r1, r24
     c28:	64 f0       	brlt	.+24     	; 0xc42 <Compute+0x1d2>
	{
		Output = -255;
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	af e7       	ldi	r26, 0x7F	; 127
     c30:	b3 ec       	ldi	r27, 0xC3	; 195
     c32:	80 93 39 02 	sts	0x0239, r24
     c36:	90 93 3a 02 	sts	0x023A, r25
     c3a:	a0 93 3b 02 	sts	0x023B, r26
     c3e:	b0 93 3c 02 	sts	0x023C, r27
	}
	
	/*Remember some variables for next time*/
	lastErr3 = lastErr2;
     c42:	80 91 12 02 	lds	r24, 0x0212
     c46:	90 91 13 02 	lds	r25, 0x0213
     c4a:	a0 91 14 02 	lds	r26, 0x0214
     c4e:	b0 91 15 02 	lds	r27, 0x0215
     c52:	80 93 0e 02 	sts	0x020E, r24
     c56:	90 93 0f 02 	sts	0x020F, r25
     c5a:	a0 93 10 02 	sts	0x0210, r26
     c5e:	b0 93 11 02 	sts	0x0211, r27
	lastErr2=lastErr;
     c62:	80 91 16 02 	lds	r24, 0x0216
     c66:	90 91 17 02 	lds	r25, 0x0217
     c6a:	a0 91 18 02 	lds	r26, 0x0218
     c6e:	b0 91 19 02 	lds	r27, 0x0219
     c72:	80 93 12 02 	sts	0x0212, r24
     c76:	90 93 13 02 	sts	0x0213, r25
     c7a:	a0 93 14 02 	sts	0x0214, r26
     c7e:	b0 93 15 02 	sts	0x0215, r27
	lastErr = error;
     c82:	80 91 04 02 	lds	r24, 0x0204
     c86:	90 91 05 02 	lds	r25, 0x0205
     c8a:	a0 91 06 02 	lds	r26, 0x0206
     c8e:	b0 91 07 02 	lds	r27, 0x0207
     c92:	80 93 16 02 	sts	0x0216, r24
     c96:	90 93 17 02 	sts	0x0217, r25
     c9a:	a0 93 18 02 	sts	0x0218, r26
     c9e:	b0 93 19 02 	sts	0x0219, r27
	
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	bf 90       	pop	r11
     cb4:	af 90       	pop	r10
     cb6:	9f 90       	pop	r9
     cb8:	8f 90       	pop	r8
     cba:	08 95       	ret

00000cbc <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     cbc:	e1 ec       	ldi	r30, 0xC1	; 193
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     cc2:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     cc6:	86 e0       	ldi	r24, 0x06	; 6
     cc8:	80 93 c2 00 	sts	0x00C2, r24
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
     ccc:	8f e5       	ldi	r24, 0x5F	; 95
     cce:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     cd2:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     cd6:	88 e9       	ldi	r24, 0x98	; 152
     cd8:	80 83       	st	Z, r24
}
     cda:	08 95       	ret

00000cdc <__vector_25>:

ISR(USART0_RX_vect)
{
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	0b b6       	in	r0, 0x3b	; 59
     ce6:	0f 92       	push	r0
     ce8:	11 24       	eor	r1, r1
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	2f 93       	push	r18
     cf0:	3f 93       	push	r19
     cf2:	4f 93       	push	r20
     cf4:	5f 93       	push	r21
     cf6:	6f 93       	push	r22
     cf8:	7f 93       	push	r23
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
	data = UDR0;
     d06:	80 91 c6 00 	lds	r24, 0x00C6
     d0a:	80 93 43 02 	sts	0x0243, r24
	//UDR0=data;
	if (data == 55)
     d0e:	87 33       	cpi	r24, 0x37	; 55
     d10:	b9 f4       	brne	.+46     	; 0xd40 <__vector_25+0x64>
	{
		para = kp;
     d12:	80 91 4e 02 	lds	r24, 0x024E
     d16:	90 91 4f 02 	lds	r25, 0x024F
     d1a:	a0 91 50 02 	lds	r26, 0x0250
     d1e:	b0 91 51 02 	lds	r27, 0x0251
     d22:	80 93 0a 02 	sts	0x020A, r24
     d26:	90 93 0b 02 	sts	0x020B, r25
     d2a:	a0 93 0c 02 	sts	0x020C, r26
     d2e:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	90 93 09 02 	sts	0x0209, r25
     d3a:	80 93 08 02 	sts	0x0208, r24
     d3e:	31 c0       	rjmp	.+98     	; 0xda2 <__vector_25+0xc6>
		
	}
	else if (data == 56)
     d40:	88 33       	cpi	r24, 0x38	; 56
     d42:	b9 f4       	brne	.+46     	; 0xd72 <__vector_25+0x96>
	{
		para = ki;
     d44:	80 91 3f 02 	lds	r24, 0x023F
     d48:	90 91 40 02 	lds	r25, 0x0240
     d4c:	a0 91 41 02 	lds	r26, 0x0241
     d50:	b0 91 42 02 	lds	r27, 0x0242
     d54:	80 93 0a 02 	sts	0x020A, r24
     d58:	90 93 0b 02 	sts	0x020B, r25
     d5c:	a0 93 0c 02 	sts	0x020C, r26
     d60:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=2;
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	90 93 09 02 	sts	0x0209, r25
     d6c:	80 93 08 02 	sts	0x0208, r24
     d70:	18 c0       	rjmp	.+48     	; 0xda2 <__vector_25+0xc6>
	}
	else if (data == 57)
     d72:	89 33       	cpi	r24, 0x39	; 57
     d74:	b1 f4       	brne	.+44     	; 0xda2 <__vector_25+0xc6>
	{
		para = kd;
     d76:	80 91 2e 02 	lds	r24, 0x022E
     d7a:	90 91 2f 02 	lds	r25, 0x022F
     d7e:	a0 91 30 02 	lds	r26, 0x0230
     d82:	b0 91 31 02 	lds	r27, 0x0231
     d86:	80 93 0a 02 	sts	0x020A, r24
     d8a:	90 93 0b 02 	sts	0x020B, r25
     d8e:	a0 93 0c 02 	sts	0x020C, r26
     d92:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=3;
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 09 02 	sts	0x0209, r25
     d9e:	80 93 08 02 	sts	0x0208, r24
	}
	
	
	if (data==49)
     da2:	80 91 43 02 	lds	r24, 0x0243
     da6:	81 33       	cpi	r24, 0x31	; 49
     da8:	c9 f4       	brne	.+50     	; 0xddc <__vector_25+0x100>
	{
		para++;
     daa:	60 91 0a 02 	lds	r22, 0x020A
     dae:	70 91 0b 02 	lds	r23, 0x020B
     db2:	80 91 0c 02 	lds	r24, 0x020C
     db6:	90 91 0d 02 	lds	r25, 0x020D
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e8       	ldi	r20, 0x80	; 128
     dc0:	5f e3       	ldi	r21, 0x3F	; 63
     dc2:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	80 93 0a 02 	sts	0x020A, r24
     dce:	90 93 0b 02 	sts	0x020B, r25
     dd2:	a0 93 0c 02 	sts	0x020C, r26
     dd6:	b0 93 0d 02 	sts	0x020D, r27
     dda:	86 c0       	rjmp	.+268    	; 0xee8 <__vector_25+0x20c>
	}
	else if (data==50)
     ddc:	82 33       	cpi	r24, 0x32	; 50
     dde:	c9 f4       	brne	.+50     	; 0xe12 <__vector_25+0x136>
	{
		para += 5;
     de0:	60 91 0a 02 	lds	r22, 0x020A
     de4:	70 91 0b 02 	lds	r23, 0x020B
     de8:	80 91 0c 02 	lds	r24, 0x020C
     dec:	90 91 0d 02 	lds	r25, 0x020D
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 ea       	ldi	r20, 0xA0	; 160
     df6:	50 e4       	ldi	r21, 0x40	; 64
     df8:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	80 93 0a 02 	sts	0x020A, r24
     e04:	90 93 0b 02 	sts	0x020B, r25
     e08:	a0 93 0c 02 	sts	0x020C, r26
     e0c:	b0 93 0d 02 	sts	0x020D, r27
     e10:	6b c0       	rjmp	.+214    	; 0xee8 <__vector_25+0x20c>
	}
	else if (data==52)
     e12:	84 33       	cpi	r24, 0x34	; 52
     e14:	c9 f4       	brne	.+50     	; 0xe48 <__vector_25+0x16c>
	{
		para--;
     e16:	60 91 0a 02 	lds	r22, 0x020A
     e1a:	70 91 0b 02 	lds	r23, 0x020B
     e1e:	80 91 0c 02 	lds	r24, 0x020C
     e22:	90 91 0d 02 	lds	r25, 0x020D
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e8       	ldi	r20, 0x80	; 128
     e2c:	5f e3       	ldi	r21, 0x3F	; 63
     e2e:	0e 94 ab 09 	call	0x1356	; 0x1356 <__subsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	80 93 0a 02 	sts	0x020A, r24
     e3a:	90 93 0b 02 	sts	0x020B, r25
     e3e:	a0 93 0c 02 	sts	0x020C, r26
     e42:	b0 93 0d 02 	sts	0x020D, r27
     e46:	50 c0       	rjmp	.+160    	; 0xee8 <__vector_25+0x20c>
	}
	else if (data==53)
     e48:	85 33       	cpi	r24, 0x35	; 53
     e4a:	c9 f4       	brne	.+50     	; 0xe7e <__vector_25+0x1a2>
	{
		para -= 5;
     e4c:	60 91 0a 02 	lds	r22, 0x020A
     e50:	70 91 0b 02 	lds	r23, 0x020B
     e54:	80 91 0c 02 	lds	r24, 0x020C
     e58:	90 91 0d 02 	lds	r25, 0x020D
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 ea       	ldi	r20, 0xA0	; 160
     e62:	50 e4       	ldi	r21, 0x40	; 64
     e64:	0e 94 ab 09 	call	0x1356	; 0x1356 <__subsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	80 93 0a 02 	sts	0x020A, r24
     e70:	90 93 0b 02 	sts	0x020B, r25
     e74:	a0 93 0c 02 	sts	0x020C, r26
     e78:	b0 93 0d 02 	sts	0x020D, r27
     e7c:	35 c0       	rjmp	.+106    	; 0xee8 <__vector_25+0x20c>
	}
	else if (data == 51)
     e7e:	83 33       	cpi	r24, 0x33	; 51
     e80:	c9 f4       	brne	.+50     	; 0xeb4 <__vector_25+0x1d8>
	{
		para += 0.1;
     e82:	60 91 0a 02 	lds	r22, 0x020A
     e86:	70 91 0b 02 	lds	r23, 0x020B
     e8a:	80 91 0c 02 	lds	r24, 0x020C
     e8e:	90 91 0d 02 	lds	r25, 0x020D
     e92:	2d ec       	ldi	r18, 0xCD	; 205
     e94:	3c ec       	ldi	r19, 0xCC	; 204
     e96:	4c ec       	ldi	r20, 0xCC	; 204
     e98:	5d e3       	ldi	r21, 0x3D	; 61
     e9a:	0e 94 ac 09 	call	0x1358	; 0x1358 <__addsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	80 93 0a 02 	sts	0x020A, r24
     ea6:	90 93 0b 02 	sts	0x020B, r25
     eaa:	a0 93 0c 02 	sts	0x020C, r26
     eae:	b0 93 0d 02 	sts	0x020D, r27
     eb2:	1a c0       	rjmp	.+52     	; 0xee8 <__vector_25+0x20c>
	}
	else if (data == 54)
     eb4:	86 33       	cpi	r24, 0x36	; 54
     eb6:	c1 f4       	brne	.+48     	; 0xee8 <__vector_25+0x20c>
	{
		para -=0.1;
     eb8:	60 91 0a 02 	lds	r22, 0x020A
     ebc:	70 91 0b 02 	lds	r23, 0x020B
     ec0:	80 91 0c 02 	lds	r24, 0x020C
     ec4:	90 91 0d 02 	lds	r25, 0x020D
     ec8:	2d ec       	ldi	r18, 0xCD	; 205
     eca:	3c ec       	ldi	r19, 0xCC	; 204
     ecc:	4c ec       	ldi	r20, 0xCC	; 204
     ece:	5d e3       	ldi	r21, 0x3D	; 61
     ed0:	0e 94 ab 09 	call	0x1356	; 0x1356 <__subsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	80 93 0a 02 	sts	0x020A, r24
     edc:	90 93 0b 02 	sts	0x020B, r25
     ee0:	a0 93 0c 02 	sts	0x020C, r26
     ee4:	b0 93 0d 02 	sts	0x020D, r27
	}
	
	
	
	if (para_flag == 1)
     ee8:	80 91 08 02 	lds	r24, 0x0208
     eec:	90 91 09 02 	lds	r25, 0x0209
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	91 05       	cpc	r25, r1
     ef4:	11 f5       	brne	.+68     	; 0xf3a <__vector_25+0x25e>
	{
		kp = para;
     ef6:	60 91 0a 02 	lds	r22, 0x020A
     efa:	70 91 0b 02 	lds	r23, 0x020B
     efe:	80 91 0c 02 	lds	r24, 0x020C
     f02:	90 91 0d 02 	lds	r25, 0x020D
     f06:	60 93 4e 02 	sts	0x024E, r22
     f0a:	70 93 4f 02 	sts	0x024F, r23
     f0e:	80 93 50 02 	sts	0x0250, r24
     f12:	90 93 51 02 	sts	0x0251, r25
		lcd_print(1,1,kp*10,4);
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	51 e4       	ldi	r21, 0x41	; 65
     f1e:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     f22:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
     f26:	8b 01       	movw	r16, r22
     f28:	9c 01       	movw	r18, r24
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	a8 01       	movw	r20, r16
     f30:	24 e0       	ldi	r18, 0x04	; 4
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
     f38:	49 c0       	rjmp	.+146    	; 0xfcc <__vector_25+0x2f0>
	}
	else if (para_flag == 2)
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	91 05       	cpc	r25, r1
     f3e:	11 f5       	brne	.+68     	; 0xf84 <__vector_25+0x2a8>
	{
		ki = para;
     f40:	60 91 0a 02 	lds	r22, 0x020A
     f44:	70 91 0b 02 	lds	r23, 0x020B
     f48:	80 91 0c 02 	lds	r24, 0x020C
     f4c:	90 91 0d 02 	lds	r25, 0x020D
     f50:	60 93 3f 02 	sts	0x023F, r22
     f54:	70 93 40 02 	sts	0x0240, r23
     f58:	80 93 41 02 	sts	0x0241, r24
     f5c:	90 93 42 02 	sts	0x0242, r25
		lcd_print(1,6,ki*10,4);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     f6c:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
     f70:	8b 01       	movw	r16, r22
     f72:	9c 01       	movw	r18, r24
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	66 e0       	ldi	r22, 0x06	; 6
     f78:	a8 01       	movw	r20, r16
     f7a:	24 e0       	ldi	r18, 0x04	; 4
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
     f82:	24 c0       	rjmp	.+72     	; 0xfcc <__vector_25+0x2f0>
	}
	else if (para_flag == 3)
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	91 05       	cpc	r25, r1
     f88:	09 f5       	brne	.+66     	; 0xfcc <__vector_25+0x2f0>
	{
		kd = para;
     f8a:	60 91 0a 02 	lds	r22, 0x020A
     f8e:	70 91 0b 02 	lds	r23, 0x020B
     f92:	80 91 0c 02 	lds	r24, 0x020C
     f96:	90 91 0d 02 	lds	r25, 0x020D
     f9a:	60 93 2e 02 	sts	0x022E, r22
     f9e:	70 93 2f 02 	sts	0x022F, r23
     fa2:	80 93 30 02 	sts	0x0230, r24
     fa6:	90 93 31 02 	sts	0x0231, r25
		lcd_print(1,11,kd*10,4);
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
     fb6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
     fba:	8b 01       	movw	r16, r22
     fbc:	9c 01       	movw	r18, r24
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	6b e0       	ldi	r22, 0x0B	; 11
     fc2:	a8 01       	movw	r20, r16
     fc4:	24 e0       	ldi	r18, 0x04	; 4
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	}
	
}
     fcc:	ff 91       	pop	r31
     fce:	ef 91       	pop	r30
     fd0:	bf 91       	pop	r27
     fd2:	af 91       	pop	r26
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	7f 91       	pop	r23
     fda:	6f 91       	pop	r22
     fdc:	5f 91       	pop	r21
     fde:	4f 91       	pop	r20
     fe0:	3f 91       	pop	r19
     fe2:	2f 91       	pop	r18
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	0f 90       	pop	r0
     ff2:	1f 90       	pop	r1
     ff4:	18 95       	reti

00000ff6 <motion_pin_config>:



void motion_pin_config (void)
{
	DDRL = DDRL | 0xE4;    //set direction of the PORTL2.5,6,7 pins as output
     ff6:	aa e0       	ldi	r26, 0x0A	; 10
     ff8:	b1 e0       	ldi	r27, 0x01	; 1
     ffa:	8c 91       	ld	r24, X
     ffc:	84 6e       	ori	r24, 0xE4	; 228
     ffe:	8c 93       	st	X, r24
	PORTL = PORTL & 0x18;  //set initial value of the PORTL2.5,6,7 pins to logic 0
    1000:	eb e0       	ldi	r30, 0x0B	; 11
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	80 81       	ld	r24, Z
    1006:	88 71       	andi	r24, 0x18	; 24
    1008:	80 83       	st	Z, r24
	DDRL = DDRL | 0x18;    //Setting PL3 and PL4 pins as output for PWM generation
    100a:	8c 91       	ld	r24, X
    100c:	88 61       	ori	r24, 0x18	; 24
    100e:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18;  //PL3 and PL4 pins are for velocity control using PWM
    1010:	80 81       	ld	r24, Z
    1012:	88 61       	ori	r24, 0x18	; 24
    1014:	80 83       	st	Z, r24
}
    1016:	08 95       	ret

00001018 <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
    1018:	0e 94 fb 07 	call	0xff6	; 0xff6 <motion_pin_config>
}
    101c:	08 95       	ret

0000101e <timer5_init>:
// TIMER5 initialize - prescale:1024
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// timer5 value: 56.250Hz
void timer5_init(void)
{
	TCCR5B = 0x00; //stop
    101e:	e1 e2       	ldi	r30, 0x21	; 33
    1020:	f1 e0       	ldi	r31, 0x01	; 1
    1022:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //setup
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
    1030:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
    1034:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    1038:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
    103c:	80 93 2a 01 	sts	0x012A, r24
	TCCR5A = 0xA1;
    1040:	81 ea       	ldi	r24, 0xA1	; 161
    1042:	80 93 20 01 	sts	0x0120, r24
	TCCR5C = 0x00;
    1046:	10 92 22 01 	sts	0x0122, r1
	TCCR5B = 0x0D; //start Timer
    104a:	8d e0       	ldi	r24, 0x0D	; 13
    104c:	80 83       	st	Z, r24
}
    104e:	08 95       	ret

00001050 <set_PWM_value>:

// Function for robot velocity control
void set_PWM_value(unsigned char value) 	//set 8 bit PWM value
{
	OCR5AH = 0x00;
    1050:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = value;
    1054:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    1058:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = value;
    105c:	80 93 2a 01 	sts	0x012A, r24
}
    1060:	08 95       	ret

00001062 <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortLRestore = 0;

	PortLRestore = PORTL; 			// reading the PORTL's original status
    1062:	eb e0       	ldi	r30, 0x0B	; 11
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	90 81       	ld	r25, Z
	PortLRestore &= 0x18; 			// setting lower direction nibbel to 0
    1068:	98 71       	andi	r25, 0x18	; 24
	PortLRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTL status
    106a:	89 2b       	or	r24, r25
	PORTL = PortLRestore; 			// setting the command to the port
    106c:	80 83       	st	Z, r24
}
    106e:	08 95       	ret

00001070 <forward>:

void forward (void) 		//both inputs forward
{
	motion_set(0xA0);
    1070:	80 ea       	ldi	r24, 0xA0	; 160
    1072:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    1076:	08 95       	ret

00001078 <back>:

void back (void) 			//both inputs backward
{
	motion_set(0x44);
    1078:	84 e4       	ldi	r24, 0x44	; 68
    107a:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    107e:	08 95       	ret

00001080 <left>:

void left (void) 			//input12 backward, input34 forward
{
	motion_set(0x84);
    1080:	84 e8       	ldi	r24, 0x84	; 132
    1082:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    1086:	08 95       	ret

00001088 <right>:



void right (void) 			//input34 backward, input12 forward
{
	motion_set(0x60);
    1088:	80 e6       	ldi	r24, 0x60	; 96
    108a:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    108e:	08 95       	ret

00001090 <soft_left>:

void soft_left (void) 		//input12 stationary, input34 forward
{
	motion_set(0x80);
    1090:	80 e8       	ldi	r24, 0x80	; 128
    1092:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    1096:	08 95       	ret

00001098 <soft_right>:

void soft_right (void)      //input12 forward, input34 stationary
{
	motion_set(0x20);
    1098:	80 e2       	ldi	r24, 0x20	; 32
    109a:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    109e:	08 95       	ret

000010a0 <soft_left_2>:

void soft_left_2 (void)     //input12 backward, input34 stationary
{
	motion_set(0x40);
    10a0:	80 e4       	ldi	r24, 0x40	; 64
    10a2:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    10a6:	08 95       	ret

000010a8 <soft_right_2>:

void soft_right_2 (void)    //input12 stationary, input34 backward
{
	motion_set(0x04);
    10a8:	84 e0       	ldi	r24, 0x04	; 4
    10aa:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    10ae:	08 95       	ret

000010b0 <stop>:

void stop (void)            // both input stationary
{
	motion_set(0x00);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	0e 94 31 08 	call	0x1062	; 0x1062 <motion_set>
}
    10b6:	08 95       	ret

000010b8 <init_devices1>:

void init_devices1 (void)
{
	cli(); //Clears the global interrupts
    10b8:	f8 94       	cli
	
	lcd_port_config();  // configure the LCD port
    10ba:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_port_config>
	lcd_set_4bit();
    10be:	0e 94 42 01 	call	0x284	; 0x284 <lcd_set_4bit>
	lcd_init();
    10c2:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_init>
	port_init();
    10c6:	0e 94 0c 08 	call	0x1018	; 0x1018 <port_init>
	timer5_init();
    10ca:	0e 94 0f 08 	call	0x101e	; 0x101e <timer5_init>
	sei(); //Enables the global interrupts
    10ce:	78 94       	sei
}
    10d0:	08 95       	ret

000010d2 <SetTunings>:

void SetTunings(double Kp, double Ki, double Kd)
{
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	4b 01       	movw	r8, r22
    10e4:	5c 01       	movw	r10, r24
    10e6:	da 01       	movw	r26, r20
    10e8:	c9 01       	movw	r24, r18
	kp = Kp;
    10ea:	80 92 4e 02 	sts	0x024E, r8
    10ee:	90 92 4f 02 	sts	0x024F, r9
    10f2:	a0 92 50 02 	sts	0x0250, r10
    10f6:	b0 92 51 02 	sts	0x0251, r11
	ki = Ki;
    10fa:	80 93 3f 02 	sts	0x023F, r24
    10fe:	90 93 40 02 	sts	0x0240, r25
    1102:	a0 93 41 02 	sts	0x0241, r26
    1106:	b0 93 42 02 	sts	0x0242, r27
	kd = Kd;
    110a:	e0 92 2e 02 	sts	0x022E, r14
    110e:	f0 92 2f 02 	sts	0x022F, r15
    1112:	00 93 30 02 	sts	0x0230, r16
    1116:	10 93 31 02 	sts	0x0231, r17
}
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	bf 90       	pop	r11
    1124:	af 90       	pop	r10
    1126:	9f 90       	pop	r9
    1128:	8f 90       	pop	r8
    112a:	08 95       	ret

0000112c <main>:
{
	double acc_Angle;
	int gyro_Angle;
	int filt_Angle;
	unsigned int pwm_value;
	init_adxl();
    112c:	0e 94 84 03 	call	0x708	; 0x708 <init_adxl>
	init_gyro();
    1130:	0e 94 72 04 	call	0x8e4	; 0x8e4 <init_gyro>
	init_devices1();
    1134:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <init_devices1>
	uart0_init(); //Initailize UART1 for serial communiaction
    1138:	0e 94 5e 06 	call	0xcbc	; 0xcbc <uart0_init>
	//start_timer4();
	
	SetTunings(11,1.8,0);
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	80 e3       	ldi	r24, 0x30	; 48
    1142:	91 e4       	ldi	r25, 0x41	; 65
    1144:	26 e6       	ldi	r18, 0x66	; 102
    1146:	36 e6       	ldi	r19, 0x66	; 102
    1148:	46 ee       	ldi	r20, 0xE6	; 230
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0f 2e       	mov	r0, r31
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	ef 2e       	mov	r14, r31
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	ff 2e       	mov	r15, r31
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	0f 2f       	mov	r16, r31
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	1f 2f       	mov	r17, r31
    115e:	f0 2d       	mov	r31, r0
    1160:	0e 94 69 08 	call	0x10d2	; 0x10d2 <SetTunings>
	lcd_print(1,1,kp*10,4);
    1164:	60 91 4e 02 	lds	r22, 0x024E
    1168:	70 91 4f 02 	lds	r23, 0x024F
    116c:	80 91 50 02 	lds	r24, 0x0250
    1170:	90 91 51 02 	lds	r25, 0x0251
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e2       	ldi	r20, 0x20	; 32
    117a:	51 e4       	ldi	r21, 0x41	; 65
    117c:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
    1180:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
    1184:	8b 01       	movw	r16, r22
    1186:	9c 01       	movw	r18, r24
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	61 e0       	ldi	r22, 0x01	; 1
    118c:	a8 01       	movw	r20, r16
    118e:	24 e0       	ldi	r18, 0x04	; 4
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	lcd_print(1,6,ki*10,4);
    1196:	60 91 3f 02 	lds	r22, 0x023F
    119a:	70 91 40 02 	lds	r23, 0x0240
    119e:	80 91 41 02 	lds	r24, 0x0241
    11a2:	90 91 42 02 	lds	r25, 0x0242
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e2       	ldi	r20, 0x20	; 32
    11ac:	51 e4       	ldi	r21, 0x41	; 65
    11ae:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
    11b2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
    11b6:	8b 01       	movw	r16, r22
    11b8:	9c 01       	movw	r18, r24
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	66 e0       	ldi	r22, 0x06	; 6
    11be:	a8 01       	movw	r20, r16
    11c0:	24 e0       	ldi	r18, 0x04	; 4
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	lcd_print(1,11,kd*10,4);
    11c8:	60 91 2e 02 	lds	r22, 0x022E
    11cc:	70 91 2f 02 	lds	r23, 0x022F
    11d0:	80 91 30 02 	lds	r24, 0x0230
    11d4:	90 91 31 02 	lds	r25, 0x0231
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e2       	ldi	r20, 0x20	; 32
    11de:	51 e4       	ldi	r21, 0x41	; 65
    11e0:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
    11e4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
    11e8:	8b 01       	movw	r16, r22
    11ea:	9c 01       	movw	r18, r24
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	6b e0       	ldi	r22, 0x0B	; 11
    11f0:	a8 01       	movw	r20, r16
    11f2:	24 e0       	ldi	r18, 0x04	; 4
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
			//set_PWM_value(min(Output*Output,255));
			pwm_value = (-Output);
			if(pwm_value>=255)
			{
				
				pwm_value=255;
    11fa:	0f 2e       	mov	r0, r31
    11fc:	ff ef       	ldi	r31, 0xFF	; 255
    11fe:	6f 2e       	mov	r6, r31
    1200:	77 24       	eor	r7, r7
    1202:	f0 2d       	mov	r31, r0
		
		//_delay_ms(40); 
		//pr_int(2,1,Output,3);
		//UDR0=0xFF;
		//UDR0=0xFE;
		UDR0=(int8_t)(filt_Angle+100);
    1204:	06 ec       	ldi	r16, 0xC6	; 198
    1206:	10 e0       	ldi	r17, 0x00	; 0
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();
    1208:	0e 94 8f 03 	call	0x71e	; 0x71e <acc_angle>
    120c:	6c 01       	movw	r12, r24
		//pr_int(2,1,acc_Angle,3);
		gyro_Angle=gyro_Rate();
    120e:	0e 94 16 05 	call	0xa2c	; 0xa2c <gyro_Rate>
    1212:	4b 01       	movw	r8, r22
    1214:	5c 01       	movw	r10, r24
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();
    1216:	b6 01       	movw	r22, r12
    1218:	88 27       	eor	r24, r24
    121a:	77 fd       	sbrc	r23, 7
    121c:	80 95       	com	r24
    121e:	98 2f       	mov	r25, r24
    1220:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatsisf>
    1224:	2d ec       	ldi	r18, 0xCD	; 205
    1226:	3c ec       	ldi	r19, 0xCC	; 204
    1228:	4c ec       	ldi	r20, 0xCC	; 204
    122a:	5d e3       	ldi	r21, 0x3D	; 61
    122c:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
    1230:	6b 01       	movw	r12, r22
    1232:	7c 01       	movw	r14, r24
		//pr_int(2,1,acc_Angle,3);
		gyro_Angle=gyro_Rate();
    1234:	c5 01       	movw	r24, r10
    1236:	b4 01       	movw	r22, r8
    1238:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fixsfsi>
		filt_Angle=comp_filter(acc_Angle,gyro_Angle);
    123c:	88 27       	eor	r24, r24
    123e:	77 fd       	sbrc	r23, 7
    1240:	80 95       	com	r24
    1242:	98 2f       	mov	r25, r24
    1244:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatsisf>
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	c7 01       	movw	r24, r14
    124e:	b6 01       	movw	r22, r12
    1250:	0e 94 77 04 	call	0x8ee	; 0x8ee <comp_filter>
    1254:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fixsfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	ec 01       	movw	r28, r24
		//UDR0=(int8_t)acc_angle();
		
		
		
		Input=filt_Angle;
    125e:	be 01       	movw	r22, r28
    1260:	88 27       	eor	r24, r24
    1262:	77 fd       	sbrc	r23, 7
    1264:	80 95       	com	r24
    1266:	98 2f       	mov	r25, r24
    1268:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__floatsisf>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	80 93 46 02 	sts	0x0246, r24
    1274:	90 93 47 02 	sts	0x0247, r25
    1278:	a0 93 48 02 	sts	0x0248, r26
    127c:	b0 93 49 02 	sts	0x0249, r27
		//pr_int(1,1,Input,3);
		if (error*lastErr < 0)
    1280:	60 91 04 02 	lds	r22, 0x0204
    1284:	70 91 05 02 	lds	r23, 0x0205
    1288:	80 91 06 02 	lds	r24, 0x0206
    128c:	90 91 07 02 	lds	r25, 0x0207
    1290:	20 91 16 02 	lds	r18, 0x0216
    1294:	30 91 17 02 	lds	r19, 0x0217
    1298:	40 91 18 02 	lds	r20, 0x0218
    129c:	50 91 19 02 	lds	r21, 0x0219
    12a0:	0e 94 b7 0b 	call	0x176e	; 0x176e <__mulsf3>
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	0e 94 38 0a 	call	0x1470	; 0x1470 <__cmpsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	44 f4       	brge	.+16     	; 0x12c2 <main+0x196>
		{
			stop();
    12b2:	0e 94 58 08 	call	0x10b0	; 0x10b0 <stop>
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	97 e4       	ldi	r25, 0x47	; 71
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <main+0x18e>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <main+0x194>
    12c0:	00 00       	nop
			_delay_ms(5);
		}
		Compute();
    12c2:	0e 94 38 05 	call	0xa70	; 0xa70 <Compute>
		if (Output>0)
    12c6:	c0 90 39 02 	lds	r12, 0x0239
    12ca:	d0 90 3a 02 	lds	r13, 0x023A
    12ce:	e0 90 3b 02 	lds	r14, 0x023B
    12d2:	f0 90 3c 02 	lds	r15, 0x023C
    12d6:	c7 01       	movw	r24, r14
    12d8:	b6 01       	movw	r22, r12
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	a9 01       	movw	r20, r18
    12e0:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__gesf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	7c f4       	brge	.+30     	; 0x1306 <main+0x1da>
		{
			//set_PWM_value(min((Output*Output),255));
			pwm_value = (Output);
    12e8:	c7 01       	movw	r24, r14
    12ea:	b6 01       	movw	r22, r12
    12ec:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    12f4:	8f 3f       	cpi	r24, 0xFF	; 255
    12f6:	91 05       	cpc	r25, r1
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <main+0x1d0>
			{
				
				pwm_value=255;
    12fa:	c3 01       	movw	r24, r6
				//_delay_ms(100);
			}
			
				
			//pr_int(2,1,pwm_value,3);
			set_PWM_value(pwm_value);
    12fc:	0e 94 28 08 	call	0x1050	; 0x1050 <set_PWM_value>
			forward();
    1300:	0e 94 38 08 	call	0x1070	; 0x1070 <forward>
    1304:	24 c0       	rjmp	.+72     	; 0x134e <main+0x222>
			//_delay_ms(10);
			//pwm_value=0;
		}
		else if(Output<0)
    1306:	c7 01       	movw	r24, r14
    1308:	b6 01       	movw	r22, r12
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	0e 94 38 0a 	call	0x1470	; 0x1470 <__cmpsf2>
    1314:	88 23       	and	r24, r24
    1316:	84 f4       	brge	.+32     	; 0x1338 <main+0x20c>
		{
			//set_PWM_value(min(Output*Output,255));
			pwm_value = (-Output);
    1318:	c7 01       	movw	r24, r14
    131a:	b6 01       	movw	r22, r12
    131c:	90 58       	subi	r25, 0x80	; 128
    131e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    1326:	8f 3f       	cpi	r24, 0xFF	; 255
    1328:	91 05       	cpc	r25, r1
    132a:	08 f0       	brcs	.+2      	; 0x132e <main+0x202>
			{
				
				pwm_value=255;
    132c:	c3 01       	movw	r24, r6
				//_delay_ms(100);
			}
			
				
			//pr_int(2,6,pwm_value,3);
			set_PWM_value(pwm_value);
    132e:	0e 94 28 08 	call	0x1050	; 0x1050 <set_PWM_value>
			back();
    1332:	0e 94 3c 08 	call	0x1078	; 0x1078 <back>
    1336:	0b c0       	rjmp	.+22     	; 0x134e <main+0x222>
			//_delay_ms(10);
			//pwm_value=0;
		}
		else if(Output==0)
    1338:	c7 01       	movw	r24, r14
    133a:	b6 01       	movw	r22, r12
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	a9 01       	movw	r20, r18
    1342:	0e 94 38 0a 	call	0x1470	; 0x1470 <__cmpsf2>
    1346:	88 23       	and	r24, r24
    1348:	11 f4       	brne	.+4      	; 0x134e <main+0x222>
		{
			stop();
    134a:	0e 94 58 08 	call	0x10b0	; 0x10b0 <stop>
		
		//_delay_ms(40); 
		//pr_int(2,1,Output,3);
		//UDR0=0xFF;
		//UDR0=0xFE;
		UDR0=(int8_t)(filt_Angle+100);
    134e:	cc 59       	subi	r28, 0x9C	; 156
    1350:	f8 01       	movw	r30, r16
    1352:	c0 83       	st	Z, r28
		int8_t op=(Output/2)+127;
		//UDR0=op;
		
		//UDR0=(Output/2)+127;
	}
    1354:	59 cf       	rjmp	.-334    	; 0x1208 <main+0xdc>

00001356 <__subsf3>:
    1356:	50 58       	subi	r21, 0x80	; 128

00001358 <__addsf3>:
    1358:	bb 27       	eor	r27, r27
    135a:	aa 27       	eor	r26, r26
    135c:	0e d0       	rcall	.+28     	; 0x137a <__addsf3x>
    135e:	c2 c1       	rjmp	.+900    	; 0x16e4 <__fp_round>
    1360:	b3 d1       	rcall	.+870    	; 0x16c8 <__fp_pscA>
    1362:	30 f0       	brcs	.+12     	; 0x1370 <__addsf3+0x18>
    1364:	b8 d1       	rcall	.+880    	; 0x16d6 <__fp_pscB>
    1366:	20 f0       	brcs	.+8      	; 0x1370 <__addsf3+0x18>
    1368:	31 f4       	brne	.+12     	; 0x1376 <__addsf3+0x1e>
    136a:	9f 3f       	cpi	r25, 0xFF	; 255
    136c:	11 f4       	brne	.+4      	; 0x1372 <__addsf3+0x1a>
    136e:	1e f4       	brtc	.+6      	; 0x1376 <__addsf3+0x1e>
    1370:	83 c1       	rjmp	.+774    	; 0x1678 <__fp_nan>
    1372:	0e f4       	brtc	.+2      	; 0x1376 <__addsf3+0x1e>
    1374:	e0 95       	com	r30
    1376:	e7 fb       	bst	r30, 7
    1378:	79 c1       	rjmp	.+754    	; 0x166c <__fp_inf>

0000137a <__addsf3x>:
    137a:	e9 2f       	mov	r30, r25
    137c:	c4 d1       	rcall	.+904    	; 0x1706 <__fp_split3>
    137e:	80 f3       	brcs	.-32     	; 0x1360 <__addsf3+0x8>
    1380:	ba 17       	cp	r27, r26
    1382:	62 07       	cpc	r22, r18
    1384:	73 07       	cpc	r23, r19
    1386:	84 07       	cpc	r24, r20
    1388:	95 07       	cpc	r25, r21
    138a:	18 f0       	brcs	.+6      	; 0x1392 <__addsf3x+0x18>
    138c:	71 f4       	brne	.+28     	; 0x13aa <__addsf3x+0x30>
    138e:	9e f5       	brtc	.+102    	; 0x13f6 <__addsf3x+0x7c>
    1390:	dc c1       	rjmp	.+952    	; 0x174a <__fp_zero>
    1392:	0e f4       	brtc	.+2      	; 0x1396 <__addsf3x+0x1c>
    1394:	e0 95       	com	r30
    1396:	0b 2e       	mov	r0, r27
    1398:	ba 2f       	mov	r27, r26
    139a:	a0 2d       	mov	r26, r0
    139c:	0b 01       	movw	r0, r22
    139e:	b9 01       	movw	r22, r18
    13a0:	90 01       	movw	r18, r0
    13a2:	0c 01       	movw	r0, r24
    13a4:	ca 01       	movw	r24, r20
    13a6:	a0 01       	movw	r20, r0
    13a8:	11 24       	eor	r1, r1
    13aa:	ff 27       	eor	r31, r31
    13ac:	59 1b       	sub	r21, r25
    13ae:	99 f0       	breq	.+38     	; 0x13d6 <__addsf3x+0x5c>
    13b0:	59 3f       	cpi	r21, 0xF9	; 249
    13b2:	50 f4       	brcc	.+20     	; 0x13c8 <__addsf3x+0x4e>
    13b4:	50 3e       	cpi	r21, 0xE0	; 224
    13b6:	68 f1       	brcs	.+90     	; 0x1412 <__addsf3x+0x98>
    13b8:	1a 16       	cp	r1, r26
    13ba:	f0 40       	sbci	r31, 0x00	; 0
    13bc:	a2 2f       	mov	r26, r18
    13be:	23 2f       	mov	r18, r19
    13c0:	34 2f       	mov	r19, r20
    13c2:	44 27       	eor	r20, r20
    13c4:	58 5f       	subi	r21, 0xF8	; 248
    13c6:	f3 cf       	rjmp	.-26     	; 0x13ae <__addsf3x+0x34>
    13c8:	46 95       	lsr	r20
    13ca:	37 95       	ror	r19
    13cc:	27 95       	ror	r18
    13ce:	a7 95       	ror	r26
    13d0:	f0 40       	sbci	r31, 0x00	; 0
    13d2:	53 95       	inc	r21
    13d4:	c9 f7       	brne	.-14     	; 0x13c8 <__addsf3x+0x4e>
    13d6:	7e f4       	brtc	.+30     	; 0x13f6 <__addsf3x+0x7c>
    13d8:	1f 16       	cp	r1, r31
    13da:	ba 0b       	sbc	r27, r26
    13dc:	62 0b       	sbc	r22, r18
    13de:	73 0b       	sbc	r23, r19
    13e0:	84 0b       	sbc	r24, r20
    13e2:	ba f0       	brmi	.+46     	; 0x1412 <__addsf3x+0x98>
    13e4:	91 50       	subi	r25, 0x01	; 1
    13e6:	a1 f0       	breq	.+40     	; 0x1410 <__addsf3x+0x96>
    13e8:	ff 0f       	add	r31, r31
    13ea:	bb 1f       	adc	r27, r27
    13ec:	66 1f       	adc	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	c2 f7       	brpl	.-16     	; 0x13e4 <__addsf3x+0x6a>
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <__addsf3x+0x98>
    13f6:	ba 0f       	add	r27, r26
    13f8:	62 1f       	adc	r22, r18
    13fa:	73 1f       	adc	r23, r19
    13fc:	84 1f       	adc	r24, r20
    13fe:	48 f4       	brcc	.+18     	; 0x1412 <__addsf3x+0x98>
    1400:	87 95       	ror	r24
    1402:	77 95       	ror	r23
    1404:	67 95       	ror	r22
    1406:	b7 95       	ror	r27
    1408:	f7 95       	ror	r31
    140a:	9e 3f       	cpi	r25, 0xFE	; 254
    140c:	08 f0       	brcs	.+2      	; 0x1410 <__addsf3x+0x96>
    140e:	b3 cf       	rjmp	.-154    	; 0x1376 <__addsf3+0x1e>
    1410:	93 95       	inc	r25
    1412:	88 0f       	add	r24, r24
    1414:	08 f0       	brcs	.+2      	; 0x1418 <__addsf3x+0x9e>
    1416:	99 27       	eor	r25, r25
    1418:	ee 0f       	add	r30, r30
    141a:	97 95       	ror	r25
    141c:	87 95       	ror	r24
    141e:	08 95       	ret

00001420 <atan>:
    1420:	df 93       	push	r29
    1422:	dd 27       	eor	r29, r29
    1424:	b9 2f       	mov	r27, r25
    1426:	bf 77       	andi	r27, 0x7F	; 127
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	16 16       	cp	r1, r22
    142e:	17 06       	cpc	r1, r23
    1430:	48 07       	cpc	r20, r24
    1432:	5b 07       	cpc	r21, r27
    1434:	10 f4       	brcc	.+4      	; 0x143a <atan+0x1a>
    1436:	d9 2f       	mov	r29, r25
    1438:	93 d1       	rcall	.+806    	; 0x1760 <inverse>
    143a:	9f 93       	push	r25
    143c:	8f 93       	push	r24
    143e:	7f 93       	push	r23
    1440:	6f 93       	push	r22
    1442:	f8 d1       	rcall	.+1008   	; 0x1834 <square>
    1444:	e4 ee       	ldi	r30, 0xE4	; 228
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	1a d1       	rcall	.+564    	; 0x167e <__fp_powser>
    144a:	4c d1       	rcall	.+664    	; 0x16e4 <__fp_round>
    144c:	2f 91       	pop	r18
    144e:	3f 91       	pop	r19
    1450:	4f 91       	pop	r20
    1452:	5f 91       	pop	r21
    1454:	98 d1       	rcall	.+816    	; 0x1786 <__mulsf3x>
    1456:	dd 23       	and	r29, r29
    1458:	49 f0       	breq	.+18     	; 0x146c <atan+0x4c>
    145a:	90 58       	subi	r25, 0x80	; 128
    145c:	a2 ea       	ldi	r26, 0xA2	; 162
    145e:	2a ed       	ldi	r18, 0xDA	; 218
    1460:	3f e0       	ldi	r19, 0x0F	; 15
    1462:	49 ec       	ldi	r20, 0xC9	; 201
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	d0 78       	andi	r29, 0x80	; 128
    1468:	5d 27       	eor	r21, r29
    146a:	87 df       	rcall	.-242    	; 0x137a <__addsf3x>
    146c:	df 91       	pop	r29
    146e:	3a c1       	rjmp	.+628    	; 0x16e4 <__fp_round>

00001470 <__cmpsf2>:
    1470:	d9 d0       	rcall	.+434    	; 0x1624 <__fp_cmp>
    1472:	08 f4       	brcc	.+2      	; 0x1476 <__cmpsf2+0x6>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	08 95       	ret

00001478 <__divsf3>:
    1478:	0c d0       	rcall	.+24     	; 0x1492 <__divsf3x>
    147a:	34 c1       	rjmp	.+616    	; 0x16e4 <__fp_round>
    147c:	2c d1       	rcall	.+600    	; 0x16d6 <__fp_pscB>
    147e:	40 f0       	brcs	.+16     	; 0x1490 <__divsf3+0x18>
    1480:	23 d1       	rcall	.+582    	; 0x16c8 <__fp_pscA>
    1482:	30 f0       	brcs	.+12     	; 0x1490 <__divsf3+0x18>
    1484:	21 f4       	brne	.+8      	; 0x148e <__divsf3+0x16>
    1486:	5f 3f       	cpi	r21, 0xFF	; 255
    1488:	19 f0       	breq	.+6      	; 0x1490 <__divsf3+0x18>
    148a:	f0 c0       	rjmp	.+480    	; 0x166c <__fp_inf>
    148c:	51 11       	cpse	r21, r1
    148e:	5e c1       	rjmp	.+700    	; 0x174c <__fp_szero>
    1490:	f3 c0       	rjmp	.+486    	; 0x1678 <__fp_nan>

00001492 <__divsf3x>:
    1492:	39 d1       	rcall	.+626    	; 0x1706 <__fp_split3>
    1494:	98 f3       	brcs	.-26     	; 0x147c <__divsf3+0x4>

00001496 <__divsf3_pse>:
    1496:	99 23       	and	r25, r25
    1498:	c9 f3       	breq	.-14     	; 0x148c <__divsf3+0x14>
    149a:	55 23       	and	r21, r21
    149c:	b1 f3       	breq	.-20     	; 0x148a <__divsf3+0x12>
    149e:	95 1b       	sub	r25, r21
    14a0:	55 0b       	sbc	r21, r21
    14a2:	bb 27       	eor	r27, r27
    14a4:	aa 27       	eor	r26, r26
    14a6:	62 17       	cp	r22, r18
    14a8:	73 07       	cpc	r23, r19
    14aa:	84 07       	cpc	r24, r20
    14ac:	38 f0       	brcs	.+14     	; 0x14bc <__divsf3_pse+0x26>
    14ae:	9f 5f       	subi	r25, 0xFF	; 255
    14b0:	5f 4f       	sbci	r21, 0xFF	; 255
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	44 1f       	adc	r20, r20
    14b8:	aa 1f       	adc	r26, r26
    14ba:	a9 f3       	breq	.-22     	; 0x14a6 <__divsf3_pse+0x10>
    14bc:	33 d0       	rcall	.+102    	; 0x1524 <__divsf3_pse+0x8e>
    14be:	0e 2e       	mov	r0, r30
    14c0:	3a f0       	brmi	.+14     	; 0x14d0 <__divsf3_pse+0x3a>
    14c2:	e0 e8       	ldi	r30, 0x80	; 128
    14c4:	30 d0       	rcall	.+96     	; 0x1526 <__divsf3_pse+0x90>
    14c6:	91 50       	subi	r25, 0x01	; 1
    14c8:	50 40       	sbci	r21, 0x00	; 0
    14ca:	e6 95       	lsr	r30
    14cc:	00 1c       	adc	r0, r0
    14ce:	ca f7       	brpl	.-14     	; 0x14c2 <__divsf3_pse+0x2c>
    14d0:	29 d0       	rcall	.+82     	; 0x1524 <__divsf3_pse+0x8e>
    14d2:	fe 2f       	mov	r31, r30
    14d4:	27 d0       	rcall	.+78     	; 0x1524 <__divsf3_pse+0x8e>
    14d6:	66 0f       	add	r22, r22
    14d8:	77 1f       	adc	r23, r23
    14da:	88 1f       	adc	r24, r24
    14dc:	bb 1f       	adc	r27, r27
    14de:	26 17       	cp	r18, r22
    14e0:	37 07       	cpc	r19, r23
    14e2:	48 07       	cpc	r20, r24
    14e4:	ab 07       	cpc	r26, r27
    14e6:	b0 e8       	ldi	r27, 0x80	; 128
    14e8:	09 f0       	breq	.+2      	; 0x14ec <__divsf3_pse+0x56>
    14ea:	bb 0b       	sbc	r27, r27
    14ec:	80 2d       	mov	r24, r0
    14ee:	bf 01       	movw	r22, r30
    14f0:	ff 27       	eor	r31, r31
    14f2:	93 58       	subi	r25, 0x83	; 131
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	2a f0       	brmi	.+10     	; 0x1502 <__divsf3_pse+0x6c>
    14f8:	9e 3f       	cpi	r25, 0xFE	; 254
    14fa:	51 05       	cpc	r21, r1
    14fc:	68 f0       	brcs	.+26     	; 0x1518 <__divsf3_pse+0x82>
    14fe:	b6 c0       	rjmp	.+364    	; 0x166c <__fp_inf>
    1500:	25 c1       	rjmp	.+586    	; 0x174c <__fp_szero>
    1502:	5f 3f       	cpi	r21, 0xFF	; 255
    1504:	ec f3       	brlt	.-6      	; 0x1500 <__divsf3_pse+0x6a>
    1506:	98 3e       	cpi	r25, 0xE8	; 232
    1508:	dc f3       	brlt	.-10     	; 0x1500 <__divsf3_pse+0x6a>
    150a:	86 95       	lsr	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	b7 95       	ror	r27
    1512:	f7 95       	ror	r31
    1514:	9f 5f       	subi	r25, 0xFF	; 255
    1516:	c9 f7       	brne	.-14     	; 0x150a <__divsf3_pse+0x74>
    1518:	88 0f       	add	r24, r24
    151a:	91 1d       	adc	r25, r1
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	97 f9       	bld	r25, 7
    1522:	08 95       	ret
    1524:	e1 e0       	ldi	r30, 0x01	; 1
    1526:	66 0f       	add	r22, r22
    1528:	77 1f       	adc	r23, r23
    152a:	88 1f       	adc	r24, r24
    152c:	bb 1f       	adc	r27, r27
    152e:	62 17       	cp	r22, r18
    1530:	73 07       	cpc	r23, r19
    1532:	84 07       	cpc	r24, r20
    1534:	ba 07       	cpc	r27, r26
    1536:	20 f0       	brcs	.+8      	; 0x1540 <__divsf3_pse+0xaa>
    1538:	62 1b       	sub	r22, r18
    153a:	73 0b       	sbc	r23, r19
    153c:	84 0b       	sbc	r24, r20
    153e:	ba 0b       	sbc	r27, r26
    1540:	ee 1f       	adc	r30, r30
    1542:	88 f7       	brcc	.-30     	; 0x1526 <__divsf3_pse+0x90>
    1544:	e0 95       	com	r30
    1546:	08 95       	ret

00001548 <__fixsfsi>:
    1548:	04 d0       	rcall	.+8      	; 0x1552 <__fixunssfsi>
    154a:	68 94       	set
    154c:	b1 11       	cpse	r27, r1
    154e:	fe c0       	rjmp	.+508    	; 0x174c <__fp_szero>
    1550:	08 95       	ret

00001552 <__fixunssfsi>:
    1552:	e1 d0       	rcall	.+450    	; 0x1716 <__fp_splitA>
    1554:	88 f0       	brcs	.+34     	; 0x1578 <__fixunssfsi+0x26>
    1556:	9f 57       	subi	r25, 0x7F	; 127
    1558:	90 f0       	brcs	.+36     	; 0x157e <__fixunssfsi+0x2c>
    155a:	b9 2f       	mov	r27, r25
    155c:	99 27       	eor	r25, r25
    155e:	b7 51       	subi	r27, 0x17	; 23
    1560:	a0 f0       	brcs	.+40     	; 0x158a <__fixunssfsi+0x38>
    1562:	d1 f0       	breq	.+52     	; 0x1598 <__fixunssfsi+0x46>
    1564:	66 0f       	add	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	88 1f       	adc	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	1a f0       	brmi	.+6      	; 0x1574 <__fixunssfsi+0x22>
    156e:	ba 95       	dec	r27
    1570:	c9 f7       	brne	.-14     	; 0x1564 <__fixunssfsi+0x12>
    1572:	12 c0       	rjmp	.+36     	; 0x1598 <__fixunssfsi+0x46>
    1574:	b1 30       	cpi	r27, 0x01	; 1
    1576:	81 f0       	breq	.+32     	; 0x1598 <__fixunssfsi+0x46>
    1578:	e8 d0       	rcall	.+464    	; 0x174a <__fp_zero>
    157a:	b1 e0       	ldi	r27, 0x01	; 1
    157c:	08 95       	ret
    157e:	e5 c0       	rjmp	.+458    	; 0x174a <__fp_zero>
    1580:	67 2f       	mov	r22, r23
    1582:	78 2f       	mov	r23, r24
    1584:	88 27       	eor	r24, r24
    1586:	b8 5f       	subi	r27, 0xF8	; 248
    1588:	39 f0       	breq	.+14     	; 0x1598 <__fixunssfsi+0x46>
    158a:	b9 3f       	cpi	r27, 0xF9	; 249
    158c:	cc f3       	brlt	.-14     	; 0x1580 <__fixunssfsi+0x2e>
    158e:	86 95       	lsr	r24
    1590:	77 95       	ror	r23
    1592:	67 95       	ror	r22
    1594:	b3 95       	inc	r27
    1596:	d9 f7       	brne	.-10     	; 0x158e <__fixunssfsi+0x3c>
    1598:	3e f4       	brtc	.+14     	; 0x15a8 <__fixunssfsi+0x56>
    159a:	90 95       	com	r25
    159c:	80 95       	com	r24
    159e:	70 95       	com	r23
    15a0:	61 95       	neg	r22
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	8f 4f       	sbci	r24, 0xFF	; 255
    15a6:	9f 4f       	sbci	r25, 0xFF	; 255
    15a8:	08 95       	ret

000015aa <__floatunsisf>:
    15aa:	e8 94       	clt
    15ac:	09 c0       	rjmp	.+18     	; 0x15c0 <__floatsisf+0x12>

000015ae <__floatsisf>:
    15ae:	97 fb       	bst	r25, 7
    15b0:	3e f4       	brtc	.+14     	; 0x15c0 <__floatsisf+0x12>
    15b2:	90 95       	com	r25
    15b4:	80 95       	com	r24
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	99 23       	and	r25, r25
    15c2:	a9 f0       	breq	.+42     	; 0x15ee <__floatsisf+0x40>
    15c4:	f9 2f       	mov	r31, r25
    15c6:	96 e9       	ldi	r25, 0x96	; 150
    15c8:	bb 27       	eor	r27, r27
    15ca:	93 95       	inc	r25
    15cc:	f6 95       	lsr	r31
    15ce:	87 95       	ror	r24
    15d0:	77 95       	ror	r23
    15d2:	67 95       	ror	r22
    15d4:	b7 95       	ror	r27
    15d6:	f1 11       	cpse	r31, r1
    15d8:	f8 cf       	rjmp	.-16     	; 0x15ca <__floatsisf+0x1c>
    15da:	fa f4       	brpl	.+62     	; 0x161a <__floatsisf+0x6c>
    15dc:	bb 0f       	add	r27, r27
    15de:	11 f4       	brne	.+4      	; 0x15e4 <__floatsisf+0x36>
    15e0:	60 ff       	sbrs	r22, 0
    15e2:	1b c0       	rjmp	.+54     	; 0x161a <__floatsisf+0x6c>
    15e4:	6f 5f       	subi	r22, 0xFF	; 255
    15e6:	7f 4f       	sbci	r23, 0xFF	; 255
    15e8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	16 c0       	rjmp	.+44     	; 0x161a <__floatsisf+0x6c>
    15ee:	88 23       	and	r24, r24
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <__floatsisf+0x48>
    15f2:	96 e9       	ldi	r25, 0x96	; 150
    15f4:	11 c0       	rjmp	.+34     	; 0x1618 <__floatsisf+0x6a>
    15f6:	77 23       	and	r23, r23
    15f8:	21 f0       	breq	.+8      	; 0x1602 <__floatsisf+0x54>
    15fa:	9e e8       	ldi	r25, 0x8E	; 142
    15fc:	87 2f       	mov	r24, r23
    15fe:	76 2f       	mov	r23, r22
    1600:	05 c0       	rjmp	.+10     	; 0x160c <__floatsisf+0x5e>
    1602:	66 23       	and	r22, r22
    1604:	71 f0       	breq	.+28     	; 0x1622 <__floatsisf+0x74>
    1606:	96 e8       	ldi	r25, 0x86	; 134
    1608:	86 2f       	mov	r24, r22
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	2a f0       	brmi	.+10     	; 0x161a <__floatsisf+0x6c>
    1610:	9a 95       	dec	r25
    1612:	66 0f       	add	r22, r22
    1614:	77 1f       	adc	r23, r23
    1616:	88 1f       	adc	r24, r24
    1618:	da f7       	brpl	.-10     	; 0x1610 <__floatsisf+0x62>
    161a:	88 0f       	add	r24, r24
    161c:	96 95       	lsr	r25
    161e:	87 95       	ror	r24
    1620:	97 f9       	bld	r25, 7
    1622:	08 95       	ret

00001624 <__fp_cmp>:
    1624:	99 0f       	add	r25, r25
    1626:	00 08       	sbc	r0, r0
    1628:	55 0f       	add	r21, r21
    162a:	aa 0b       	sbc	r26, r26
    162c:	e0 e8       	ldi	r30, 0x80	; 128
    162e:	fe ef       	ldi	r31, 0xFE	; 254
    1630:	16 16       	cp	r1, r22
    1632:	17 06       	cpc	r1, r23
    1634:	e8 07       	cpc	r30, r24
    1636:	f9 07       	cpc	r31, r25
    1638:	c0 f0       	brcs	.+48     	; 0x166a <__fp_cmp+0x46>
    163a:	12 16       	cp	r1, r18
    163c:	13 06       	cpc	r1, r19
    163e:	e4 07       	cpc	r30, r20
    1640:	f5 07       	cpc	r31, r21
    1642:	98 f0       	brcs	.+38     	; 0x166a <__fp_cmp+0x46>
    1644:	62 1b       	sub	r22, r18
    1646:	73 0b       	sbc	r23, r19
    1648:	84 0b       	sbc	r24, r20
    164a:	95 0b       	sbc	r25, r21
    164c:	39 f4       	brne	.+14     	; 0x165c <__fp_cmp+0x38>
    164e:	0a 26       	eor	r0, r26
    1650:	61 f0       	breq	.+24     	; 0x166a <__fp_cmp+0x46>
    1652:	23 2b       	or	r18, r19
    1654:	24 2b       	or	r18, r20
    1656:	25 2b       	or	r18, r21
    1658:	21 f4       	brne	.+8      	; 0x1662 <__fp_cmp+0x3e>
    165a:	08 95       	ret
    165c:	0a 26       	eor	r0, r26
    165e:	09 f4       	brne	.+2      	; 0x1662 <__fp_cmp+0x3e>
    1660:	a1 40       	sbci	r26, 0x01	; 1
    1662:	a6 95       	lsr	r26
    1664:	8f ef       	ldi	r24, 0xFF	; 255
    1666:	81 1d       	adc	r24, r1
    1668:	81 1d       	adc	r24, r1
    166a:	08 95       	ret

0000166c <__fp_inf>:
    166c:	97 f9       	bld	r25, 7
    166e:	9f 67       	ori	r25, 0x7F	; 127
    1670:	80 e8       	ldi	r24, 0x80	; 128
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	08 95       	ret

00001678 <__fp_nan>:
    1678:	9f ef       	ldi	r25, 0xFF	; 255
    167a:	80 ec       	ldi	r24, 0xC0	; 192
    167c:	08 95       	ret

0000167e <__fp_powser>:
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	1f 93       	push	r17
    1684:	0f 93       	push	r16
    1686:	ff 92       	push	r15
    1688:	ef 92       	push	r14
    168a:	df 92       	push	r13
    168c:	7b 01       	movw	r14, r22
    168e:	8c 01       	movw	r16, r24
    1690:	68 94       	set
    1692:	05 c0       	rjmp	.+10     	; 0x169e <__fp_powser+0x20>
    1694:	da 2e       	mov	r13, r26
    1696:	ef 01       	movw	r28, r30
    1698:	76 d0       	rcall	.+236    	; 0x1786 <__mulsf3x>
    169a:	fe 01       	movw	r30, r28
    169c:	e8 94       	clt
    169e:	a5 91       	lpm	r26, Z+
    16a0:	25 91       	lpm	r18, Z+
    16a2:	35 91       	lpm	r19, Z+
    16a4:	45 91       	lpm	r20, Z+
    16a6:	55 91       	lpm	r21, Z+
    16a8:	ae f3       	brts	.-22     	; 0x1694 <__fp_powser+0x16>
    16aa:	ef 01       	movw	r28, r30
    16ac:	66 de       	rcall	.-820    	; 0x137a <__addsf3x>
    16ae:	fe 01       	movw	r30, r28
    16b0:	97 01       	movw	r18, r14
    16b2:	a8 01       	movw	r20, r16
    16b4:	da 94       	dec	r13
    16b6:	79 f7       	brne	.-34     	; 0x1696 <__fp_powser+0x18>
    16b8:	df 90       	pop	r13
    16ba:	ef 90       	pop	r14
    16bc:	ff 90       	pop	r15
    16be:	0f 91       	pop	r16
    16c0:	1f 91       	pop	r17
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <__fp_pscA>:
    16c8:	00 24       	eor	r0, r0
    16ca:	0a 94       	dec	r0
    16cc:	16 16       	cp	r1, r22
    16ce:	17 06       	cpc	r1, r23
    16d0:	18 06       	cpc	r1, r24
    16d2:	09 06       	cpc	r0, r25
    16d4:	08 95       	ret

000016d6 <__fp_pscB>:
    16d6:	00 24       	eor	r0, r0
    16d8:	0a 94       	dec	r0
    16da:	12 16       	cp	r1, r18
    16dc:	13 06       	cpc	r1, r19
    16de:	14 06       	cpc	r1, r20
    16e0:	05 06       	cpc	r0, r21
    16e2:	08 95       	ret

000016e4 <__fp_round>:
    16e4:	09 2e       	mov	r0, r25
    16e6:	03 94       	inc	r0
    16e8:	00 0c       	add	r0, r0
    16ea:	11 f4       	brne	.+4      	; 0x16f0 <__fp_round+0xc>
    16ec:	88 23       	and	r24, r24
    16ee:	52 f0       	brmi	.+20     	; 0x1704 <__fp_round+0x20>
    16f0:	bb 0f       	add	r27, r27
    16f2:	40 f4       	brcc	.+16     	; 0x1704 <__fp_round+0x20>
    16f4:	bf 2b       	or	r27, r31
    16f6:	11 f4       	brne	.+4      	; 0x16fc <__fp_round+0x18>
    16f8:	60 ff       	sbrs	r22, 0
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <__fp_round+0x20>
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	8f 4f       	sbci	r24, 0xFF	; 255
    1702:	9f 4f       	sbci	r25, 0xFF	; 255
    1704:	08 95       	ret

00001706 <__fp_split3>:
    1706:	57 fd       	sbrc	r21, 7
    1708:	90 58       	subi	r25, 0x80	; 128
    170a:	44 0f       	add	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	59 f0       	breq	.+22     	; 0x1726 <__fp_splitA+0x10>
    1710:	5f 3f       	cpi	r21, 0xFF	; 255
    1712:	71 f0       	breq	.+28     	; 0x1730 <__fp_splitA+0x1a>
    1714:	47 95       	ror	r20

00001716 <__fp_splitA>:
    1716:	88 0f       	add	r24, r24
    1718:	97 fb       	bst	r25, 7
    171a:	99 1f       	adc	r25, r25
    171c:	61 f0       	breq	.+24     	; 0x1736 <__fp_splitA+0x20>
    171e:	9f 3f       	cpi	r25, 0xFF	; 255
    1720:	79 f0       	breq	.+30     	; 0x1740 <__fp_splitA+0x2a>
    1722:	87 95       	ror	r24
    1724:	08 95       	ret
    1726:	12 16       	cp	r1, r18
    1728:	13 06       	cpc	r1, r19
    172a:	14 06       	cpc	r1, r20
    172c:	55 1f       	adc	r21, r21
    172e:	f2 cf       	rjmp	.-28     	; 0x1714 <__fp_split3+0xe>
    1730:	46 95       	lsr	r20
    1732:	f1 df       	rcall	.-30     	; 0x1716 <__fp_splitA>
    1734:	08 c0       	rjmp	.+16     	; 0x1746 <__fp_splitA+0x30>
    1736:	16 16       	cp	r1, r22
    1738:	17 06       	cpc	r1, r23
    173a:	18 06       	cpc	r1, r24
    173c:	99 1f       	adc	r25, r25
    173e:	f1 cf       	rjmp	.-30     	; 0x1722 <__fp_splitA+0xc>
    1740:	86 95       	lsr	r24
    1742:	71 05       	cpc	r23, r1
    1744:	61 05       	cpc	r22, r1
    1746:	08 94       	sec
    1748:	08 95       	ret

0000174a <__fp_zero>:
    174a:	e8 94       	clt

0000174c <__fp_szero>:
    174c:	bb 27       	eor	r27, r27
    174e:	66 27       	eor	r22, r22
    1750:	77 27       	eor	r23, r23
    1752:	cb 01       	movw	r24, r22
    1754:	97 f9       	bld	r25, 7
    1756:	08 95       	ret

00001758 <__gesf2>:
    1758:	65 df       	rcall	.-310    	; 0x1624 <__fp_cmp>
    175a:	08 f4       	brcc	.+2      	; 0x175e <__gesf2+0x6>
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	08 95       	ret

00001760 <inverse>:
    1760:	9b 01       	movw	r18, r22
    1762:	ac 01       	movw	r20, r24
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e8       	ldi	r24, 0x80	; 128
    176a:	9f e3       	ldi	r25, 0x3F	; 63
    176c:	85 ce       	rjmp	.-758    	; 0x1478 <__divsf3>

0000176e <__mulsf3>:
    176e:	0b d0       	rcall	.+22     	; 0x1786 <__mulsf3x>
    1770:	b9 cf       	rjmp	.-142    	; 0x16e4 <__fp_round>
    1772:	aa df       	rcall	.-172    	; 0x16c8 <__fp_pscA>
    1774:	28 f0       	brcs	.+10     	; 0x1780 <__mulsf3+0x12>
    1776:	af df       	rcall	.-162    	; 0x16d6 <__fp_pscB>
    1778:	18 f0       	brcs	.+6      	; 0x1780 <__mulsf3+0x12>
    177a:	95 23       	and	r25, r21
    177c:	09 f0       	breq	.+2      	; 0x1780 <__mulsf3+0x12>
    177e:	76 cf       	rjmp	.-276    	; 0x166c <__fp_inf>
    1780:	7b cf       	rjmp	.-266    	; 0x1678 <__fp_nan>
    1782:	11 24       	eor	r1, r1
    1784:	e3 cf       	rjmp	.-58     	; 0x174c <__fp_szero>

00001786 <__mulsf3x>:
    1786:	bf df       	rcall	.-130    	; 0x1706 <__fp_split3>
    1788:	a0 f3       	brcs	.-24     	; 0x1772 <__mulsf3+0x4>

0000178a <__mulsf3_pse>:
    178a:	95 9f       	mul	r25, r21
    178c:	d1 f3       	breq	.-12     	; 0x1782 <__mulsf3+0x14>
    178e:	95 0f       	add	r25, r21
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	55 1f       	adc	r21, r21
    1794:	62 9f       	mul	r22, r18
    1796:	f0 01       	movw	r30, r0
    1798:	72 9f       	mul	r23, r18
    179a:	bb 27       	eor	r27, r27
    179c:	f0 0d       	add	r31, r0
    179e:	b1 1d       	adc	r27, r1
    17a0:	63 9f       	mul	r22, r19
    17a2:	aa 27       	eor	r26, r26
    17a4:	f0 0d       	add	r31, r0
    17a6:	b1 1d       	adc	r27, r1
    17a8:	aa 1f       	adc	r26, r26
    17aa:	64 9f       	mul	r22, r20
    17ac:	66 27       	eor	r22, r22
    17ae:	b0 0d       	add	r27, r0
    17b0:	a1 1d       	adc	r26, r1
    17b2:	66 1f       	adc	r22, r22
    17b4:	82 9f       	mul	r24, r18
    17b6:	22 27       	eor	r18, r18
    17b8:	b0 0d       	add	r27, r0
    17ba:	a1 1d       	adc	r26, r1
    17bc:	62 1f       	adc	r22, r18
    17be:	73 9f       	mul	r23, r19
    17c0:	b0 0d       	add	r27, r0
    17c2:	a1 1d       	adc	r26, r1
    17c4:	62 1f       	adc	r22, r18
    17c6:	83 9f       	mul	r24, r19
    17c8:	a0 0d       	add	r26, r0
    17ca:	61 1d       	adc	r22, r1
    17cc:	22 1f       	adc	r18, r18
    17ce:	74 9f       	mul	r23, r20
    17d0:	33 27       	eor	r19, r19
    17d2:	a0 0d       	add	r26, r0
    17d4:	61 1d       	adc	r22, r1
    17d6:	23 1f       	adc	r18, r19
    17d8:	84 9f       	mul	r24, r20
    17da:	60 0d       	add	r22, r0
    17dc:	21 1d       	adc	r18, r1
    17de:	82 2f       	mov	r24, r18
    17e0:	76 2f       	mov	r23, r22
    17e2:	6a 2f       	mov	r22, r26
    17e4:	11 24       	eor	r1, r1
    17e6:	9f 57       	subi	r25, 0x7F	; 127
    17e8:	50 40       	sbci	r21, 0x00	; 0
    17ea:	8a f0       	brmi	.+34     	; 0x180e <__mulsf3_pse+0x84>
    17ec:	e1 f0       	breq	.+56     	; 0x1826 <__mulsf3_pse+0x9c>
    17ee:	88 23       	and	r24, r24
    17f0:	4a f0       	brmi	.+18     	; 0x1804 <__mulsf3_pse+0x7a>
    17f2:	ee 0f       	add	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	bb 1f       	adc	r27, r27
    17f8:	66 1f       	adc	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	91 50       	subi	r25, 0x01	; 1
    1800:	50 40       	sbci	r21, 0x00	; 0
    1802:	a9 f7       	brne	.-22     	; 0x17ee <__mulsf3_pse+0x64>
    1804:	9e 3f       	cpi	r25, 0xFE	; 254
    1806:	51 05       	cpc	r21, r1
    1808:	70 f0       	brcs	.+28     	; 0x1826 <__mulsf3_pse+0x9c>
    180a:	30 cf       	rjmp	.-416    	; 0x166c <__fp_inf>
    180c:	9f cf       	rjmp	.-194    	; 0x174c <__fp_szero>
    180e:	5f 3f       	cpi	r21, 0xFF	; 255
    1810:	ec f3       	brlt	.-6      	; 0x180c <__mulsf3_pse+0x82>
    1812:	98 3e       	cpi	r25, 0xE8	; 232
    1814:	dc f3       	brlt	.-10     	; 0x180c <__mulsf3_pse+0x82>
    1816:	86 95       	lsr	r24
    1818:	77 95       	ror	r23
    181a:	67 95       	ror	r22
    181c:	b7 95       	ror	r27
    181e:	f7 95       	ror	r31
    1820:	e7 95       	ror	r30
    1822:	9f 5f       	subi	r25, 0xFF	; 255
    1824:	c1 f7       	brne	.-16     	; 0x1816 <__mulsf3_pse+0x8c>
    1826:	fe 2b       	or	r31, r30
    1828:	88 0f       	add	r24, r24
    182a:	91 1d       	adc	r25, r1
    182c:	96 95       	lsr	r25
    182e:	87 95       	ror	r24
    1830:	97 f9       	bld	r25, 7
    1832:	08 95       	ret

00001834 <square>:
    1834:	9b 01       	movw	r18, r22
    1836:	ac 01       	movw	r20, r24
    1838:	9a cf       	rjmp	.-204    	; 0x176e <__mulsf3>

0000183a <__udivmodhi4>:
    183a:	aa 1b       	sub	r26, r26
    183c:	bb 1b       	sub	r27, r27
    183e:	51 e1       	ldi	r21, 0x11	; 17
    1840:	07 c0       	rjmp	.+14     	; 0x1850 <__udivmodhi4_ep>

00001842 <__udivmodhi4_loop>:
    1842:	aa 1f       	adc	r26, r26
    1844:	bb 1f       	adc	r27, r27
    1846:	a6 17       	cp	r26, r22
    1848:	b7 07       	cpc	r27, r23
    184a:	10 f0       	brcs	.+4      	; 0x1850 <__udivmodhi4_ep>
    184c:	a6 1b       	sub	r26, r22
    184e:	b7 0b       	sbc	r27, r23

00001850 <__udivmodhi4_ep>:
    1850:	88 1f       	adc	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	5a 95       	dec	r21
    1856:	a9 f7       	brne	.-22     	; 0x1842 <__udivmodhi4_loop>
    1858:	80 95       	com	r24
    185a:	90 95       	com	r25
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	08 95       	ret

00001862 <__divmodhi4>:
    1862:	97 fb       	bst	r25, 7
    1864:	09 2e       	mov	r0, r25
    1866:	07 26       	eor	r0, r23
    1868:	0a d0       	rcall	.+20     	; 0x187e <__divmodhi4_neg1>
    186a:	77 fd       	sbrc	r23, 7
    186c:	04 d0       	rcall	.+8      	; 0x1876 <__divmodhi4_neg2>
    186e:	e5 df       	rcall	.-54     	; 0x183a <__udivmodhi4>
    1870:	06 d0       	rcall	.+12     	; 0x187e <__divmodhi4_neg1>
    1872:	00 20       	and	r0, r0
    1874:	1a f4       	brpl	.+6      	; 0x187c <__divmodhi4_exit>

00001876 <__divmodhi4_neg2>:
    1876:	70 95       	com	r23
    1878:	61 95       	neg	r22
    187a:	7f 4f       	sbci	r23, 0xFF	; 255

0000187c <__divmodhi4_exit>:
    187c:	08 95       	ret

0000187e <__divmodhi4_neg1>:
    187e:	f6 f7       	brtc	.-4      	; 0x187c <__divmodhi4_exit>
    1880:	90 95       	com	r25
    1882:	81 95       	neg	r24
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	08 95       	ret

00001888 <__divmodsi4>:
    1888:	97 fb       	bst	r25, 7
    188a:	09 2e       	mov	r0, r25
    188c:	05 26       	eor	r0, r21
    188e:	0e d0       	rcall	.+28     	; 0x18ac <__divmodsi4_neg1>
    1890:	57 fd       	sbrc	r21, 7
    1892:	04 d0       	rcall	.+8      	; 0x189c <__divmodsi4_neg2>
    1894:	14 d0       	rcall	.+40     	; 0x18be <__udivmodsi4>
    1896:	0a d0       	rcall	.+20     	; 0x18ac <__divmodsi4_neg1>
    1898:	00 1c       	adc	r0, r0
    189a:	38 f4       	brcc	.+14     	; 0x18aa <__divmodsi4_exit>

0000189c <__divmodsi4_neg2>:
    189c:	50 95       	com	r21
    189e:	40 95       	com	r20
    18a0:	30 95       	com	r19
    18a2:	21 95       	neg	r18
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	4f 4f       	sbci	r20, 0xFF	; 255
    18a8:	5f 4f       	sbci	r21, 0xFF	; 255

000018aa <__divmodsi4_exit>:
    18aa:	08 95       	ret

000018ac <__divmodsi4_neg1>:
    18ac:	f6 f7       	brtc	.-4      	; 0x18aa <__divmodsi4_exit>
    18ae:	90 95       	com	r25
    18b0:	80 95       	com	r24
    18b2:	70 95       	com	r23
    18b4:	61 95       	neg	r22
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	08 95       	ret

000018be <__udivmodsi4>:
    18be:	a1 e2       	ldi	r26, 0x21	; 33
    18c0:	1a 2e       	mov	r1, r26
    18c2:	aa 1b       	sub	r26, r26
    18c4:	bb 1b       	sub	r27, r27
    18c6:	fd 01       	movw	r30, r26
    18c8:	0d c0       	rjmp	.+26     	; 0x18e4 <__udivmodsi4_ep>

000018ca <__udivmodsi4_loop>:
    18ca:	aa 1f       	adc	r26, r26
    18cc:	bb 1f       	adc	r27, r27
    18ce:	ee 1f       	adc	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	a2 17       	cp	r26, r18
    18d4:	b3 07       	cpc	r27, r19
    18d6:	e4 07       	cpc	r30, r20
    18d8:	f5 07       	cpc	r31, r21
    18da:	20 f0       	brcs	.+8      	; 0x18e4 <__udivmodsi4_ep>
    18dc:	a2 1b       	sub	r26, r18
    18de:	b3 0b       	sbc	r27, r19
    18e0:	e4 0b       	sbc	r30, r20
    18e2:	f5 0b       	sbc	r31, r21

000018e4 <__udivmodsi4_ep>:
    18e4:	66 1f       	adc	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	88 1f       	adc	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	1a 94       	dec	r1
    18ee:	69 f7       	brne	.-38     	; 0x18ca <__udivmodsi4_loop>
    18f0:	60 95       	com	r22
    18f2:	70 95       	com	r23
    18f4:	80 95       	com	r24
    18f6:	90 95       	com	r25
    18f8:	9b 01       	movw	r18, r22
    18fa:	ac 01       	movw	r20, r24
    18fc:	bd 01       	movw	r22, r26
    18fe:	cf 01       	movw	r24, r30
    1900:	08 95       	ret

00001902 <_exit>:
    1902:	f8 94       	cli

00001904 <__stop_program>:
    1904:	ff cf       	rjmp	.-2      	; 0x1904 <__stop_program>
