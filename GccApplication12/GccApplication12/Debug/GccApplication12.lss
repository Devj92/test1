
GccApplication12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  0000199c  00001a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000199c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800204  00800204  00001a34  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000950  00000000  00000000  00004368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00004cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185f  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ae  00000000  00000000  00006617  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a6  00000000  00000000  000069c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  0000736c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dc  00000000  00000000  00007828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d0f  00000000  00000000  00007d04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
       c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      10:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      14:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      18:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      1c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      20:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      24:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      28:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      30:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      3c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      40:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      44:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      48:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      4c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      50:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      54:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      58:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      5c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      60:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      64:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_25>
      68:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      6c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      70:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      74:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      78:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      7c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      80:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      84:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      88:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      8c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      90:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      94:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      98:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      9c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      a8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      ac:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      b4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_45>
      b8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      bc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      c8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      cc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      d8:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      dc:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e0:	0c 94 aa 00 	jmp	0x154	; 0x154 <__bad_interrupt>
      e4:	08 4a       	sbci	r16, 0xA8	; 168
      e6:	d7 3b       	cpi	r29, 0xB7	; 183
      e8:	3b ce       	rjmp	.-906    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
      ea:	01 6e       	ori	r16, 0xE1	; 225
      ec:	84 bc       	out	0x24, r8	; 36
      ee:	bf fd       	.word	0xfdbf	; ????
      f0:	c1 2f       	mov	r28, r17
      f2:	3d 6c       	ori	r19, 0xCD	; 205
      f4:	74 31       	cpi	r23, 0x14	; 20
      f6:	9a bd       	out	0x2a, r25	; 42
      f8:	56 83       	std	Z+6, r21	; 0x06
      fa:	3d da       	rcall	.-2950   	; 0xfffff576 <__eeprom_end+0xff7ef576>
      fc:	3d 00       	.word	0x003d	; ????
      fe:	c7 7f       	andi	r28, 0xF7	; 247
     100:	11 be       	out	0x31, r1	; 49
     102:	d9 e4       	ldi	r29, 0x49	; 73
     104:	bb 4c       	sbci	r27, 0xCB	; 203
     106:	3e 91       	ld	r19, -X
     108:	6b aa       	sts	0x9b, r22
     10a:	aa be       	out	0x3a, r10	; 58
     10c:	00 00       	nop
     10e:	00 80       	ld	r0, Z
     110:	3f 00       	.word	0x003f	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d1 e2       	ldi	r29, 0x21	; 33
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0c bf       	out	0x3c, r16	; 60

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	ec e9       	ldi	r30, 0x9C	; 156
     12a:	f9 e1       	ldi	r31, 0x19	; 25
     12c:	00 e0       	ldi	r16, 0x00	; 0
     12e:	0b bf       	out	0x3b, r16	; 59
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
     132:	07 90       	elpm	r0, Z+
     134:	0d 92       	st	X+, r0
     136:	a4 30       	cpi	r26, 0x04	; 4
     138:	b1 07       	cpc	r27, r17
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
     13c:	12 e0       	ldi	r17, 0x02	; 2
     13e:	a4 e0       	ldi	r26, 0x04	; 4
     140:	b2 e0       	ldi	r27, 0x02	; 2
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
     146:	a2 35       	cpi	r26, 0x52	; 82
     148:	b1 07       	cpc	r27, r17
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
     14c:	0e 94 bb 08 	call	0x1176	; 0x1176 <main>
     150:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <_exit>

00000154 <__bad_interrupt>:
     154:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000158 <timer4_init>:
volatile uint8_t tot_overflow;


void timer4_init(void)
{
	tot_overflow=0;
     158:	10 92 38 02 	sts	0x0238, r1
	TCCR4B = 0x00; //stop
     15c:	e1 ea       	ldi	r30, 0xA1	; 161
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	10 82       	st	Z, r1
	TCNT4H = 0xC6; //Counter higher 8 bit value
     162:	86 ec       	ldi	r24, 0xC6	; 198
     164:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //Counter lower 8 bit value
     168:	87 e6       	ldi	r24, 0x67	; 103
     16a:	80 93 a4 00 	sts	0x00A4, r24
	OCR4AH = 0x00; //Output compare Register (OCR)- Not used
     16e:	10 92 a9 00 	sts	0x00A9, r1
	OCR4AL = 0x00; //Output compare Register (OCR)- Not used
     172:	10 92 a8 00 	sts	0x00A8, r1
	OCR4BH = 0x00; //Output compare Register (OCR)- Not used
     176:	10 92 ab 00 	sts	0x00AB, r1
	OCR4BL = 0x00; //Output compare Register (OCR)- Not used
     17a:	10 92 aa 00 	sts	0x00AA, r1
	OCR4CH = 0x00; //Output compare Register (OCR)- Not used
     17e:	10 92 ad 00 	sts	0x00AD, r1
	OCR4CL = 0x00; //Output compare Register (OCR)- Not used
     182:	10 92 ac 00 	sts	0x00AC, r1
	ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
     186:	10 92 a7 00 	sts	0x00A7, r1
	ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
     18a:	10 92 a6 00 	sts	0x00A6, r1
	TCCR4A = 0x00;
     18e:	10 92 a0 00 	sts	0x00A0, r1
	TCCR4C = 0x00;
     192:	10 92 a2 00 	sts	0x00A2, r1
	TCCR4B = 0x01; //start Timer
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 83       	st	Z, r24
}
     19a:	08 95       	ret

0000019c <__vector_45>:

// TIMER4 overflow interrupt service routine
// called whenever TCNT4 overflows
ISR(TIMER4_OVF_vect)
{
     19c:	1f 92       	push	r1
     19e:	0f 92       	push	r0
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	0f 92       	push	r0
     1a4:	11 24       	eor	r1, r1
     1a6:	8f 93       	push	r24
	// keep a track of number of overflows
	tot_overflow++;
     1a8:	80 91 38 02 	lds	r24, 0x0238
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	80 93 38 02 	sts	0x0238, r24
	//TIMER4 has overflowed
	TCNT4H = 0xC6; //reload counter high value
     1b2:	86 ec       	ldi	r24, 0xC6	; 198
     1b4:	80 93 a5 00 	sts	0x00A5, r24
	TCNT4L = 0x67; //reload counter low value
     1b8:	87 e6       	ldi	r24, 0x67	; 103
     1ba:	80 93 a4 00 	sts	0x00A4, r24
}
     1be:	8f 91       	pop	r24
     1c0:	0f 90       	pop	r0
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	0f 90       	pop	r0
     1c6:	1f 90       	pop	r1
     1c8:	18 95       	reti

000001ca <start_timer4>:

void start_timer4(void)
{
	cli(); //Clears the global interrupts
     1ca:	f8 94       	cli
	timer4_init();
     1cc:	0e 94 ac 00 	call	0x158	; 0x158 <timer4_init>
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 72 00 	sts	0x0072, r24
	sei();   //Enables the global interrupts
     1d6:	78 94       	sei

}
     1d8:	08 95       	ret

000001da <micros>:

int micros(void)
{
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     1e2:	10 91 38 02 	lds	r17, 0x0238
     1e6:	c0 91 a4 00 	lds	r28, 0x00A4
     1ea:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     1ee:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>
}

int micros(void)
{
	int time=0;
	time=1000*(tot_overflow + (TCNT4-50791)/14745);
     1f2:	ce 01       	movw	r24, r28
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	bc 01       	movw	r22, r24
     1fa:	cd 01       	movw	r24, r26
     1fc:	67 56       	subi	r22, 0x67	; 103
     1fe:	76 4c       	sbci	r23, 0xC6	; 198
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	29 e9       	ldi	r18, 0x99	; 153
     206:	39 e3       	ldi	r19, 0x39	; 57
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__divmodsi4>
     210:	da 01       	movw	r26, r20
     212:	c9 01       	movw	r24, r18
     214:	81 0f       	add	r24, r17
     216:	91 1d       	adc	r25, r1
     218:	a1 1d       	adc	r26, r1
     21a:	b1 1d       	adc	r27, r1
     21c:	8c 01       	movw	r16, r24
     21e:	9d 01       	movw	r18, r26
     220:	48 ee       	ldi	r20, 0xE8	; 232
     222:	53 e0       	ldi	r21, 0x03	; 3
     224:	04 9f       	mul	r16, r20
     226:	c0 01       	movw	r24, r0
     228:	05 9f       	mul	r16, r21
     22a:	90 0d       	add	r25, r0
     22c:	14 9f       	mul	r17, r20
     22e:	90 0d       	add	r25, r0
     230:	11 24       	eor	r1, r1
	start_timer4();
	return time;

}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	08 95       	ret

0000023c <millis>:
int millis(void)
{
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     242:	10 91 38 02 	lds	r17, 0x0238
     246:	c0 91 a4 00 	lds	r28, 0x00A4
     24a:	d0 91 a5 00 	lds	r29, 0x00A5
	start_timer4();
     24e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <start_timer4>

}
int millis(void)
{
	int time=0;
	time=(tot_overflow + (TCNT4-50791)/14745);
     252:	ce 01       	movw	r24, r28
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	67 56       	subi	r22, 0x67	; 103
     25e:	76 4c       	sbci	r23, 0xC6	; 198
     260:	80 40       	sbci	r24, 0x00	; 0
     262:	90 40       	sbci	r25, 0x00	; 0
     264:	29 e9       	ldi	r18, 0x99	; 153
     266:	39 e3       	ldi	r19, 0x39	; 57
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	0e 94 8f 0c 	call	0x191e	; 0x191e <__divmodsi4>
     270:	81 2f       	mov	r24, r17
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	28 0f       	add	r18, r24
     276:	39 1f       	adc	r19, r25
	start_timer4();
	return time;

}
     278:	82 2f       	mov	r24, r18
     27a:	93 2f       	mov	r25, r19
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	08 95       	ret

00000284 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     284:	86 e6       	ldi	r24, 0x66	; 102
     286:	9e e0       	ldi	r25, 0x0E	; 14
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_set_4bit+0x4>
     28c:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     28e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     290:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     292:	80 e3       	ldi	r24, 0x30	; 48
     294:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     296:	42 9a       	sbi	0x08, 2	; 8
     298:	ef ef       	ldi	r30, 0xFF	; 255
     29a:	f7 e4       	ldi	r31, 0x47	; 71
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x18>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_set_4bit+0x1e>
     2a2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2a4:	42 98       	cbi	0x08, 2	; 8
     2a6:	e6 e6       	ldi	r30, 0x66	; 102
     2a8:	fe e0       	ldi	r31, 0x0E	; 14
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_set_4bit+0x26>
     2ae:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2b0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2b4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2b6:	42 9a       	sbi	0x08, 2	; 8
     2b8:	ef ef       	ldi	r30, 0xFF	; 255
     2ba:	f7 e4       	ldi	r31, 0x47	; 71
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_set_4bit+0x38>
     2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <lcd_set_4bit+0x3e>
     2c2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2c4:	42 98       	cbi	0x08, 2	; 8
     2c6:	e6 e6       	ldi	r30, 0x66	; 102
     2c8:	fe e0       	ldi	r31, 0x0E	; 14
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_set_4bit+0x46>
     2ce:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2d0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2d2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
     2d4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2d6:	42 9a       	sbi	0x08, 2	; 8
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
     2da:	97 e4       	ldi	r25, 0x47	; 71
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_set_4bit+0x58>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_set_4bit+0x5e>
     2e2:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2e4:	42 98       	cbi	0x08, 2	; 8
     2e6:	e6 e6       	ldi	r30, 0x66	; 102
     2e8:	fe e0       	ldi	r31, 0x0E	; 14
     2ea:	31 97       	sbiw	r30, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <lcd_set_4bit+0x66>
     2ee:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2f0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2f2:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2f8:	42 9a       	sbi	0x08, 2	; 8
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	97 e4       	ldi	r25, 0x47	; 71
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_set_4bit+0x7a>
     302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_set_4bit+0x80>
     304:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     306:	42 98       	cbi	0x08, 2	; 8
}
     308:	08 95       	ret

0000030a <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     30a:	98 b1       	in	r25, 0x08	; 8
     30c:	9f 70       	andi	r25, 0x0F	; 15
     30e:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     310:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     312:	28 2f       	mov	r18, r24
     314:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     316:	92 2b       	or	r25, r18
     318:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     31a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     31c:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     31e:	42 9a       	sbi	0x08, 2	; 8
     320:	ef ef       	ldi	r30, 0xFF	; 255
     322:	f7 e4       	ldi	r31, 0x47	; 71
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <lcd_wr_command+0x1a>
     328:	00 c0       	rjmp	.+0      	; 0x32a <lcd_wr_command+0x20>
     32a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     32c:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     32e:	98 b1       	in	r25, 0x08	; 8
     330:	9f 70       	andi	r25, 0x0F	; 15
     332:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     334:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     336:	82 95       	swap	r24
     338:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     33a:	89 2b       	or	r24, r25
     33c:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     33e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     340:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     342:	42 9a       	sbi	0x08, 2	; 8
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	97 e4       	ldi	r25, 0x47	; 71
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <lcd_wr_command+0x3e>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <lcd_wr_command+0x44>
     34e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     350:	42 98       	cbi	0x08, 2	; 8
}
     352:	08 95       	ret

00000354 <lcd_init>:
     354:	86 e6       	ldi	r24, 0x66	; 102
     356:	9e e0       	ldi	r25, 0x0E	; 14
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <lcd_init+0x4>
     35c:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     35e:	88 e2       	ldi	r24, 0x28	; 40
     360:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     36a:	86 e0       	ldi	r24, 0x06	; 6
     36c:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     370:	8e e0       	ldi	r24, 0x0E	; 14
     372:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     376:	80 e8       	ldi	r24, 0x80	; 128
     378:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}
     37c:	08 95       	ret

0000037e <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     37e:	98 b1       	in	r25, 0x08	; 8
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     384:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     386:	28 2f       	mov	r18, r24
     388:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     38a:	92 2b       	or	r25, r18
     38c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     38e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     390:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     392:	42 9a       	sbi	0x08, 2	; 8
     394:	ef ef       	ldi	r30, 0xFF	; 255
     396:	f7 e4       	ldi	r31, 0x47	; 71
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_wr_char+0x1a>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_wr_char+0x20>
     39e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3a0:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     3a2:	98 b1       	in	r25, 0x08	; 8
     3a4:	9f 70       	andi	r25, 0x0F	; 15
     3a6:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     3a8:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     3aa:	82 95       	swap	r24
     3ac:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     3ae:	89 2b       	or	r24, r25
     3b0:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     3b2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     3b4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     3b6:	42 9a       	sbi	0x08, 2	; 8
     3b8:	8f ef       	ldi	r24, 0xFF	; 255
     3ba:	97 e4       	ldi	r25, 0x47	; 71
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_wr_char+0x3e>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lcd_wr_char+0x44>
     3c2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     3c4:	42 98       	cbi	0x08, 2	; 8
}
     3c6:	08 95       	ret

000003c8 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}
     3ce:	08 95       	ret

000003d0 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
	while(*str != '\0')
     3d6:	88 81       	ld	r24, Y
     3d8:	88 23       	and	r24, r24
     3da:	31 f0       	breq	.+12     	; 0x3e8 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     3dc:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     3de:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     3e2:	89 91       	ld	r24, Y+
     3e4:	88 23       	and	r24, r24
     3e6:	d9 f7       	brne	.-10     	; 0x3de <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     3ee:	82 30       	cpi	r24, 0x02	; 2
     3f0:	79 f0       	breq	.+30     	; 0x410 <lcd_cursor+0x22>
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	18 f4       	brcc	.+6      	; 0x3fc <lcd_cursor+0xe>
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	c9 f4       	brne	.+50     	; 0x42c <lcd_cursor+0x3e>
     3fa:	05 c0       	rjmp	.+10     	; 0x406 <lcd_cursor+0x18>
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	69 f0       	breq	.+26     	; 0x41a <lcd_cursor+0x2c>
     400:	84 30       	cpi	r24, 0x04	; 4
     402:	a1 f4       	brne	.+40     	; 0x42c <lcd_cursor+0x3e>
     404:	0f c0       	rjmp	.+30     	; 0x424 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     406:	86 2f       	mov	r24, r22
     408:	81 58       	subi	r24, 0x81	; 129
     40a:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
     40e:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     410:	86 2f       	mov	r24, r22
     412:	81 54       	subi	r24, 0x41	; 65
     414:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
     418:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     41a:	86 2f       	mov	r24, r22
     41c:	8d 56       	subi	r24, 0x6D	; 109
     41e:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
     422:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     424:	86 2f       	mov	r24, r22
     426:	8d 52       	subi	r24, 0x2D	; 45
     428:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
     42c:	08 95       	ret

0000042e <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	8a 01       	movw	r16, r20
     438:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     43a:	88 23       	and	r24, r24
     43c:	11 f0       	breq	.+4      	; 0x442 <lcd_print+0x14>
     43e:	66 23       	and	r22, r22
     440:	19 f4       	brne	.+6      	; 0x448 <lcd_print+0x1a>
	{
		lcd_home();
     442:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <lcd_home>
     446:	02 c0       	rjmp	.+4      	; 0x44c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     448:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
	}
	if(digits==5 || flag==1)
     44c:	c5 30       	cpi	r28, 0x05	; 5
     44e:	d1 05       	cpc	r29, r1
     450:	71 f4       	brne	.+28     	; 0x46e <lcd_print+0x40>
	{
		million=value/10000+48;
     452:	c8 01       	movw	r24, r16
     454:	60 e1       	ldi	r22, 0x10	; 16
     456:	77 e2       	ldi	r23, 0x27	; 39
     458:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodhi4>
     45c:	cb 01       	movw	r24, r22
     45e:	c0 96       	adiw	r24, 0x30	; 48
     460:	90 93 33 02 	sts	0x0233, r25
     464:	80 93 32 02 	sts	0x0232, r24
		lcd_wr_char(million);
     468:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
     46c:	03 c0       	rjmp	.+6      	; 0x474 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     46e:	c4 30       	cpi	r28, 0x04	; 4
     470:	d1 05       	cpc	r29, r1
     472:	b9 f4       	brne	.+46     	; 0x4a2 <lcd_print+0x74>
	{
		temp = value/1000;
     474:	c8 01       	movw	r24, r16
     476:	68 ee       	ldi	r22, 0xE8	; 232
     478:	73 e0       	ldi	r23, 0x03	; 3
     47a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodhi4>
     47e:	cb 01       	movw	r24, r22
     480:	70 93 35 02 	sts	0x0235, r23
     484:	60 93 34 02 	sts	0x0234, r22
		thousand = temp%10 + 48;
     488:	6a e0       	ldi	r22, 0x0A	; 10
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodhi4>
     490:	c0 96       	adiw	r24, 0x30	; 48
     492:	90 93 4d 02 	sts	0x024D, r25
     496:	80 93 4c 02 	sts	0x024C, r24
		lcd_wr_char(thousand);
     49a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     4a2:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     4a4:	c3 30       	cpi	r28, 0x03	; 3
     4a6:	d1 05       	cpc	r29, r1
     4a8:	11 f0       	breq	.+4      	; 0x4ae <lcd_print+0x80>
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	b1 f4       	brne	.+44     	; 0x4da <lcd_print+0xac>
	{
		temp = value/100;
     4ae:	c8 01       	movw	r24, r16
     4b0:	64 e6       	ldi	r22, 0x64	; 100
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodhi4>
     4b8:	cb 01       	movw	r24, r22
     4ba:	70 93 35 02 	sts	0x0235, r23
     4be:	60 93 34 02 	sts	0x0234, r22
		hundred = temp%10 + 48;
     4c2:	6a e0       	ldi	r22, 0x0A	; 10
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodhi4>
     4ca:	c0 96       	adiw	r24, 0x30	; 48
     4cc:	90 93 45 02 	sts	0x0245, r25
     4d0:	80 93 44 02 	sts	0x0244, r24
		lcd_wr_char(hundred);
     4d4:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     4da:	c2 30       	cpi	r28, 0x02	; 2
     4dc:	d1 05       	cpc	r29, r1
     4de:	11 f0       	breq	.+4      	; 0x4e4 <lcd_print+0xb6>
     4e0:	81 30       	cpi	r24, 0x01	; 1
     4e2:	b1 f4       	brne	.+44     	; 0x510 <lcd_print+0xe2>
	{
		temp = value/10;
     4e4:	2a e0       	ldi	r18, 0x0A	; 10
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	c8 01       	movw	r24, r16
     4ea:	b9 01       	movw	r22, r18
     4ec:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodhi4>
     4f0:	cb 01       	movw	r24, r22
     4f2:	70 93 35 02 	sts	0x0235, r23
     4f6:	60 93 34 02 	sts	0x0234, r22
		tens = temp%10 + 48;
     4fa:	b9 01       	movw	r22, r18
     4fc:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodhi4>
     500:	c0 96       	adiw	r24, 0x30	; 48
     502:	90 93 3e 02 	sts	0x023E, r25
     506:	80 93 3d 02 	sts	0x023D, r24
		lcd_wr_char(tens);
     50a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
		flag=1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     510:	c1 30       	cpi	r28, 0x01	; 1
     512:	d1 05       	cpc	r29, r1
     514:	11 f0       	breq	.+4      	; 0x51a <lcd_print+0xec>
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	61 f4       	brne	.+24     	; 0x532 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     51a:	c8 01       	movw	r24, r16
     51c:	6a e0       	ldi	r22, 0x0A	; 10
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__udivmodhi4>
     524:	c0 96       	adiw	r24, 0x30	; 48
     526:	90 93 4b 02 	sts	0x024B, r25
     52a:	80 93 4a 02 	sts	0x024A, r24
		lcd_wr_char(unit);
     52e:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	}
	if(digits>5)
     532:	c6 30       	cpi	r28, 0x06	; 6
     534:	d1 05       	cpc	r29, r1
     536:	1c f0       	brlt	.+6      	; 0x53e <lcd_print+0x110>
	{
		lcd_wr_char('E');
     538:	85 e4       	ldi	r24, 0x45	; 69
     53a:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_wr_char>
	}
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <display_clear>:
	

void display_clear(void)
{
	lcd_wr_command(0x01);
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_wr_command>
}	
     54e:	08 95       	ret

00000550 <lcd_port_config>:

//------------------------------------------------------------------------------
//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;      //all the LCD pin's direction set as output
     550:	87 b1       	in	r24, 0x07	; 7
     552:	87 6f       	ori	r24, 0xF7	; 247
     554:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80;    // all the LCD pins are set to logic 0 except PORTC 7
     556:	88 b1       	in	r24, 0x08	; 8
     558:	80 78       	andi	r24, 0x80	; 128
     55a:	88 b9       	out	0x08, r24	; 8
}
     55c:	08 95       	ret

0000055e <twi_init>:

//TWI initialize
// bit rate:72
void twi_init(void)
{
 TWCR = 0x00;   //disable twi
     55e:	ec eb       	ldi	r30, 0xBC	; 188
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	10 82       	st	Z, r1
 TWBR = 0x10; //set bit rate
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	80 93 b8 00 	sts	0x00B8, r24
 TWSR = 0x00; //set prescale
     56a:	10 92 b9 00 	sts	0x00B9, r1
 TWAR = 0x00; //set slave address
     56e:	10 92 ba 00 	sts	0x00BA, r1
 TWCR = 0x04; //enable twi
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	80 83       	st	Z, r24
}
     576:	08 95       	ret

00000578 <write_byte>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     578:	94 ea       	ldi	r25, 0xA4	; 164
     57a:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     57e:	ec eb       	ldi	r30, 0xBC	; 188
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	90 81       	ld	r25, Z
     584:	99 23       	and	r25, r25
     586:	ec f7       	brge	.-6      	; 0x582 <write_byte+0xa>
     588:	ef ef       	ldi	r30, 0xFF	; 255
     58a:	ff e8       	ldi	r31, 0x8F	; 143
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <write_byte+0x14>
     590:	00 c0       	rjmp	.+0      	; 0x592 <write_byte+0x1a>
     592:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLA_W;                                     // load SLA_W into TWDR Register
     594:	96 ea       	ldi	r25, 0xA6	; 166
     596:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     59a:	94 e8       	ldi	r25, 0x84	; 132
     59c:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5a0:	ec eb       	ldi	r30, 0xBC	; 188
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	90 81       	ld	r25, Z
     5a6:	99 23       	and	r25, r25
     5a8:	ec f7       	brge	.-6      	; 0x5a4 <write_byte+0x2c>
     5aa:	ef ef       	ldi	r30, 0xFF	; 255
     5ac:	ff e8       	ldi	r31, 0x8F	; 143
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <write_byte+0x36>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <write_byte+0x3c>
     5b4:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     5b6:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     5ba:	94 e8       	ldi	r25, 0x84	; 132
     5bc:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5c0:	ec eb       	ldi	r30, 0xBC	; 188
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	90 81       	ld	r25, Z
     5c6:	99 23       	and	r25, r25
     5c8:	ec f7       	brge	.-6      	; 0x5c4 <write_byte+0x4c>
     5ca:	ef ef       	ldi	r30, 0xFF	; 255
     5cc:	ff e8       	ldi	r31, 0x8F	; 143
     5ce:	31 97       	sbiw	r30, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <write_byte+0x56>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <write_byte+0x5c>
     5d4:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     5d6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     5da:	84 e8       	ldi	r24, 0x84	; 132
     5dc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     5e0:	ec eb       	ldi	r30, 0xBC	; 188
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	88 23       	and	r24, r24
     5e8:	ec f7       	brge	.-6      	; 0x5e4 <write_byte+0x6c>
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	9f e8       	ldi	r25, 0x8F	; 143
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <write_byte+0x76>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <write_byte+0x7c>
     5f4:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     5f6:	84 e9       	ldi	r24, 0x94	; 148
     5f8:	80 93 bc 00 	sts	0x00BC, r24
}
     5fc:	08 95       	ret

000005fe <read_byte>:
unsigned char read_byte(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     5fe:	94 ea       	ldi	r25, 0xA4	; 164
     600:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     604:	ec eb       	ldi	r30, 0xBC	; 188
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	90 81       	ld	r25, Z
     60a:	99 23       	and	r25, r25
     60c:	ec f7       	brge	.-6      	; 0x608 <read_byte+0xa>

 

 TWDR = SLA_W;									   // load SLA_W into TWDR Register
     60e:	96 ea       	ldi	r25, 0xA6	; 166
     610:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     614:	94 e8       	ldi	r25, 0x84	; 132
     616:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     61a:	ec eb       	ldi	r30, 0xBC	; 188
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	90 81       	ld	r25, Z
     620:	99 23       	and	r25, r25
     622:	ec f7       	brge	.-6      	; 0x61e <read_byte+0x20>

 TWDR = address;                                   // send address of register byte want to access register
     624:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     628:	84 e8       	ldi	r24, 0x84	; 132
     62a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     62e:	ec eb       	ldi	r30, 0xBC	; 188
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	ec f7       	brge	.-6      	; 0x632 <read_byte+0x34>
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     638:	84 ea       	ldi	r24, 0xA4	; 164
     63a:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <read_byte+0x44>


 
 TWDR = SLA_R;									   // load SLA_R into TWDR Register
     648:	87 ea       	ldi	r24, 0xA7	; 167
     64a:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     64e:	84 e8       	ldi	r24, 0x84	; 132
     650:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     654:	ec eb       	ldi	r30, 0xBC	; 188
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	88 23       	and	r24, r24
     65c:	ec f7       	brge	.-6      	; 0x658 <read_byte+0x5a>
 
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     65e:	84 e8       	ldi	r24, 0x84	; 132
     660:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     664:	ec eb       	ldi	r30, 0xBC	; 188
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	88 23       	and	r24, r24
     66c:	ec f7       	brge	.-6      	; 0x668 <read_byte+0x6a>
 rtc_recv_data = TWDR;
     66e:	eb eb       	ldi	r30, 0xBB	; 187
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
 
 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     674:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     676:	94 e8       	ldi	r25, 0x84	; 132
     678:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     67c:	ec eb       	ldi	r30, 0xBC	; 188
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	90 81       	ld	r25, Z
     682:	99 23       	and	r25, r25
     684:	ec f7       	brge	.-6      	; 0x680 <read_byte+0x82>
  
 return(rtc_recv_data);                            // return the read value to called function
}
     686:	08 95       	ret

00000688 <init_devices>:


// initialise the devices 
void init_devices()
{
 cli();              // disable all interrupts 
     688:	f8 94       	cli
 lcd_port_config();  // configure the LCD port 
     68a:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_port_config>
 lcd_set_4bit();
     68e:	0e 94 42 01 	call	0x284	; 0x284 <lcd_set_4bit>
 lcd_init();
     692:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_init>
 twi_init();         // configur the I2cC, i.e TWI module 
     696:	0e 94 af 02 	call	0x55e	; 0x55e <twi_init>
 sei();              // re-enable interrupts
     69a:	78 94       	sei
 //all peripherals are now initialized
}
     69c:	08 95       	ret

0000069e <pr_int>:

void pr_int(int a,int b,int c,int d) /* get negative values*/
{
     69e:	ef 92       	push	r14
     6a0:	ff 92       	push	r15
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	c8 2f       	mov	r28, r24
     6ac:	d6 2f       	mov	r29, r22
     6ae:	8a 01       	movw	r16, r20
     6b0:	79 01       	movw	r14, r18
	if (c<0)
     6b2:	55 23       	and	r21, r21
     6b4:	a4 f4       	brge	.+40     	; 0x6de <pr_int+0x40>
	{
		lcd_cursor(a,b);
     6b6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
		lcd_string("-");
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_string>
		lcd_print(a,b+1,abs(c),d);
     6c2:	6d 2f       	mov	r22, r29
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	a8 01       	movw	r20, r16
     6c8:	11 23       	and	r17, r17
     6ca:	24 f4       	brge	.+8      	; 0x6d4 <pr_int+0x36>
     6cc:	44 27       	eor	r20, r20
     6ce:	55 27       	eor	r21, r21
     6d0:	40 1b       	sub	r20, r16
     6d2:	51 0b       	sbc	r21, r17
     6d4:	8c 2f       	mov	r24, r28
     6d6:	97 01       	movw	r18, r14
     6d8:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
     6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <pr_int+0x5a>
	} 
	else
	{
		lcd_cursor(a,b);
     6de:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lcd_cursor>
		lcd_string("+");
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_string>
		lcd_print(a,b+1,c,d);
     6ea:	6d 2f       	mov	r22, r29
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	8c 2f       	mov	r24, r28
     6f0:	a8 01       	movw	r20, r16
     6f2:	97 01       	movw	r18, r14
     6f4:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	}
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	08 95       	ret

00000706 <sign>:
		return (n-65536);
	}
	else
		return n;
		
}
     706:	08 95       	ret

00000708 <init_adxl>:
// Main Programme start here.
//-------------------------------------------------------------------------------
void init_adxl(void)
{   
 
 init_devices();
     708:	0e 94 44 03 	call	0x688	; 0x688 <init_devices>

	write_byte(0x0,0x2D);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	6d e2       	ldi	r22, 0x2D	; 45
     710:	0e 94 bc 02 	call	0x578	; 0x578 <write_byte>
	write_byte(0x8,0x2D);
     714:	88 e0       	ldi	r24, 0x08	; 8
     716:	6d e2       	ldi	r22, 0x2D	; 45
     718:	0e 94 bc 02 	call	0x578	; 0x578 <write_byte>
}
     71c:	08 95       	ret

0000071e <acc_angle>:

int acc_angle(void)
{
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
		int x_acc,y_acc,z_acc;
		//long x,y,z;
		float angle;
 
	  
	   x_byte1 = read_byte(X1);
     72e:	82 e3       	ldi	r24, 0x32	; 50
     730:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
	   //x_byte1=(x_byte1*1000)/256;
	   //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte(X2);
     734:	83 e3       	ldi	r24, 0x33	; 51
     736:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
	   //lcd_print(2,1,abs(x_byte2),3);
	   
	   y_byte1 = read_byte(Y1);
     73a:	84 e3       	ldi	r24, 0x34	; 52
     73c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
     740:	08 2f       	mov	r16, r24
	   //lcd_print(1,6,y_byte1,3);
	   
	   y_byte2 = read_byte(Y2);
     742:	85 e3       	ldi	r24, 0x35	; 53
     744:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
     748:	d8 2f       	mov	r29, r24
	   //lcd_print(2,6,y_byte2,3);
	   
	   z_byte1 = read_byte(Z1);
     74a:	86 e3       	ldi	r24, 0x36	; 54
     74c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
     750:	c8 2f       	mov	r28, r24
	   //lcd_print(1,10,z_byte1,3);
	   
	   z_byte2 = read_byte(Z2);
     752:	87 e3       	ldi	r24, 0x37	; 55
     754:	0e 94 ff 02 	call	0x5fe	; 0x5fe <read_byte>
     758:	c8 2e       	mov	r12, r24
	  x_acc=sign(x_byte);
	  
	  //pr_int(1,1,x_byte,3); 
	  
	  y_byte=y_byte2;
	  y_byte = (y_byte << 8);
     75a:	3d 2f       	mov	r19, r29
     75c:	20 e0       	ldi	r18, 0x00	; 0
	  y_byte |= y_byte1;
     75e:	80 2f       	mov	r24, r16
     760:	90 e0       	ldi	r25, 0x00	; 0
	  y_acc=sign(y_byte);
     762:	82 2b       	or	r24, r18
     764:	93 2b       	or	r25, r19
     766:	0e 94 83 03 	call	0x706	; 0x706 <sign>
     76a:	8c 01       	movw	r16, r24
	  
	  //pr_int(2,5,y_byte,3); 	
	  
	  z_byte=z_byte2;
	  z_byte = (z_byte << 8);
     76c:	3c 2d       	mov	r19, r12
     76e:	20 e0       	ldi	r18, 0x00	; 0
	  z_byte |= z_byte1;
     770:	8c 2f       	mov	r24, r28
     772:	90 e0       	ldi	r25, 0x00	; 0
	  z_acc=sign(z_byte);
     774:	82 2b       	or	r24, r18
     776:	93 2b       	or	r25, r19
     778:	0e 94 83 03 	call	0x706	; 0x706 <sign>
     77c:	ec 01       	movw	r28, r24
	  
	  
	  //pr_int(1,10,z_byte,3);  
	  
	  angle=(atan((y_acc*1.0)/(z_acc*1.0)));
     77e:	b8 01       	movw	r22, r16
     780:	88 27       	eor	r24, r24
     782:	77 fd       	sbrc	r23, 7
     784:	80 95       	com	r24
     786:	98 2f       	mov	r25, r24
     788:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	be 01       	movw	r22, r28
     792:	88 27       	eor	r24, r24
     794:	77 fd       	sbrc	r23, 7
     796:	80 95       	com	r24
     798:	98 2f       	mov	r25, r24
     79a:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	0e 94 87 0a 	call	0x150e	; 0x150e <__divsf3>
     7aa:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <atan>
	  angle *= 1800.0/3.14;
     7ae:	26 ee       	ldi	r18, 0xE6	; 230
     7b0:	3f e4       	ldi	r19, 0x4F	; 79
     7b2:	4f e0       	ldi	r20, 0x0F	; 15
     7b4:	54 e4       	ldi	r21, 0x44	; 68
     7b6:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
	  //pr_int(1,1,angle,3);
	  
	return angle;
     7ba:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fixsfsi>
}
     7be:	86 2f       	mov	r24, r22
     7c0:	97 2f       	mov	r25, r23
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	08 95       	ret

000007d4 <write_byte_gyro>:
// Outputs:		none
// Description:	Writes a byte to the RTC given the address register 
//------------------------------------------------------------------------------
void write_byte_gyro(unsigned char data_out,unsigned char address)
{
 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send START condition  
     7d4:	94 ea       	ldi	r25, 0xA4	; 164
     7d6:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     7da:	ec eb       	ldi	r30, 0xBC	; 188
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	90 81       	ld	r25, Z
     7e0:	99 23       	and	r25, r25
     7e2:	ec f7       	brge	.-6      	; 0x7de <write_byte_gyro+0xa>
     7e4:	ef ef       	ldi	r30, 0xFF	; 255
     7e6:	ff e8       	ldi	r31, 0x8F	; 143
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <write_byte_gyro+0x14>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <write_byte_gyro+0x1a>
     7ee:	00 00       	nop
 _delay_ms(10);                                    

 TWDR = SLAVE_W;                                     // load SLA_W into TWDR Register
     7f0:	92 ed       	ldi	r25, 0xD2	; 210
     7f2:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     7f6:	94 e8       	ldi	r25, 0x84	; 132
     7f8:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     7fc:	ec eb       	ldi	r30, 0xBC	; 188
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	90 81       	ld	r25, Z
     802:	99 23       	and	r25, r25
     804:	ec f7       	brge	.-6      	; 0x800 <write_byte_gyro+0x2c>
     806:	ef ef       	ldi	r30, 0xFF	; 255
     808:	ff e8       	ldi	r31, 0x8F	; 143
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <write_byte_gyro+0x36>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <write_byte_gyro+0x3c>
     810:	00 00       	nop
 _delay_ms(10);

 TWDR = address;                                   // send address of register byte want to access register
     812:	60 93 bb 00 	sts	0x00BB, r22
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of address 
     816:	94 e8       	ldi	r25, 0x84	; 132
     818:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     81c:	ec eb       	ldi	r30, 0xBC	; 188
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	90 81       	ld	r25, Z
     822:	99 23       	and	r25, r25
     824:	ec f7       	brge	.-6      	; 0x820 <write_byte_gyro+0x4c>
     826:	ef ef       	ldi	r30, 0xFF	; 255
     828:	ff e8       	ldi	r31, 0x8F	; 143
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <write_byte_gyro+0x56>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <write_byte_gyro+0x5c>
     830:	00 00       	nop
 _delay_ms(10);

 TWDR = data_out;                       // convert the character to equivalent BCD value and load into TWDR
     832:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of data byte
     836:	84 e8       	ldi	r24, 0x84	; 132
     838:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     83c:	ec eb       	ldi	r30, 0xBC	; 188
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	88 23       	and	r24, r24
     844:	ec f7       	brge	.-6      	; 0x840 <write_byte_gyro+0x6c>
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	9f e8       	ldi	r25, 0x8F	; 143
     84a:	01 97       	sbiw	r24, 0x01	; 1
     84c:	f1 f7       	brne	.-4      	; 0x84a <write_byte_gyro+0x76>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <write_byte_gyro+0x7c>
     850:	00 00       	nop
 _delay_ms(10);

 TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);       // send STOP condition
     852:	84 e9       	ldi	r24, 0x94	; 148
     854:	80 93 bc 00 	sts	0x00BC, r24
}
     858:	08 95       	ret

0000085a <read_byte_gyro>:
unsigned char read_byte_gyro(unsigned char address)
{  
 unsigned char rtc_recv_data;

 
TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);      // send START condition  
     85a:	94 ea       	ldi	r25, 0xA4	; 164
     85c:	90 93 bc 00 	sts	0x00BC, r25
while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     860:	ec eb       	ldi	r30, 0xBC	; 188
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	90 81       	ld	r25, Z
     866:	99 23       	and	r25, r25
     868:	ec f7       	brge	.-6      	; 0x864 <read_byte_gyro+0xa>
 //_delay_ms(10);

 

 TWDR = SLAVE_W;									   // load SLA_W into TWDR Register
     86a:	92 ed       	ldi	r25, 0xD2	; 210
     86c:	90 93 bb 00 	sts	0x00BB, r25
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     870:	94 e8       	ldi	r25, 0x84	; 132
     872:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     876:	ec eb       	ldi	r30, 0xBC	; 188
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	90 81       	ld	r25, Z
     87c:	99 23       	and	r25, r25
     87e:	ec f7       	brge	.-6      	; 0x87a <read_byte_gyro+0x20>
 //_delay_ms(10); 

 TWDR = address;                                   // send address of register byte want to access register
     880:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of slave address 
     884:	84 e8       	ldi	r24, 0x84	; 132
     886:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     88a:	ec eb       	ldi	r30, 0xBC	; 188
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	88 23       	and	r24, r24
     892:	ec f7       	brge	.-6      	; 0x88e <read_byte_gyro+0x34>
// _delay_ms(10);
 


 TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);       // send RESTART condition
     894:	84 ea       	ldi	r24, 0xA4	; 164
     896:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     89a:	ec eb       	ldi	r30, 0xBC	; 188
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	88 23       	and	r24, r24
     8a2:	ec f7       	brge	.-6      	; 0x89e <read_byte_gyro+0x44>
 //_delay_ms(10);


 
 TWDR = SLAVE_R;									   // load SLA_R into TWDR Register
     8a4:	83 ed       	ldi	r24, 0xD3	; 211
     8a6:	80 93 bb 00 	sts	0x00BB, r24
 TWCR  = (1<<TWINT) | (0<<TWSTA) | (1<<TWEN);      // clear TWINT flag to start tramnsmission of slave address 
     8aa:	84 e8       	ldi	r24, 0x84	; 132
     8ac:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8b0:	ec eb       	ldi	r30, 0xBC	; 188
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	88 23       	and	r24, r24
     8b8:	ec f7       	brge	.-6      	; 0x8b4 <read_byte_gyro+0x5a>
 //_delay_ms(10);
 
 

 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to read the addressed register
     8ba:	84 e8       	ldi	r24, 0x84	; 132
     8bc:	80 93 bc 00 	sts	0x00BC, r24
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8c0:	ec eb       	ldi	r30, 0xBC	; 188
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	88 23       	and	r24, r24
     8c8:	ec f7       	brge	.-6      	; 0x8c4 <read_byte_gyro+0x6a>
 rtc_recv_data = TWDR;
     8ca:	eb eb       	ldi	r30, 0xBB	; 187
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
 //_delay_ms(10);
 

 TWDR = 00;                                        // laod the NO-ACK value to TWDR register 
     8d0:	10 82       	st	Z, r1
 TWCR  = (1<<TWINT) | (1<<TWEN);                   // clear TWINT flag to start tramnsmission of NO_ACK signal
     8d2:	94 e8       	ldi	r25, 0x84	; 132
     8d4:	90 93 bc 00 	sts	0x00BC, r25
 while(!(TWCR & (1<<TWINT)));                      // wait for TWINT Flag set
     8d8:	ec eb       	ldi	r30, 0xBC	; 188
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	90 81       	ld	r25, Z
     8de:	99 23       	and	r25, r25
     8e0:	ec f7       	brge	.-6      	; 0x8dc <read_byte_gyro+0x82>
 //_delay_ms(10);
  
 return(rtc_recv_data);                            // return the read value to called function
}
     8e2:	08 95       	ret

000008e4 <init_gyro>:

void init_gyro(void)
{   
 

	 write_byte_gyro(0x0F,0x20);       //Normal mode of control reg.1
     8e4:	8f e0       	ldi	r24, 0x0F	; 15
     8e6:	60 e2       	ldi	r22, 0x20	; 32
     8e8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <write_byte_gyro>
}
     8ec:	08 95       	ret

000008ee <comp_filter>:

//Complementary filter
float comp_filter(float newAngle,  float newRate) 
{   
     8ee:	4f 92       	push	r4
     8f0:	5f 92       	push	r5
     8f2:	6f 92       	push	r6
     8f4:	7f 92       	push	r7
     8f6:	8f 92       	push	r8
     8f8:	9f 92       	push	r9
     8fa:	af 92       	push	r10
     8fc:	bf 92       	push	r11
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	00 d0       	rcall	.+0      	; 0x910 <comp_filter+0x22>
     910:	0f 92       	push	r0
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	29 83       	std	Y+1, r18	; 0x01
     918:	3a 83       	std	Y+2, r19	; 0x02
     91a:	4b 83       	std	Y+3, r20	; 0x03
     91c:	5c 83       	std	Y+4, r21	; 0x04
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     91e:	80 90 2a 02 	lds	r8, 0x022A
     922:	90 90 2b 02 	lds	r9, 0x022B
     926:	a0 90 2c 02 	lds	r10, 0x022C
     92a:	b0 90 2d 02 	lds	r11, 0x022D
     92e:	a5 01       	movw	r20, r10
     930:	94 01       	movw	r18, r8
     932:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
     936:	c6 2e       	mov	r12, r22
     938:	d7 2e       	mov	r13, r23
     93a:	f8 2e       	mov	r15, r24
     93c:	e9 2e       	mov	r14, r25
	filterTerm2 += filterTerm0 * dt;
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     93e:	38 2f       	mov	r19, r24
     940:	86 2f       	mov	r24, r22
     942:	9d 2d       	mov	r25, r13
     944:	af 2d       	mov	r26, r15
     946:	be 2d       	mov	r27, r14
     948:	bc 01       	movw	r22, r24
     94a:	cd 01       	movw	r24, r26
     94c:	0c 2d       	mov	r16, r12
     94e:	1d 2d       	mov	r17, r13
     950:	23 2f       	mov	r18, r19
     952:	3b 2f       	mov	r19, r27
     954:	a9 01       	movw	r20, r18
     956:	98 01       	movw	r18, r16
     958:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	40 ef       	ldi	r20, 0xF0	; 240
     962:	51 e4       	ldi	r21, 0x41	; 65
     964:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     968:	2b 01       	movw	r4, r22
     96a:	3c 01       	movw	r6, r24
	float filterTerm2;
	float timeConstant;

	timeConstant=30; // default 1.0

	filterTerm0 = (newAngle - filterAngle) * timeConstant * timeConstant;
     96c:	80 2f       	mov	r24, r16
     96e:	91 2f       	mov	r25, r17
     970:	af 2d       	mov	r26, r15
     972:	be 2d       	mov	r27, r14
     974:	bc 01       	movw	r22, r24
     976:	cd 01       	movw	r24, r26
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 ef       	ldi	r20, 0xF0	; 240
     97e:	51 e4       	ldi	r21, 0x41	; 65
     980:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 ef       	ldi	r20, 0xF0	; 240
     98a:	51 e4       	ldi	r21, 0x41	; 65
     98c:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
	filterTerm2 += filterTerm0 * dt;
     990:	2a e0       	ldi	r18, 0x0A	; 10
     992:	37 ed       	ldi	r19, 0xD7	; 215
     994:	43 e2       	ldi	r20, 0x23	; 35
     996:	5c e3       	ldi	r21, 0x3C	; 60
     998:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	a9 01       	movw	r20, r18
     9a2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     9a6:	9b 01       	movw	r18, r22
     9a8:	ac 01       	movw	r20, r24
	filterTerm1 = filterTerm2 + ((newAngle - filterAngle) * 2 * timeConstant) + newRate;
     9aa:	c3 01       	movw	r24, r6
     9ac:	b2 01       	movw	r22, r4
     9ae:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	4b 81       	ldd	r20, Y+3	; 0x03
     9b8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ba:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
	filterAngle = (filterTerm1 * dt) + filterAngle;
     9be:	2a e0       	ldi	r18, 0x0A	; 10
     9c0:	37 ed       	ldi	r19, 0xD7	; 215
     9c2:	43 e2       	ldi	r20, 0x23	; 35
     9c4:	5c e3       	ldi	r21, 0x3C	; 60
     9c6:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	c5 01       	movw	r24, r10
     9d0:	b4 01       	movw	r22, r8
     9d2:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     9d6:	26 2f       	mov	r18, r22
     9d8:	37 2f       	mov	r19, r23
     9da:	f8 2f       	mov	r31, r24
     9dc:	e9 2f       	mov	r30, r25
     9de:	46 2f       	mov	r20, r22
     9e0:	57 2f       	mov	r21, r23
     9e2:	68 2f       	mov	r22, r24
     9e4:	79 2f       	mov	r23, r25
     9e6:	40 93 2a 02 	sts	0x022A, r20
     9ea:	50 93 2b 02 	sts	0x022B, r21
     9ee:	60 93 2c 02 	sts	0x022C, r22
     9f2:	70 93 2d 02 	sts	0x022D, r23

	return filterAngle; // This is actually the current angle, but is stored for the next iteration
}
     9f6:	82 2f       	mov	r24, r18
     9f8:	93 2f       	mov	r25, r19
     9fa:	af 2f       	mov	r26, r31
     9fc:	be 2f       	mov	r27, r30
     9fe:	bc 01       	movw	r22, r24
     a00:	cd 01       	movw	r24, r26
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	df 90       	pop	r13
     a18:	cf 90       	pop	r12
     a1a:	bf 90       	pop	r11
     a1c:	af 90       	pop	r10
     a1e:	9f 90       	pop	r9
     a20:	8f 90       	pop	r8
     a22:	7f 90       	pop	r7
     a24:	6f 90       	pop	r6
     a26:	5f 90       	pop	r5
     a28:	4f 90       	pop	r4
     a2a:	08 95       	ret

00000a2c <gyro_Rate>:
//-------------------------------------
// Main Programme start here.
//-------------------------------------------------------------------------------
float gyro_Rate(void)
{   
     a2c:	cf 93       	push	r28
  int16_t x_ang=0;
  int filt_ang=0;
 
	   
	   
	  x_byte1 = read_byte_gyro(XL);
     a2e:	88 e2       	ldi	r24, 0x28	; 40
     a30:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
     a34:	c8 2f       	mov	r28, r24
	  //lcd_print(1,1,x_byte1,3);
	   
	   x_byte2 = read_byte_gyro(XH);
     a36:	89 e2       	ldi	r24, 0x29	; 41
     a38:	0e 94 2d 04 	call	0x85a	; 0x85a <read_byte_gyro>
	   //lcd_print(2,1,x_byte2,3);
	   
	   x_byte = x_byte2;   // to print 10 bit integer value on LCD
	   x_byte = (x_byte << 8);
     a3c:	38 2f       	mov	r19, r24
     a3e:	20 e0       	ldi	r18, 0x00	; 0
	   x_byte |= x_byte1;
     a40:	8c 2f       	mov	r24, r28
     a42:	90 e0       	ldi	r25, 0x00	; 0
	   x_ang = sign(x_byte);
     a44:	82 2b       	or	r24, r18
     a46:	93 2b       	or	r25, r19
     a48:	0e 94 83 03 	call	0x706	; 0x706 <sign>
	   x_ang /=100;
     a4c:	64 e6       	ldi	r22, 0x64	; 100
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__divmodhi4>
	   return x_ang;
     a54:	88 27       	eor	r24, r24
     a56:	77 fd       	sbrc	r23, 7
     a58:	80 95       	com	r24
     a5a:	98 2f       	mov	r25, r24
     a5c:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
}
     a60:	46 2f       	mov	r20, r22
     a62:	57 2f       	mov	r21, r23
     a64:	68 2f       	mov	r22, r24
     a66:	79 2f       	mov	r23, r25
     a68:	cb 01       	movw	r24, r22
     a6a:	ba 01       	movw	r22, r20
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <Compute>:
double error =0;



void Compute()
{
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
	/*How long since we last calculated*/
	//double timeChange = (double)millis();
	
	/*Compute all the working error variables*/
	error = Input - Setpoint;
     a84:	60 91 46 02 	lds	r22, 0x0246
     a88:	70 91 47 02 	lds	r23, 0x0247
     a8c:	80 91 48 02 	lds	r24, 0x0248
     a90:	90 91 49 02 	lds	r25, 0x0249
     a94:	60 93 04 02 	sts	0x0204, r22
     a98:	70 93 05 02 	sts	0x0205, r23
     a9c:	80 93 06 02 	sts	0x0206, r24
     aa0:	90 93 07 02 	sts	0x0207, r25
	errSum += error+lastErr+lastErr2+lastErr3;
     aa4:	20 91 16 02 	lds	r18, 0x0216
     aa8:	30 91 17 02 	lds	r19, 0x0217
     aac:	40 91 18 02 	lds	r20, 0x0218
     ab0:	50 91 19 02 	lds	r21, 0x0219
     ab4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     ab8:	20 91 12 02 	lds	r18, 0x0212
     abc:	30 91 13 02 	lds	r19, 0x0213
     ac0:	40 91 14 02 	lds	r20, 0x0214
     ac4:	50 91 15 02 	lds	r21, 0x0215
     ac8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     acc:	20 91 0e 02 	lds	r18, 0x020E
     ad0:	30 91 0f 02 	lds	r19, 0x020F
     ad4:	40 91 10 02 	lds	r20, 0x0210
     ad8:	50 91 11 02 	lds	r21, 0x0211
     adc:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     ae0:	20 91 1a 02 	lds	r18, 0x021A
     ae4:	30 91 1b 02 	lds	r19, 0x021B
     ae8:	40 91 1c 02 	lds	r20, 0x021C
     aec:	50 91 1d 02 	lds	r21, 0x021D
     af0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     af4:	86 2e       	mov	r8, r22
     af6:	c7 2e       	mov	r12, r23
     af8:	d8 2f       	mov	r29, r24
     afa:	c9 2f       	mov	r28, r25
     afc:	86 2f       	mov	r24, r22
     afe:	9c 2d       	mov	r25, r12
     b00:	ad 2f       	mov	r26, r29
     b02:	bc 2f       	mov	r27, r28
     b04:	80 93 1a 02 	sts	0x021A, r24
     b08:	90 93 1b 02 	sts	0x021B, r25
     b0c:	a0 93 1c 02 	sts	0x021C, r26
     b10:	b0 93 1d 02 	sts	0x021D, r27
	if (errSum >= 255)
     b14:	bc 01       	movw	r22, r24
     b16:	cd 01       	movw	r24, r26
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	4f e7       	ldi	r20, 0x7F	; 127
     b1e:	53 e4       	ldi	r21, 0x43	; 67
     b20:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__gesf2>
     b24:	88 23       	and	r24, r24
     b26:	6c f0       	brlt	.+26     	; 0xb42 <Compute+0xd2>
	{
		errSum = 255;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	af e7       	ldi	r26, 0x7F	; 127
     b2e:	b3 e4       	ldi	r27, 0x43	; 67
     b30:	80 93 1a 02 	sts	0x021A, r24
     b34:	90 93 1b 02 	sts	0x021B, r25
     b38:	a0 93 1c 02 	sts	0x021C, r26
     b3c:	b0 93 1d 02 	sts	0x021D, r27
     b40:	1a c0       	rjmp	.+52     	; 0xb76 <Compute+0x106>
	}
	else if (errSum <= -255)
     b42:	88 2d       	mov	r24, r8
     b44:	9c 2d       	mov	r25, r12
     b46:	ad 2f       	mov	r26, r29
     b48:	bc 2f       	mov	r27, r28
     b4a:	bc 01       	movw	r22, r24
     b4c:	cd 01       	movw	r24, r26
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	4f e7       	ldi	r20, 0x7F	; 127
     b54:	53 ec       	ldi	r21, 0xC3	; 195
     b56:	0e 94 83 0a 	call	0x1506	; 0x1506 <__cmpsf2>
     b5a:	18 16       	cp	r1, r24
     b5c:	64 f0       	brlt	.+24     	; 0xb76 <Compute+0x106>
	{
		errSum = -255;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	af e7       	ldi	r26, 0x7F	; 127
     b64:	b3 ec       	ldi	r27, 0xC3	; 195
     b66:	80 93 1a 02 	sts	0x021A, r24
     b6a:	90 93 1b 02 	sts	0x021B, r25
     b6e:	a0 93 1c 02 	sts	0x021C, r26
     b72:	b0 93 1d 02 	sts	0x021D, r27
	}
	double dErr = (error - lastErr);
     b76:	c0 90 04 02 	lds	r12, 0x0204
     b7a:	d0 90 05 02 	lds	r13, 0x0205
     b7e:	e0 90 06 02 	lds	r14, 0x0206
     b82:	f0 90 07 02 	lds	r15, 0x0207
	
	/*Compute PID Output*/
	Output = kp * error + ki * errSum + kd * dErr;
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	20 91 4e 02 	lds	r18, 0x024E
     b8e:	30 91 4f 02 	lds	r19, 0x024F
     b92:	40 91 50 02 	lds	r20, 0x0250
     b96:	50 91 51 02 	lds	r21, 0x0251
     b9a:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     b9e:	4b 01       	movw	r8, r22
     ba0:	5c 01       	movw	r10, r24
     ba2:	60 91 3f 02 	lds	r22, 0x023F
     ba6:	70 91 40 02 	lds	r23, 0x0240
     baa:	80 91 41 02 	lds	r24, 0x0241
     bae:	90 91 42 02 	lds	r25, 0x0242
     bb2:	20 91 1a 02 	lds	r18, 0x021A
     bb6:	30 91 1b 02 	lds	r19, 0x021B
     bba:	40 91 1c 02 	lds	r20, 0x021C
     bbe:	50 91 1d 02 	lds	r21, 0x021D
     bc2:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	c5 01       	movw	r24, r10
     bcc:	b4 01       	movw	r22, r8
     bce:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     bd2:	4b 01       	movw	r8, r22
     bd4:	5c 01       	movw	r10, r24
	}
	else if (errSum <= -255)
	{
		errSum = -255;
	}
	double dErr = (error - lastErr);
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	20 91 16 02 	lds	r18, 0x0216
     bde:	30 91 17 02 	lds	r19, 0x0217
     be2:	40 91 18 02 	lds	r20, 0x0218
     be6:	50 91 19 02 	lds	r21, 0x0219
     bea:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
	
	/*Compute PID Output*/
	Output = kp * error + ki * errSum + kd * dErr;
     bee:	20 91 2e 02 	lds	r18, 0x022E
     bf2:	30 91 2f 02 	lds	r19, 0x022F
     bf6:	40 91 30 02 	lds	r20, 0x0230
     bfa:	50 91 31 02 	lds	r21, 0x0231
     bfe:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     c02:	9b 01       	movw	r18, r22
     c04:	ac 01       	movw	r20, r24
     c06:	c5 01       	movw	r24, r10
     c08:	b4 01       	movw	r22, r8
     c0a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     c0e:	d6 2f       	mov	r29, r22
     c10:	c7 2f       	mov	r28, r23
     c12:	88 2e       	mov	r8, r24
     c14:	c9 2e       	mov	r12, r25
     c16:	86 2f       	mov	r24, r22
     c18:	9c 2f       	mov	r25, r28
     c1a:	a8 2d       	mov	r26, r8
     c1c:	bc 2d       	mov	r27, r12
     c1e:	80 93 39 02 	sts	0x0239, r24
     c22:	90 93 3a 02 	sts	0x023A, r25
     c26:	a0 93 3b 02 	sts	0x023B, r26
     c2a:	b0 93 3c 02 	sts	0x023C, r27
	if (Output >= 255)
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	4f e7       	ldi	r20, 0x7F	; 127
     c38:	53 e4       	ldi	r21, 0x43	; 67
     c3a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__gesf2>
     c3e:	88 23       	and	r24, r24
     c40:	6c f0       	brlt	.+26     	; 0xc5c <Compute+0x1ec>
	{
		Output = 255;
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	af e7       	ldi	r26, 0x7F	; 127
     c48:	b3 e4       	ldi	r27, 0x43	; 67
     c4a:	80 93 39 02 	sts	0x0239, r24
     c4e:	90 93 3a 02 	sts	0x023A, r25
     c52:	a0 93 3b 02 	sts	0x023B, r26
     c56:	b0 93 3c 02 	sts	0x023C, r27
     c5a:	1a c0       	rjmp	.+52     	; 0xc90 <Compute+0x220>
	}
	else if (Output <= -255)
     c5c:	8d 2f       	mov	r24, r29
     c5e:	9c 2f       	mov	r25, r28
     c60:	a8 2d       	mov	r26, r8
     c62:	bc 2d       	mov	r27, r12
     c64:	bc 01       	movw	r22, r24
     c66:	cd 01       	movw	r24, r26
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	4f e7       	ldi	r20, 0x7F	; 127
     c6e:	53 ec       	ldi	r21, 0xC3	; 195
     c70:	0e 94 83 0a 	call	0x1506	; 0x1506 <__cmpsf2>
     c74:	18 16       	cp	r1, r24
     c76:	64 f0       	brlt	.+24     	; 0xc90 <Compute+0x220>
	{
		Output = -255;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	af e7       	ldi	r26, 0x7F	; 127
     c7e:	b3 ec       	ldi	r27, 0xC3	; 195
     c80:	80 93 39 02 	sts	0x0239, r24
     c84:	90 93 3a 02 	sts	0x023A, r25
     c88:	a0 93 3b 02 	sts	0x023B, r26
     c8c:	b0 93 3c 02 	sts	0x023C, r27
	}
	
	/*Remember some variables for next time*/
	lastErr3 = lastErr2;
     c90:	80 91 12 02 	lds	r24, 0x0212
     c94:	90 91 13 02 	lds	r25, 0x0213
     c98:	a0 91 14 02 	lds	r26, 0x0214
     c9c:	b0 91 15 02 	lds	r27, 0x0215
     ca0:	80 93 0e 02 	sts	0x020E, r24
     ca4:	90 93 0f 02 	sts	0x020F, r25
     ca8:	a0 93 10 02 	sts	0x0210, r26
     cac:	b0 93 11 02 	sts	0x0211, r27
	lastErr2=lastErr;
     cb0:	80 91 16 02 	lds	r24, 0x0216
     cb4:	90 91 17 02 	lds	r25, 0x0217
     cb8:	a0 91 18 02 	lds	r26, 0x0218
     cbc:	b0 91 19 02 	lds	r27, 0x0219
     cc0:	80 93 12 02 	sts	0x0212, r24
     cc4:	90 93 13 02 	sts	0x0213, r25
     cc8:	a0 93 14 02 	sts	0x0214, r26
     ccc:	b0 93 15 02 	sts	0x0215, r27
	lastErr = error;
     cd0:	80 91 04 02 	lds	r24, 0x0204
     cd4:	90 91 05 02 	lds	r25, 0x0205
     cd8:	a0 91 06 02 	lds	r26, 0x0206
     cdc:	b0 91 07 02 	lds	r27, 0x0207
     ce0:	80 93 16 02 	sts	0x0216, r24
     ce4:	90 93 17 02 	sts	0x0217, r25
     ce8:	a0 93 18 02 	sts	0x0218, r26
     cec:	b0 93 19 02 	sts	0x0219, r27

}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	bf 90       	pop	r11
     cfe:	af 90       	pop	r10
     d00:	9f 90       	pop	r9
     d02:	8f 90       	pop	r8
     d04:	08 95       	ret

00000d06 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     d06:	e1 ec       	ldi	r30, 0xC1	; 193
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     d0c:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     d10:	86 e0       	ldi	r24, 0x06	; 6
     d12:	80 93 c2 00 	sts	0x00C2, r24
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
     d16:	8f e5       	ldi	r24, 0x5F	; 95
     d18:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     d1c:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     d20:	88 e9       	ldi	r24, 0x98	; 152
     d22:	80 83       	st	Z, r24
}
     d24:	08 95       	ret

00000d26 <__vector_25>:

ISR(USART0_RX_vect)
{
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	0b b6       	in	r0, 0x3b	; 59
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	2f 93       	push	r18
     d3a:	3f 93       	push	r19
     d3c:	4f 93       	push	r20
     d3e:	5f 93       	push	r21
     d40:	6f 93       	push	r22
     d42:	7f 93       	push	r23
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
	data = UDR0;
     d50:	80 91 c6 00 	lds	r24, 0x00C6
     d54:	80 93 43 02 	sts	0x0243, r24
	//UDR0=data;
	if (data == 55)
     d58:	87 33       	cpi	r24, 0x37	; 55
     d5a:	b9 f4       	brne	.+46     	; 0xd8a <__vector_25+0x64>
	{
		para = kp;
     d5c:	80 91 4e 02 	lds	r24, 0x024E
     d60:	90 91 4f 02 	lds	r25, 0x024F
     d64:	a0 91 50 02 	lds	r26, 0x0250
     d68:	b0 91 51 02 	lds	r27, 0x0251
     d6c:	80 93 0a 02 	sts	0x020A, r24
     d70:	90 93 0b 02 	sts	0x020B, r25
     d74:	a0 93 0c 02 	sts	0x020C, r26
     d78:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	90 93 09 02 	sts	0x0209, r25
     d84:	80 93 08 02 	sts	0x0208, r24
     d88:	31 c0       	rjmp	.+98     	; 0xdec <__vector_25+0xc6>
		
	}
	else if (data == 56)
     d8a:	88 33       	cpi	r24, 0x38	; 56
     d8c:	b9 f4       	brne	.+46     	; 0xdbc <__vector_25+0x96>
	{
		para = ki;
     d8e:	80 91 3f 02 	lds	r24, 0x023F
     d92:	90 91 40 02 	lds	r25, 0x0240
     d96:	a0 91 41 02 	lds	r26, 0x0241
     d9a:	b0 91 42 02 	lds	r27, 0x0242
     d9e:	80 93 0a 02 	sts	0x020A, r24
     da2:	90 93 0b 02 	sts	0x020B, r25
     da6:	a0 93 0c 02 	sts	0x020C, r26
     daa:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=2;
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	90 93 09 02 	sts	0x0209, r25
     db6:	80 93 08 02 	sts	0x0208, r24
     dba:	18 c0       	rjmp	.+48     	; 0xdec <__vector_25+0xc6>
	}
	else if (data == 57)
     dbc:	89 33       	cpi	r24, 0x39	; 57
     dbe:	b1 f4       	brne	.+44     	; 0xdec <__vector_25+0xc6>
	{
		para = kd;
     dc0:	80 91 2e 02 	lds	r24, 0x022E
     dc4:	90 91 2f 02 	lds	r25, 0x022F
     dc8:	a0 91 30 02 	lds	r26, 0x0230
     dcc:	b0 91 31 02 	lds	r27, 0x0231
     dd0:	80 93 0a 02 	sts	0x020A, r24
     dd4:	90 93 0b 02 	sts	0x020B, r25
     dd8:	a0 93 0c 02 	sts	0x020C, r26
     ddc:	b0 93 0d 02 	sts	0x020D, r27
		para_flag=3;
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	90 93 09 02 	sts	0x0209, r25
     de8:	80 93 08 02 	sts	0x0208, r24
	}
	
	
	if (data==49)
     dec:	80 91 43 02 	lds	r24, 0x0243
     df0:	81 33       	cpi	r24, 0x31	; 49
     df2:	c9 f4       	brne	.+50     	; 0xe26 <__vector_25+0x100>
	{
		para++;
     df4:	60 91 0a 02 	lds	r22, 0x020A
     df8:	70 91 0b 02 	lds	r23, 0x020B
     dfc:	80 91 0c 02 	lds	r24, 0x020C
     e00:	90 91 0d 02 	lds	r25, 0x020D
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	80 93 0a 02 	sts	0x020A, r24
     e18:	90 93 0b 02 	sts	0x020B, r25
     e1c:	a0 93 0c 02 	sts	0x020C, r26
     e20:	b0 93 0d 02 	sts	0x020D, r27
     e24:	86 c0       	rjmp	.+268    	; 0xf32 <__vector_25+0x20c>
	}
	else if (data==50)
     e26:	82 33       	cpi	r24, 0x32	; 50
     e28:	c9 f4       	brne	.+50     	; 0xe5c <__vector_25+0x136>
	{
		para += 5;
     e2a:	60 91 0a 02 	lds	r22, 0x020A
     e2e:	70 91 0b 02 	lds	r23, 0x020B
     e32:	80 91 0c 02 	lds	r24, 0x020C
     e36:	90 91 0d 02 	lds	r25, 0x020D
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 ea       	ldi	r20, 0xA0	; 160
     e40:	50 e4       	ldi	r21, 0x40	; 64
     e42:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	80 93 0a 02 	sts	0x020A, r24
     e4e:	90 93 0b 02 	sts	0x020B, r25
     e52:	a0 93 0c 02 	sts	0x020C, r26
     e56:	b0 93 0d 02 	sts	0x020D, r27
     e5a:	6b c0       	rjmp	.+214    	; 0xf32 <__vector_25+0x20c>
	}
	else if (data==52)
     e5c:	84 33       	cpi	r24, 0x34	; 52
     e5e:	c9 f4       	brne	.+50     	; 0xe92 <__vector_25+0x16c>
	{
		para--;
     e60:	60 91 0a 02 	lds	r22, 0x020A
     e64:	70 91 0b 02 	lds	r23, 0x020B
     e68:	80 91 0c 02 	lds	r24, 0x020C
     e6c:	90 91 0d 02 	lds	r25, 0x020D
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	80 93 0a 02 	sts	0x020A, r24
     e84:	90 93 0b 02 	sts	0x020B, r25
     e88:	a0 93 0c 02 	sts	0x020C, r26
     e8c:	b0 93 0d 02 	sts	0x020D, r27
     e90:	50 c0       	rjmp	.+160    	; 0xf32 <__vector_25+0x20c>
	}
	else if (data==53)
     e92:	85 33       	cpi	r24, 0x35	; 53
     e94:	c9 f4       	brne	.+50     	; 0xec8 <__vector_25+0x1a2>
	{
		para -= 5;
     e96:	60 91 0a 02 	lds	r22, 0x020A
     e9a:	70 91 0b 02 	lds	r23, 0x020B
     e9e:	80 91 0c 02 	lds	r24, 0x020C
     ea2:	90 91 0d 02 	lds	r25, 0x020D
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 ea       	ldi	r20, 0xA0	; 160
     eac:	50 e4       	ldi	r21, 0x40	; 64
     eae:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	80 93 0a 02 	sts	0x020A, r24
     eba:	90 93 0b 02 	sts	0x020B, r25
     ebe:	a0 93 0c 02 	sts	0x020C, r26
     ec2:	b0 93 0d 02 	sts	0x020D, r27
     ec6:	35 c0       	rjmp	.+106    	; 0xf32 <__vector_25+0x20c>
	}
	else if (data == 51)
     ec8:	83 33       	cpi	r24, 0x33	; 51
     eca:	c9 f4       	brne	.+50     	; 0xefe <__vector_25+0x1d8>
	{
		para += 0.1;
     ecc:	60 91 0a 02 	lds	r22, 0x020A
     ed0:	70 91 0b 02 	lds	r23, 0x020B
     ed4:	80 91 0c 02 	lds	r24, 0x020C
     ed8:	90 91 0d 02 	lds	r25, 0x020D
     edc:	2d ec       	ldi	r18, 0xCD	; 205
     ede:	3c ec       	ldi	r19, 0xCC	; 204
     ee0:	4c ec       	ldi	r20, 0xCC	; 204
     ee2:	5d e3       	ldi	r21, 0x3D	; 61
     ee4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	80 93 0a 02 	sts	0x020A, r24
     ef0:	90 93 0b 02 	sts	0x020B, r25
     ef4:	a0 93 0c 02 	sts	0x020C, r26
     ef8:	b0 93 0d 02 	sts	0x020D, r27
     efc:	1a c0       	rjmp	.+52     	; 0xf32 <__vector_25+0x20c>
	}
	else if (data == 54)
     efe:	86 33       	cpi	r24, 0x36	; 54
     f00:	c1 f4       	brne	.+48     	; 0xf32 <__vector_25+0x20c>
	{
		para -=0.1;
     f02:	60 91 0a 02 	lds	r22, 0x020A
     f06:	70 91 0b 02 	lds	r23, 0x020B
     f0a:	80 91 0c 02 	lds	r24, 0x020C
     f0e:	90 91 0d 02 	lds	r25, 0x020D
     f12:	2d ec       	ldi	r18, 0xCD	; 205
     f14:	3c ec       	ldi	r19, 0xCC	; 204
     f16:	4c ec       	ldi	r20, 0xCC	; 204
     f18:	5d e3       	ldi	r21, 0x3D	; 61
     f1a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	80 93 0a 02 	sts	0x020A, r24
     f26:	90 93 0b 02 	sts	0x020B, r25
     f2a:	a0 93 0c 02 	sts	0x020C, r26
     f2e:	b0 93 0d 02 	sts	0x020D, r27
	}
	
	
	
	if (para_flag == 1)
     f32:	80 91 08 02 	lds	r24, 0x0208
     f36:	90 91 09 02 	lds	r25, 0x0209
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	91 05       	cpc	r25, r1
     f3e:	11 f5       	brne	.+68     	; 0xf84 <__vector_25+0x25e>
	{
		kp = para;
     f40:	60 91 0a 02 	lds	r22, 0x020A
     f44:	70 91 0b 02 	lds	r23, 0x020B
     f48:	80 91 0c 02 	lds	r24, 0x020C
     f4c:	90 91 0d 02 	lds	r25, 0x020D
     f50:	60 93 4e 02 	sts	0x024E, r22
     f54:	70 93 4f 02 	sts	0x024F, r23
     f58:	80 93 50 02 	sts	0x0250, r24
     f5c:	90 93 51 02 	sts	0x0251, r25
		lcd_print(1,1,kp*10,4);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     f6c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fixunssfsi>
     f70:	8b 01       	movw	r16, r22
     f72:	9c 01       	movw	r18, r24
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	a8 01       	movw	r20, r16
     f7a:	24 e0       	ldi	r18, 0x04	; 4
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <__vector_25+0x2f0>
	}
	else if (para_flag == 2)
     f84:	82 30       	cpi	r24, 0x02	; 2
     f86:	91 05       	cpc	r25, r1
     f88:	11 f5       	brne	.+68     	; 0xfce <__vector_25+0x2a8>
	{
		ki = para;
     f8a:	60 91 0a 02 	lds	r22, 0x020A
     f8e:	70 91 0b 02 	lds	r23, 0x020B
     f92:	80 91 0c 02 	lds	r24, 0x020C
     f96:	90 91 0d 02 	lds	r25, 0x020D
     f9a:	60 93 3f 02 	sts	0x023F, r22
     f9e:	70 93 40 02 	sts	0x0240, r23
     fa2:	80 93 41 02 	sts	0x0241, r24
     fa6:	90 93 42 02 	sts	0x0242, r25
		lcd_print(1,6,ki*10,4);
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
     fb6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fixunssfsi>
     fba:	8b 01       	movw	r16, r22
     fbc:	9c 01       	movw	r18, r24
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	66 e0       	ldi	r22, 0x06	; 6
     fc2:	a8 01       	movw	r20, r16
     fc4:	24 e0       	ldi	r18, 0x04	; 4
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
     fcc:	24 c0       	rjmp	.+72     	; 0x1016 <__vector_25+0x2f0>
	}
	else if (para_flag == 3)
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	91 05       	cpc	r25, r1
     fd2:	09 f5       	brne	.+66     	; 0x1016 <__vector_25+0x2f0>
	{
		kd = para;
     fd4:	60 91 0a 02 	lds	r22, 0x020A
     fd8:	70 91 0b 02 	lds	r23, 0x020B
     fdc:	80 91 0c 02 	lds	r24, 0x020C
     fe0:	90 91 0d 02 	lds	r25, 0x020D
     fe4:	60 93 2e 02 	sts	0x022E, r22
     fe8:	70 93 2f 02 	sts	0x022F, r23
     fec:	80 93 30 02 	sts	0x0230, r24
     ff0:	90 93 31 02 	sts	0x0231, r25
		lcd_print(1,11,kd*10,4);
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	51 e4       	ldi	r21, 0x41	; 65
     ffc:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
    1000:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fixunssfsi>
    1004:	8b 01       	movw	r16, r22
    1006:	9c 01       	movw	r18, r24
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	6b e0       	ldi	r22, 0x0B	; 11
    100c:	a8 01       	movw	r20, r16
    100e:	24 e0       	ldi	r18, 0x04	; 4
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	}
	
}
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	0f 90       	pop	r0
    1034:	0b be       	out	0x3b, r0	; 59
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <motion_pin_config>:



void motion_pin_config (void)
{
	DDRL = DDRL | 0xE4;    //set direction of the PORTL2.5,6,7 pins as output
    1040:	aa e0       	ldi	r26, 0x0A	; 10
    1042:	b1 e0       	ldi	r27, 0x01	; 1
    1044:	8c 91       	ld	r24, X
    1046:	84 6e       	ori	r24, 0xE4	; 228
    1048:	8c 93       	st	X, r24
	PORTL = PORTL & 0x18;  //set initial value of the PORTL2.5,6,7 pins to logic 0
    104a:	eb e0       	ldi	r30, 0x0B	; 11
    104c:	f1 e0       	ldi	r31, 0x01	; 1
    104e:	80 81       	ld	r24, Z
    1050:	88 71       	andi	r24, 0x18	; 24
    1052:	80 83       	st	Z, r24
	DDRL = DDRL | 0x18;    //Setting PL3 and PL4 pins as output for PWM generation
    1054:	8c 91       	ld	r24, X
    1056:	88 61       	ori	r24, 0x18	; 24
    1058:	8c 93       	st	X, r24
	PORTL = PORTL | 0x18;  //PL3 and PL4 pins are for velocity control using PWM
    105a:	80 81       	ld	r24, Z
    105c:	88 61       	ori	r24, 0x18	; 24
    105e:	80 83       	st	Z, r24
}
    1060:	08 95       	ret

00001062 <port_init>:

//Function to initialize ports
void port_init()
{
	motion_pin_config();
    1062:	0e 94 20 08 	call	0x1040	; 0x1040 <motion_pin_config>
}
    1066:	08 95       	ret

00001068 <timer5_init>:
// TIMER5 initialize - prescale:1024
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// timer5 value: 56.250Hz
void timer5_init(void)
{
	TCCR5B = 0x00; //stop
    1068:	e1 e2       	ldi	r30, 0x21	; 33
    106a:	f1 e0       	ldi	r31, 0x01	; 1
    106c:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //setup
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;
    107a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;
    107e:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    1082:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;
    1086:	80 93 2a 01 	sts	0x012A, r24
	TCCR5A = 0xA1;
    108a:	81 ea       	ldi	r24, 0xA1	; 161
    108c:	80 93 20 01 	sts	0x0120, r24
	TCCR5C = 0x00;
    1090:	10 92 22 01 	sts	0x0122, r1
	TCCR5B = 0x0D; //start Timer
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	80 83       	st	Z, r24
}
    1098:	08 95       	ret

0000109a <set_PWM_value>:

// Function for robot velocity control
void set_PWM_value(unsigned char value) 	//set 8 bit PWM value
{
	OCR5AH = 0x00;
    109a:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = value;
    109e:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;
    10a2:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = value;
    10a6:	80 93 2a 01 	sts	0x012A, r24
}
    10aa:	08 95       	ret

000010ac <motion_set>:
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortLRestore = 0;

	PortLRestore = PORTL; 			// reading the PORTL's original status
    10ac:	eb e0       	ldi	r30, 0x0B	; 11
    10ae:	f1 e0       	ldi	r31, 0x01	; 1
    10b0:	90 81       	ld	r25, Z
	PortLRestore &= 0x18; 			// setting lower direction nibbel to 0
    10b2:	98 71       	andi	r25, 0x18	; 24
	PortLRestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTL status
    10b4:	89 2b       	or	r24, r25
	PORTL = PortLRestore; 			// setting the command to the port
    10b6:	80 83       	st	Z, r24
}
    10b8:	08 95       	ret

000010ba <forward>:

void forward (void) 		//both inputs forward
{
	motion_set(0xA0);
    10ba:	80 ea       	ldi	r24, 0xA0	; 160
    10bc:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    10c0:	08 95       	ret

000010c2 <back>:

void back (void) 			//both inputs backward
{
	motion_set(0x44);
    10c2:	84 e4       	ldi	r24, 0x44	; 68
    10c4:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    10c8:	08 95       	ret

000010ca <left>:

void left (void) 			//input12 backward, input34 forward
{
	motion_set(0x84);
    10ca:	84 e8       	ldi	r24, 0x84	; 132
    10cc:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    10d0:	08 95       	ret

000010d2 <right>:

void right (void) 			//input34 backward, input12 forward
{
	motion_set(0x60);
    10d2:	80 e6       	ldi	r24, 0x60	; 96
    10d4:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    10d8:	08 95       	ret

000010da <soft_left>:

void soft_left (void) 		//input12 stationary, input34 forward
{
	motion_set(0x80);
    10da:	80 e8       	ldi	r24, 0x80	; 128
    10dc:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    10e0:	08 95       	ret

000010e2 <soft_right>:

void soft_right (void)      //input12 forward, input34 stationary
{
	motion_set(0x20);
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    10e8:	08 95       	ret

000010ea <soft_left_2>:

void soft_left_2 (void)     //input12 backward, input34 stationary
{
	motion_set(0x40);
    10ea:	80 e4       	ldi	r24, 0x40	; 64
    10ec:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    10f0:	08 95       	ret

000010f2 <soft_right_2>:

void soft_right_2 (void)    //input12 stationary, input34 backward
{
	motion_set(0x04);
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    10f8:	08 95       	ret

000010fa <stop>:

void stop (void)            // both input stationary
{
	motion_set(0x00);
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	0e 94 56 08 	call	0x10ac	; 0x10ac <motion_set>
}
    1100:	08 95       	ret

00001102 <init_devices1>:

void init_devices1 (void)
{
	cli(); //Clears the global interrupts
    1102:	f8 94       	cli
	
	lcd_port_config();  // configure the LCD port
    1104:	0e 94 a8 02 	call	0x550	; 0x550 <lcd_port_config>
	lcd_set_4bit();
    1108:	0e 94 42 01 	call	0x284	; 0x284 <lcd_set_4bit>
	lcd_init();
    110c:	0e 94 aa 01 	call	0x354	; 0x354 <lcd_init>
	port_init();
    1110:	0e 94 31 08 	call	0x1062	; 0x1062 <port_init>
	timer5_init();
    1114:	0e 94 34 08 	call	0x1068	; 0x1068 <timer5_init>
	sei(); //Enables the global interrupts
    1118:	78 94       	sei
}
    111a:	08 95       	ret

0000111c <SetTunings>:

void SetTunings(double Kp, double Ki, double Kd)
{
    111c:	8f 92       	push	r8
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	4b 01       	movw	r8, r22
    112e:	5c 01       	movw	r10, r24
    1130:	da 01       	movw	r26, r20
    1132:	c9 01       	movw	r24, r18
	kp = Kp;
    1134:	80 92 4e 02 	sts	0x024E, r8
    1138:	90 92 4f 02 	sts	0x024F, r9
    113c:	a0 92 50 02 	sts	0x0250, r10
    1140:	b0 92 51 02 	sts	0x0251, r11
	ki = Ki;
    1144:	80 93 3f 02 	sts	0x023F, r24
    1148:	90 93 40 02 	sts	0x0240, r25
    114c:	a0 93 41 02 	sts	0x0241, r26
    1150:	b0 93 42 02 	sts	0x0242, r27
	kd = Kd;
    1154:	e0 92 2e 02 	sts	0x022E, r14
    1158:	f0 92 2f 02 	sts	0x022F, r15
    115c:	00 93 30 02 	sts	0x0230, r16
    1160:	10 93 31 02 	sts	0x0231, r17
}
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	bf 90       	pop	r11
    116e:	af 90       	pop	r10
    1170:	9f 90       	pop	r9
    1172:	8f 90       	pop	r8
    1174:	08 95       	ret

00001176 <main>:
{
	int acc_Angle;
	int gyro_Angle;
	int filt_Angle;
	unsigned int pwm_value;
	init_adxl();
    1176:	0e 94 84 03 	call	0x708	; 0x708 <init_adxl>
	init_gyro();
    117a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <init_gyro>
	init_devices1();
    117e:	0e 94 81 08 	call	0x1102	; 0x1102 <init_devices1>
	uart0_init(); //Initailize UART1 for serial communiaction
    1182:	0e 94 83 06 	call	0xd06	; 0xd06 <uart0_init>
	//start_timer4();
	
	SetTunings(6,0,0);
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	80 ec       	ldi	r24, 0xC0	; 192
    118c:	90 e4       	ldi	r25, 0x40	; 64
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	79 01       	movw	r14, r18
    1196:	8a 01       	movw	r16, r20
    1198:	0e 94 8e 08 	call	0x111c	; 0x111c <SetTunings>
	lcd_print(1,1,kp*10,4);
    119c:	60 91 4e 02 	lds	r22, 0x024E
    11a0:	70 91 4f 02 	lds	r23, 0x024F
    11a4:	80 91 50 02 	lds	r24, 0x0250
    11a8:	90 91 51 02 	lds	r25, 0x0251
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e2       	ldi	r20, 0x20	; 32
    11b2:	51 e4       	ldi	r21, 0x41	; 65
    11b4:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
    11b8:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fixunssfsi>
    11bc:	8b 01       	movw	r16, r22
    11be:	9c 01       	movw	r18, r24
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	a8 01       	movw	r20, r16
    11c6:	24 e0       	ldi	r18, 0x04	; 4
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	lcd_print(1,6,ki*10,4);
    11ce:	60 91 3f 02 	lds	r22, 0x023F
    11d2:	70 91 40 02 	lds	r23, 0x0240
    11d6:	80 91 41 02 	lds	r24, 0x0241
    11da:	90 91 42 02 	lds	r25, 0x0242
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e2       	ldi	r20, 0x20	; 32
    11e4:	51 e4       	ldi	r21, 0x41	; 65
    11e6:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
    11ea:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fixunssfsi>
    11ee:	8b 01       	movw	r16, r22
    11f0:	9c 01       	movw	r18, r24
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	66 e0       	ldi	r22, 0x06	; 6
    11f6:	a8 01       	movw	r20, r16
    11f8:	24 e0       	ldi	r18, 0x04	; 4
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
	lcd_print(1,11,kd*10,4);
    1200:	60 91 2e 02 	lds	r22, 0x022E
    1204:	70 91 2f 02 	lds	r23, 0x022F
    1208:	80 91 30 02 	lds	r24, 0x0230
    120c:	90 91 31 02 	lds	r25, 0x0231
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e2       	ldi	r20, 0x20	; 32
    1216:	51 e4       	ldi	r21, 0x41	; 65
    1218:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
    121c:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fixunssfsi>
    1220:	8b 01       	movw	r16, r22
    1222:	9c 01       	movw	r18, r24
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	6b e0       	ldi	r22, 0x0B	; 11
    1228:	a8 01       	movw	r20, r16
    122a:	24 e0       	ldi	r18, 0x04	; 4
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_print>
			//set_PWM_value(min(Output*Output,255));
			pwm_value = (-Output)+30;
			if(pwm_value>=255)
			{
				
				pwm_value=255;
    1232:	0f 2e       	mov	r0, r31
    1234:	ff ef       	ldi	r31, 0xFF	; 255
    1236:	6f 2e       	mov	r6, r31
    1238:	77 24       	eor	r7, r7
    123a:	f0 2d       	mov	r31, r0
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();
    123c:	0e 94 8f 03 	call	0x71e	; 0x71e <acc_angle>
    1240:	ec 01       	movw	r28, r24
		//pr_int(2,1,acc_Angle,3);
		gyro_Angle=gyro_Rate();
    1242:	0e 94 16 05 	call	0xa2c	; 0xa2c <gyro_Rate>
    1246:	6b 01       	movw	r12, r22
    1248:	7c 01       	movw	r14, r24
	lcd_print(1,11,kd*10,4);
	
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();
    124a:	be 01       	movw	r22, r28
    124c:	88 27       	eor	r24, r24
    124e:	77 fd       	sbrc	r23, 7
    1250:	80 95       	com	r24
    1252:	98 2f       	mov	r25, r24
    1254:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
    1258:	2d ec       	ldi	r18, 0xCD	; 205
    125a:	3c ec       	ldi	r19, 0xCC	; 204
    125c:	4c ec       	ldi	r20, 0xCC	; 204
    125e:	5d e3       	ldi	r21, 0x3D	; 61
    1260:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
    1264:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fixsfsi>
		//pr_int(2,1,acc_Angle,3);
		gyro_Angle=gyro_Rate();
		filt_Angle=comp_filter(acc_Angle,gyro_Angle);
    1268:	88 27       	eor	r24, r24
    126a:	77 fd       	sbrc	r23, 7
    126c:	80 95       	com	r24
    126e:	98 2f       	mov	r25, r24
    1270:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
    1274:	4b 01       	movw	r8, r22
    1276:	5c 01       	movw	r10, r24
	while(1)
	{
		
		acc_Angle=0.1*acc_angle();
		//pr_int(2,1,acc_Angle,3);
		gyro_Angle=gyro_Rate();
    1278:	c7 01       	movw	r24, r14
    127a:	b6 01       	movw	r22, r12
    127c:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fixsfsi>
		filt_Angle=comp_filter(acc_Angle,gyro_Angle);
    1280:	88 27       	eor	r24, r24
    1282:	77 fd       	sbrc	r23, 7
    1284:	80 95       	com	r24
    1286:	98 2f       	mov	r25, r24
    1288:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
    128c:	9b 01       	movw	r18, r22
    128e:	ac 01       	movw	r20, r24
    1290:	c5 01       	movw	r24, r10
    1292:	b4 01       	movw	r22, r8
    1294:	0e 94 77 04 	call	0x8ee	; 0x8ee <comp_filter>
    1298:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fixsfsi>
		//UDR0=(int8_t)acc_angle();
		//UDR0=(int8_t)(acc_Angle+100);
		Input=filt_Angle;
    129c:	88 27       	eor	r24, r24
    129e:	77 fd       	sbrc	r23, 7
    12a0:	80 95       	com	r24
    12a2:	98 2f       	mov	r25, r24
    12a4:	0e 94 22 0b 	call	0x1644	; 0x1644 <__floatsisf>
    12a8:	60 93 46 02 	sts	0x0246, r22
    12ac:	70 93 47 02 	sts	0x0247, r23
    12b0:	80 93 48 02 	sts	0x0248, r24
    12b4:	90 93 49 02 	sts	0x0249, r25
		pr_int(1,1,Input,3);
    12b8:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fixsfsi>
    12bc:	8b 01       	movw	r16, r22
    12be:	9c 01       	movw	r18, r24
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	a8 01       	movw	r20, r16
    12ca:	23 e0       	ldi	r18, 0x03	; 3
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	0e 94 4f 03 	call	0x69e	; 0x69e <pr_int>
		if (error*lastErr < 0)
    12d2:	60 91 04 02 	lds	r22, 0x0204
    12d6:	70 91 05 02 	lds	r23, 0x0205
    12da:	80 91 06 02 	lds	r24, 0x0206
    12de:	90 91 07 02 	lds	r25, 0x0207
    12e2:	20 91 16 02 	lds	r18, 0x0216
    12e6:	30 91 17 02 	lds	r19, 0x0217
    12ea:	40 91 18 02 	lds	r20, 0x0218
    12ee:	50 91 19 02 	lds	r21, 0x0219
    12f2:	0e 94 02 0c 	call	0x1804	; 0x1804 <__mulsf3>
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	0e 94 83 0a 	call	0x1506	; 0x1506 <__cmpsf2>
    1300:	88 23       	and	r24, r24
    1302:	44 f4       	brge	.+16     	; 0x1314 <main+0x19e>
		{
			stop();
    1304:	0e 94 7d 08 	call	0x10fa	; 0x10fa <stop>
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	9f e8       	ldi	r25, 0x8F	; 143
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <main+0x196>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <main+0x19c>
    1312:	00 00       	nop
			_delay_ms(10);
		}
		Compute();
    1314:	0e 94 38 05 	call	0xa70	; 0xa70 <Compute>
		if (Output>0)
    1318:	c0 90 39 02 	lds	r12, 0x0239
    131c:	d0 90 3a 02 	lds	r13, 0x023A
    1320:	e0 90 3b 02 	lds	r14, 0x023B
    1324:	f0 90 3c 02 	lds	r15, 0x023C
    1328:	c7 01       	movw	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	a9 01       	movw	r20, r18
    1332:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__gesf2>
    1336:	18 16       	cp	r1, r24
    1338:	dc f4       	brge	.+54     	; 0x1370 <main+0x1fa>
		{
			//set_PWM_value(min((Output*Output),255));
			pwm_value = (Output)+30;
    133a:	c7 01       	movw	r24, r14
    133c:	b6 01       	movw	r22, r12
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 ef       	ldi	r20, 0xF0	; 240
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3>
    134a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    1352:	8f 3f       	cpi	r24, 0xFF	; 255
    1354:	91 05       	cpc	r25, r1
    1356:	08 f0       	brcs	.+2      	; 0x135a <main+0x1e4>
			{
				
				pwm_value=255;
    1358:	c3 01       	movw	r24, r6
			}
			//pr_int(2,1,pwm_value,3);
			set_PWM_value(pwm_value);
    135a:	0e 94 4d 08 	call	0x109a	; 0x109a <set_PWM_value>
			forward();
    135e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <forward>
    1362:	af ef       	ldi	r26, 0xFF	; 255
    1364:	bf e8       	ldi	r27, 0x8F	; 143
    1366:	11 97       	sbiw	r26, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <main+0x1f0>
    136a:	00 c0       	rjmp	.+0      	; 0x136c <main+0x1f6>
    136c:	00 00       	nop
    136e:	35 c0       	rjmp	.+106    	; 0x13da <main+0x264>
			_delay_ms(10);
			//pwm_value=0;
		}
		else if(Output<0)
    1370:	c7 01       	movw	r24, r14
    1372:	b6 01       	movw	r22, r12
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	a9 01       	movw	r20, r18
    137a:	0e 94 83 0a 	call	0x1506	; 0x1506 <__cmpsf2>
    137e:	88 23       	and	r24, r24
    1380:	dc f4       	brge	.+54     	; 0x13b8 <main+0x242>
		{
			//set_PWM_value(min(Output*Output,255));
			pwm_value = (-Output)+30;
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	80 ef       	ldi	r24, 0xF0	; 240
    1388:	91 e4       	ldi	r25, 0x41	; 65
    138a:	a7 01       	movw	r20, r14
    138c:	96 01       	movw	r18, r12
    138e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__subsf3>
    1392:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
			if(pwm_value>=255)
    139a:	8f 3f       	cpi	r24, 0xFF	; 255
    139c:	91 05       	cpc	r25, r1
    139e:	08 f0       	brcs	.+2      	; 0x13a2 <main+0x22c>
			{
				
				pwm_value=255;
    13a0:	c3 01       	movw	r24, r6
			}
			//pr_int(2,6,pwm_value,3);
			set_PWM_value(pwm_value);
    13a2:	0e 94 4d 08 	call	0x109a	; 0x109a <set_PWM_value>
			back();
    13a6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <back>
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	9f e8       	ldi	r25, 0x8F	; 143
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <main+0x238>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <main+0x23e>
    13b4:	00 00       	nop
    13b6:	11 c0       	rjmp	.+34     	; 0x13da <main+0x264>
			_delay_ms(10);
			//pwm_value=0;
		}
		else if(Output==0)
    13b8:	c7 01       	movw	r24, r14
    13ba:	b6 01       	movw	r22, r12
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	0e 94 83 0a 	call	0x1506	; 0x1506 <__cmpsf2>
    13c6:	88 23       	and	r24, r24
    13c8:	41 f4       	brne	.+16     	; 0x13da <main+0x264>
		{
			stop();
    13ca:	0e 94 7d 08 	call	0x10fa	; 0x10fa <stop>
    13ce:	af ef       	ldi	r26, 0xFF	; 255
    13d0:	bf e8       	ldi	r27, 0x8F	; 143
    13d2:	11 97       	sbiw	r26, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <main+0x25c>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <main+0x262>
    13d8:	00 00       	nop
    13da:	8c ec       	ldi	r24, 0xCC	; 204
    13dc:	9c ec       	ldi	r25, 0xCC	; 204
    13de:	a1 e0       	ldi	r26, 0x01	; 1
    13e0:	81 50       	subi	r24, 0x01	; 1
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	a0 40       	sbci	r26, 0x00	; 0
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <main+0x26a>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <main+0x274>
    13ea:	28 cf       	rjmp	.-432    	; 0x123c <main+0xc6>

000013ec <__subsf3>:
    13ec:	50 58       	subi	r21, 0x80	; 128

000013ee <__addsf3>:
    13ee:	bb 27       	eor	r27, r27
    13f0:	aa 27       	eor	r26, r26
    13f2:	0e d0       	rcall	.+28     	; 0x1410 <__addsf3x>
    13f4:	c2 c1       	rjmp	.+900    	; 0x177a <__fp_round>
    13f6:	b3 d1       	rcall	.+870    	; 0x175e <__fp_pscA>
    13f8:	30 f0       	brcs	.+12     	; 0x1406 <__addsf3+0x18>
    13fa:	b8 d1       	rcall	.+880    	; 0x176c <__fp_pscB>
    13fc:	20 f0       	brcs	.+8      	; 0x1406 <__addsf3+0x18>
    13fe:	31 f4       	brne	.+12     	; 0x140c <__addsf3+0x1e>
    1400:	9f 3f       	cpi	r25, 0xFF	; 255
    1402:	11 f4       	brne	.+4      	; 0x1408 <__addsf3+0x1a>
    1404:	1e f4       	brtc	.+6      	; 0x140c <__addsf3+0x1e>
    1406:	83 c1       	rjmp	.+774    	; 0x170e <__fp_nan>
    1408:	0e f4       	brtc	.+2      	; 0x140c <__addsf3+0x1e>
    140a:	e0 95       	com	r30
    140c:	e7 fb       	bst	r30, 7
    140e:	79 c1       	rjmp	.+754    	; 0x1702 <__fp_inf>

00001410 <__addsf3x>:
    1410:	e9 2f       	mov	r30, r25
    1412:	c4 d1       	rcall	.+904    	; 0x179c <__fp_split3>
    1414:	80 f3       	brcs	.-32     	; 0x13f6 <__addsf3+0x8>
    1416:	ba 17       	cp	r27, r26
    1418:	62 07       	cpc	r22, r18
    141a:	73 07       	cpc	r23, r19
    141c:	84 07       	cpc	r24, r20
    141e:	95 07       	cpc	r25, r21
    1420:	18 f0       	brcs	.+6      	; 0x1428 <__addsf3x+0x18>
    1422:	71 f4       	brne	.+28     	; 0x1440 <__addsf3x+0x30>
    1424:	9e f5       	brtc	.+102    	; 0x148c <__addsf3x+0x7c>
    1426:	dc c1       	rjmp	.+952    	; 0x17e0 <__fp_zero>
    1428:	0e f4       	brtc	.+2      	; 0x142c <__addsf3x+0x1c>
    142a:	e0 95       	com	r30
    142c:	0b 2e       	mov	r0, r27
    142e:	ba 2f       	mov	r27, r26
    1430:	a0 2d       	mov	r26, r0
    1432:	0b 01       	movw	r0, r22
    1434:	b9 01       	movw	r22, r18
    1436:	90 01       	movw	r18, r0
    1438:	0c 01       	movw	r0, r24
    143a:	ca 01       	movw	r24, r20
    143c:	a0 01       	movw	r20, r0
    143e:	11 24       	eor	r1, r1
    1440:	ff 27       	eor	r31, r31
    1442:	59 1b       	sub	r21, r25
    1444:	99 f0       	breq	.+38     	; 0x146c <__addsf3x+0x5c>
    1446:	59 3f       	cpi	r21, 0xF9	; 249
    1448:	50 f4       	brcc	.+20     	; 0x145e <__addsf3x+0x4e>
    144a:	50 3e       	cpi	r21, 0xE0	; 224
    144c:	68 f1       	brcs	.+90     	; 0x14a8 <__addsf3x+0x98>
    144e:	1a 16       	cp	r1, r26
    1450:	f0 40       	sbci	r31, 0x00	; 0
    1452:	a2 2f       	mov	r26, r18
    1454:	23 2f       	mov	r18, r19
    1456:	34 2f       	mov	r19, r20
    1458:	44 27       	eor	r20, r20
    145a:	58 5f       	subi	r21, 0xF8	; 248
    145c:	f3 cf       	rjmp	.-26     	; 0x1444 <__addsf3x+0x34>
    145e:	46 95       	lsr	r20
    1460:	37 95       	ror	r19
    1462:	27 95       	ror	r18
    1464:	a7 95       	ror	r26
    1466:	f0 40       	sbci	r31, 0x00	; 0
    1468:	53 95       	inc	r21
    146a:	c9 f7       	brne	.-14     	; 0x145e <__addsf3x+0x4e>
    146c:	7e f4       	brtc	.+30     	; 0x148c <__addsf3x+0x7c>
    146e:	1f 16       	cp	r1, r31
    1470:	ba 0b       	sbc	r27, r26
    1472:	62 0b       	sbc	r22, r18
    1474:	73 0b       	sbc	r23, r19
    1476:	84 0b       	sbc	r24, r20
    1478:	ba f0       	brmi	.+46     	; 0x14a8 <__addsf3x+0x98>
    147a:	91 50       	subi	r25, 0x01	; 1
    147c:	a1 f0       	breq	.+40     	; 0x14a6 <__addsf3x+0x96>
    147e:	ff 0f       	add	r31, r31
    1480:	bb 1f       	adc	r27, r27
    1482:	66 1f       	adc	r22, r22
    1484:	77 1f       	adc	r23, r23
    1486:	88 1f       	adc	r24, r24
    1488:	c2 f7       	brpl	.-16     	; 0x147a <__addsf3x+0x6a>
    148a:	0e c0       	rjmp	.+28     	; 0x14a8 <__addsf3x+0x98>
    148c:	ba 0f       	add	r27, r26
    148e:	62 1f       	adc	r22, r18
    1490:	73 1f       	adc	r23, r19
    1492:	84 1f       	adc	r24, r20
    1494:	48 f4       	brcc	.+18     	; 0x14a8 <__addsf3x+0x98>
    1496:	87 95       	ror	r24
    1498:	77 95       	ror	r23
    149a:	67 95       	ror	r22
    149c:	b7 95       	ror	r27
    149e:	f7 95       	ror	r31
    14a0:	9e 3f       	cpi	r25, 0xFE	; 254
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <__addsf3x+0x96>
    14a4:	b3 cf       	rjmp	.-154    	; 0x140c <__addsf3+0x1e>
    14a6:	93 95       	inc	r25
    14a8:	88 0f       	add	r24, r24
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <__addsf3x+0x9e>
    14ac:	99 27       	eor	r25, r25
    14ae:	ee 0f       	add	r30, r30
    14b0:	97 95       	ror	r25
    14b2:	87 95       	ror	r24
    14b4:	08 95       	ret

000014b6 <atan>:
    14b6:	df 93       	push	r29
    14b8:	dd 27       	eor	r29, r29
    14ba:	b9 2f       	mov	r27, r25
    14bc:	bf 77       	andi	r27, 0x7F	; 127
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	16 16       	cp	r1, r22
    14c4:	17 06       	cpc	r1, r23
    14c6:	48 07       	cpc	r20, r24
    14c8:	5b 07       	cpc	r21, r27
    14ca:	10 f4       	brcc	.+4      	; 0x14d0 <atan+0x1a>
    14cc:	d9 2f       	mov	r29, r25
    14ce:	93 d1       	rcall	.+806    	; 0x17f6 <inverse>
    14d0:	9f 93       	push	r25
    14d2:	8f 93       	push	r24
    14d4:	7f 93       	push	r23
    14d6:	6f 93       	push	r22
    14d8:	f8 d1       	rcall	.+1008   	; 0x18ca <square>
    14da:	e4 ee       	ldi	r30, 0xE4	; 228
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	1a d1       	rcall	.+564    	; 0x1714 <__fp_powser>
    14e0:	4c d1       	rcall	.+664    	; 0x177a <__fp_round>
    14e2:	2f 91       	pop	r18
    14e4:	3f 91       	pop	r19
    14e6:	4f 91       	pop	r20
    14e8:	5f 91       	pop	r21
    14ea:	98 d1       	rcall	.+816    	; 0x181c <__mulsf3x>
    14ec:	dd 23       	and	r29, r29
    14ee:	49 f0       	breq	.+18     	; 0x1502 <atan+0x4c>
    14f0:	90 58       	subi	r25, 0x80	; 128
    14f2:	a2 ea       	ldi	r26, 0xA2	; 162
    14f4:	2a ed       	ldi	r18, 0xDA	; 218
    14f6:	3f e0       	ldi	r19, 0x0F	; 15
    14f8:	49 ec       	ldi	r20, 0xC9	; 201
    14fa:	5f e3       	ldi	r21, 0x3F	; 63
    14fc:	d0 78       	andi	r29, 0x80	; 128
    14fe:	5d 27       	eor	r21, r29
    1500:	87 df       	rcall	.-242    	; 0x1410 <__addsf3x>
    1502:	df 91       	pop	r29
    1504:	3a c1       	rjmp	.+628    	; 0x177a <__fp_round>

00001506 <__cmpsf2>:
    1506:	d9 d0       	rcall	.+434    	; 0x16ba <__fp_cmp>
    1508:	08 f4       	brcc	.+2      	; 0x150c <__cmpsf2+0x6>
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	08 95       	ret

0000150e <__divsf3>:
    150e:	0c d0       	rcall	.+24     	; 0x1528 <__divsf3x>
    1510:	34 c1       	rjmp	.+616    	; 0x177a <__fp_round>
    1512:	2c d1       	rcall	.+600    	; 0x176c <__fp_pscB>
    1514:	40 f0       	brcs	.+16     	; 0x1526 <__divsf3+0x18>
    1516:	23 d1       	rcall	.+582    	; 0x175e <__fp_pscA>
    1518:	30 f0       	brcs	.+12     	; 0x1526 <__divsf3+0x18>
    151a:	21 f4       	brne	.+8      	; 0x1524 <__divsf3+0x16>
    151c:	5f 3f       	cpi	r21, 0xFF	; 255
    151e:	19 f0       	breq	.+6      	; 0x1526 <__divsf3+0x18>
    1520:	f0 c0       	rjmp	.+480    	; 0x1702 <__fp_inf>
    1522:	51 11       	cpse	r21, r1
    1524:	5e c1       	rjmp	.+700    	; 0x17e2 <__fp_szero>
    1526:	f3 c0       	rjmp	.+486    	; 0x170e <__fp_nan>

00001528 <__divsf3x>:
    1528:	39 d1       	rcall	.+626    	; 0x179c <__fp_split3>
    152a:	98 f3       	brcs	.-26     	; 0x1512 <__divsf3+0x4>

0000152c <__divsf3_pse>:
    152c:	99 23       	and	r25, r25
    152e:	c9 f3       	breq	.-14     	; 0x1522 <__divsf3+0x14>
    1530:	55 23       	and	r21, r21
    1532:	b1 f3       	breq	.-20     	; 0x1520 <__divsf3+0x12>
    1534:	95 1b       	sub	r25, r21
    1536:	55 0b       	sbc	r21, r21
    1538:	bb 27       	eor	r27, r27
    153a:	aa 27       	eor	r26, r26
    153c:	62 17       	cp	r22, r18
    153e:	73 07       	cpc	r23, r19
    1540:	84 07       	cpc	r24, r20
    1542:	38 f0       	brcs	.+14     	; 0x1552 <__divsf3_pse+0x26>
    1544:	9f 5f       	subi	r25, 0xFF	; 255
    1546:	5f 4f       	sbci	r21, 0xFF	; 255
    1548:	22 0f       	add	r18, r18
    154a:	33 1f       	adc	r19, r19
    154c:	44 1f       	adc	r20, r20
    154e:	aa 1f       	adc	r26, r26
    1550:	a9 f3       	breq	.-22     	; 0x153c <__divsf3_pse+0x10>
    1552:	33 d0       	rcall	.+102    	; 0x15ba <__divsf3_pse+0x8e>
    1554:	0e 2e       	mov	r0, r30
    1556:	3a f0       	brmi	.+14     	; 0x1566 <__divsf3_pse+0x3a>
    1558:	e0 e8       	ldi	r30, 0x80	; 128
    155a:	30 d0       	rcall	.+96     	; 0x15bc <__divsf3_pse+0x90>
    155c:	91 50       	subi	r25, 0x01	; 1
    155e:	50 40       	sbci	r21, 0x00	; 0
    1560:	e6 95       	lsr	r30
    1562:	00 1c       	adc	r0, r0
    1564:	ca f7       	brpl	.-14     	; 0x1558 <__divsf3_pse+0x2c>
    1566:	29 d0       	rcall	.+82     	; 0x15ba <__divsf3_pse+0x8e>
    1568:	fe 2f       	mov	r31, r30
    156a:	27 d0       	rcall	.+78     	; 0x15ba <__divsf3_pse+0x8e>
    156c:	66 0f       	add	r22, r22
    156e:	77 1f       	adc	r23, r23
    1570:	88 1f       	adc	r24, r24
    1572:	bb 1f       	adc	r27, r27
    1574:	26 17       	cp	r18, r22
    1576:	37 07       	cpc	r19, r23
    1578:	48 07       	cpc	r20, r24
    157a:	ab 07       	cpc	r26, r27
    157c:	b0 e8       	ldi	r27, 0x80	; 128
    157e:	09 f0       	breq	.+2      	; 0x1582 <__divsf3_pse+0x56>
    1580:	bb 0b       	sbc	r27, r27
    1582:	80 2d       	mov	r24, r0
    1584:	bf 01       	movw	r22, r30
    1586:	ff 27       	eor	r31, r31
    1588:	93 58       	subi	r25, 0x83	; 131
    158a:	5f 4f       	sbci	r21, 0xFF	; 255
    158c:	2a f0       	brmi	.+10     	; 0x1598 <__divsf3_pse+0x6c>
    158e:	9e 3f       	cpi	r25, 0xFE	; 254
    1590:	51 05       	cpc	r21, r1
    1592:	68 f0       	brcs	.+26     	; 0x15ae <__divsf3_pse+0x82>
    1594:	b6 c0       	rjmp	.+364    	; 0x1702 <__fp_inf>
    1596:	25 c1       	rjmp	.+586    	; 0x17e2 <__fp_szero>
    1598:	5f 3f       	cpi	r21, 0xFF	; 255
    159a:	ec f3       	brlt	.-6      	; 0x1596 <__divsf3_pse+0x6a>
    159c:	98 3e       	cpi	r25, 0xE8	; 232
    159e:	dc f3       	brlt	.-10     	; 0x1596 <__divsf3_pse+0x6a>
    15a0:	86 95       	lsr	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	b7 95       	ror	r27
    15a8:	f7 95       	ror	r31
    15aa:	9f 5f       	subi	r25, 0xFF	; 255
    15ac:	c9 f7       	brne	.-14     	; 0x15a0 <__divsf3_pse+0x74>
    15ae:	88 0f       	add	r24, r24
    15b0:	91 1d       	adc	r25, r1
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	97 f9       	bld	r25, 7
    15b8:	08 95       	ret
    15ba:	e1 e0       	ldi	r30, 0x01	; 1
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	bb 1f       	adc	r27, r27
    15c4:	62 17       	cp	r22, r18
    15c6:	73 07       	cpc	r23, r19
    15c8:	84 07       	cpc	r24, r20
    15ca:	ba 07       	cpc	r27, r26
    15cc:	20 f0       	brcs	.+8      	; 0x15d6 <__divsf3_pse+0xaa>
    15ce:	62 1b       	sub	r22, r18
    15d0:	73 0b       	sbc	r23, r19
    15d2:	84 0b       	sbc	r24, r20
    15d4:	ba 0b       	sbc	r27, r26
    15d6:	ee 1f       	adc	r30, r30
    15d8:	88 f7       	brcc	.-30     	; 0x15bc <__divsf3_pse+0x90>
    15da:	e0 95       	com	r30
    15dc:	08 95       	ret

000015de <__fixsfsi>:
    15de:	04 d0       	rcall	.+8      	; 0x15e8 <__fixunssfsi>
    15e0:	68 94       	set
    15e2:	b1 11       	cpse	r27, r1
    15e4:	fe c0       	rjmp	.+508    	; 0x17e2 <__fp_szero>
    15e6:	08 95       	ret

000015e8 <__fixunssfsi>:
    15e8:	e1 d0       	rcall	.+450    	; 0x17ac <__fp_splitA>
    15ea:	88 f0       	brcs	.+34     	; 0x160e <__fixunssfsi+0x26>
    15ec:	9f 57       	subi	r25, 0x7F	; 127
    15ee:	90 f0       	brcs	.+36     	; 0x1614 <__fixunssfsi+0x2c>
    15f0:	b9 2f       	mov	r27, r25
    15f2:	99 27       	eor	r25, r25
    15f4:	b7 51       	subi	r27, 0x17	; 23
    15f6:	a0 f0       	brcs	.+40     	; 0x1620 <__fixunssfsi+0x38>
    15f8:	d1 f0       	breq	.+52     	; 0x162e <__fixunssfsi+0x46>
    15fa:	66 0f       	add	r22, r22
    15fc:	77 1f       	adc	r23, r23
    15fe:	88 1f       	adc	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	1a f0       	brmi	.+6      	; 0x160a <__fixunssfsi+0x22>
    1604:	ba 95       	dec	r27
    1606:	c9 f7       	brne	.-14     	; 0x15fa <__fixunssfsi+0x12>
    1608:	12 c0       	rjmp	.+36     	; 0x162e <__fixunssfsi+0x46>
    160a:	b1 30       	cpi	r27, 0x01	; 1
    160c:	81 f0       	breq	.+32     	; 0x162e <__fixunssfsi+0x46>
    160e:	e8 d0       	rcall	.+464    	; 0x17e0 <__fp_zero>
    1610:	b1 e0       	ldi	r27, 0x01	; 1
    1612:	08 95       	ret
    1614:	e5 c0       	rjmp	.+458    	; 0x17e0 <__fp_zero>
    1616:	67 2f       	mov	r22, r23
    1618:	78 2f       	mov	r23, r24
    161a:	88 27       	eor	r24, r24
    161c:	b8 5f       	subi	r27, 0xF8	; 248
    161e:	39 f0       	breq	.+14     	; 0x162e <__fixunssfsi+0x46>
    1620:	b9 3f       	cpi	r27, 0xF9	; 249
    1622:	cc f3       	brlt	.-14     	; 0x1616 <__fixunssfsi+0x2e>
    1624:	86 95       	lsr	r24
    1626:	77 95       	ror	r23
    1628:	67 95       	ror	r22
    162a:	b3 95       	inc	r27
    162c:	d9 f7       	brne	.-10     	; 0x1624 <__fixunssfsi+0x3c>
    162e:	3e f4       	brtc	.+14     	; 0x163e <__fixunssfsi+0x56>
    1630:	90 95       	com	r25
    1632:	80 95       	com	r24
    1634:	70 95       	com	r23
    1636:	61 95       	neg	r22
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	8f 4f       	sbci	r24, 0xFF	; 255
    163c:	9f 4f       	sbci	r25, 0xFF	; 255
    163e:	08 95       	ret

00001640 <__floatunsisf>:
    1640:	e8 94       	clt
    1642:	09 c0       	rjmp	.+18     	; 0x1656 <__floatsisf+0x12>

00001644 <__floatsisf>:
    1644:	97 fb       	bst	r25, 7
    1646:	3e f4       	brtc	.+14     	; 0x1656 <__floatsisf+0x12>
    1648:	90 95       	com	r25
    164a:	80 95       	com	r24
    164c:	70 95       	com	r23
    164e:	61 95       	neg	r22
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	8f 4f       	sbci	r24, 0xFF	; 255
    1654:	9f 4f       	sbci	r25, 0xFF	; 255
    1656:	99 23       	and	r25, r25
    1658:	a9 f0       	breq	.+42     	; 0x1684 <__floatsisf+0x40>
    165a:	f9 2f       	mov	r31, r25
    165c:	96 e9       	ldi	r25, 0x96	; 150
    165e:	bb 27       	eor	r27, r27
    1660:	93 95       	inc	r25
    1662:	f6 95       	lsr	r31
    1664:	87 95       	ror	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	b7 95       	ror	r27
    166c:	f1 11       	cpse	r31, r1
    166e:	f8 cf       	rjmp	.-16     	; 0x1660 <__floatsisf+0x1c>
    1670:	fa f4       	brpl	.+62     	; 0x16b0 <__floatsisf+0x6c>
    1672:	bb 0f       	add	r27, r27
    1674:	11 f4       	brne	.+4      	; 0x167a <__floatsisf+0x36>
    1676:	60 ff       	sbrs	r22, 0
    1678:	1b c0       	rjmp	.+54     	; 0x16b0 <__floatsisf+0x6c>
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	8f 4f       	sbci	r24, 0xFF	; 255
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	16 c0       	rjmp	.+44     	; 0x16b0 <__floatsisf+0x6c>
    1684:	88 23       	and	r24, r24
    1686:	11 f0       	breq	.+4      	; 0x168c <__floatsisf+0x48>
    1688:	96 e9       	ldi	r25, 0x96	; 150
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <__floatsisf+0x6a>
    168c:	77 23       	and	r23, r23
    168e:	21 f0       	breq	.+8      	; 0x1698 <__floatsisf+0x54>
    1690:	9e e8       	ldi	r25, 0x8E	; 142
    1692:	87 2f       	mov	r24, r23
    1694:	76 2f       	mov	r23, r22
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <__floatsisf+0x5e>
    1698:	66 23       	and	r22, r22
    169a:	71 f0       	breq	.+28     	; 0x16b8 <__floatsisf+0x74>
    169c:	96 e8       	ldi	r25, 0x86	; 134
    169e:	86 2f       	mov	r24, r22
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	2a f0       	brmi	.+10     	; 0x16b0 <__floatsisf+0x6c>
    16a6:	9a 95       	dec	r25
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	da f7       	brpl	.-10     	; 0x16a6 <__floatsisf+0x62>
    16b0:	88 0f       	add	r24, r24
    16b2:	96 95       	lsr	r25
    16b4:	87 95       	ror	r24
    16b6:	97 f9       	bld	r25, 7
    16b8:	08 95       	ret

000016ba <__fp_cmp>:
    16ba:	99 0f       	add	r25, r25
    16bc:	00 08       	sbc	r0, r0
    16be:	55 0f       	add	r21, r21
    16c0:	aa 0b       	sbc	r26, r26
    16c2:	e0 e8       	ldi	r30, 0x80	; 128
    16c4:	fe ef       	ldi	r31, 0xFE	; 254
    16c6:	16 16       	cp	r1, r22
    16c8:	17 06       	cpc	r1, r23
    16ca:	e8 07       	cpc	r30, r24
    16cc:	f9 07       	cpc	r31, r25
    16ce:	c0 f0       	brcs	.+48     	; 0x1700 <__fp_cmp+0x46>
    16d0:	12 16       	cp	r1, r18
    16d2:	13 06       	cpc	r1, r19
    16d4:	e4 07       	cpc	r30, r20
    16d6:	f5 07       	cpc	r31, r21
    16d8:	98 f0       	brcs	.+38     	; 0x1700 <__fp_cmp+0x46>
    16da:	62 1b       	sub	r22, r18
    16dc:	73 0b       	sbc	r23, r19
    16de:	84 0b       	sbc	r24, r20
    16e0:	95 0b       	sbc	r25, r21
    16e2:	39 f4       	brne	.+14     	; 0x16f2 <__fp_cmp+0x38>
    16e4:	0a 26       	eor	r0, r26
    16e6:	61 f0       	breq	.+24     	; 0x1700 <__fp_cmp+0x46>
    16e8:	23 2b       	or	r18, r19
    16ea:	24 2b       	or	r18, r20
    16ec:	25 2b       	or	r18, r21
    16ee:	21 f4       	brne	.+8      	; 0x16f8 <__fp_cmp+0x3e>
    16f0:	08 95       	ret
    16f2:	0a 26       	eor	r0, r26
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <__fp_cmp+0x3e>
    16f6:	a1 40       	sbci	r26, 0x01	; 1
    16f8:	a6 95       	lsr	r26
    16fa:	8f ef       	ldi	r24, 0xFF	; 255
    16fc:	81 1d       	adc	r24, r1
    16fe:	81 1d       	adc	r24, r1
    1700:	08 95       	ret

00001702 <__fp_inf>:
    1702:	97 f9       	bld	r25, 7
    1704:	9f 67       	ori	r25, 0x7F	; 127
    1706:	80 e8       	ldi	r24, 0x80	; 128
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	08 95       	ret

0000170e <__fp_nan>:
    170e:	9f ef       	ldi	r25, 0xFF	; 255
    1710:	80 ec       	ldi	r24, 0xC0	; 192
    1712:	08 95       	ret

00001714 <__fp_powser>:
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	1f 93       	push	r17
    171a:	0f 93       	push	r16
    171c:	ff 92       	push	r15
    171e:	ef 92       	push	r14
    1720:	df 92       	push	r13
    1722:	7b 01       	movw	r14, r22
    1724:	8c 01       	movw	r16, r24
    1726:	68 94       	set
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <__fp_powser+0x20>
    172a:	da 2e       	mov	r13, r26
    172c:	ef 01       	movw	r28, r30
    172e:	76 d0       	rcall	.+236    	; 0x181c <__mulsf3x>
    1730:	fe 01       	movw	r30, r28
    1732:	e8 94       	clt
    1734:	a5 91       	lpm	r26, Z+
    1736:	25 91       	lpm	r18, Z+
    1738:	35 91       	lpm	r19, Z+
    173a:	45 91       	lpm	r20, Z+
    173c:	55 91       	lpm	r21, Z+
    173e:	ae f3       	brts	.-22     	; 0x172a <__fp_powser+0x16>
    1740:	ef 01       	movw	r28, r30
    1742:	66 de       	rcall	.-820    	; 0x1410 <__addsf3x>
    1744:	fe 01       	movw	r30, r28
    1746:	97 01       	movw	r18, r14
    1748:	a8 01       	movw	r20, r16
    174a:	da 94       	dec	r13
    174c:	79 f7       	brne	.-34     	; 0x172c <__fp_powser+0x18>
    174e:	df 90       	pop	r13
    1750:	ef 90       	pop	r14
    1752:	ff 90       	pop	r15
    1754:	0f 91       	pop	r16
    1756:	1f 91       	pop	r17
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <__fp_pscA>:
    175e:	00 24       	eor	r0, r0
    1760:	0a 94       	dec	r0
    1762:	16 16       	cp	r1, r22
    1764:	17 06       	cpc	r1, r23
    1766:	18 06       	cpc	r1, r24
    1768:	09 06       	cpc	r0, r25
    176a:	08 95       	ret

0000176c <__fp_pscB>:
    176c:	00 24       	eor	r0, r0
    176e:	0a 94       	dec	r0
    1770:	12 16       	cp	r1, r18
    1772:	13 06       	cpc	r1, r19
    1774:	14 06       	cpc	r1, r20
    1776:	05 06       	cpc	r0, r21
    1778:	08 95       	ret

0000177a <__fp_round>:
    177a:	09 2e       	mov	r0, r25
    177c:	03 94       	inc	r0
    177e:	00 0c       	add	r0, r0
    1780:	11 f4       	brne	.+4      	; 0x1786 <__fp_round+0xc>
    1782:	88 23       	and	r24, r24
    1784:	52 f0       	brmi	.+20     	; 0x179a <__fp_round+0x20>
    1786:	bb 0f       	add	r27, r27
    1788:	40 f4       	brcc	.+16     	; 0x179a <__fp_round+0x20>
    178a:	bf 2b       	or	r27, r31
    178c:	11 f4       	brne	.+4      	; 0x1792 <__fp_round+0x18>
    178e:	60 ff       	sbrs	r22, 0
    1790:	04 c0       	rjmp	.+8      	; 0x179a <__fp_round+0x20>
    1792:	6f 5f       	subi	r22, 0xFF	; 255
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	8f 4f       	sbci	r24, 0xFF	; 255
    1798:	9f 4f       	sbci	r25, 0xFF	; 255
    179a:	08 95       	ret

0000179c <__fp_split3>:
    179c:	57 fd       	sbrc	r21, 7
    179e:	90 58       	subi	r25, 0x80	; 128
    17a0:	44 0f       	add	r20, r20
    17a2:	55 1f       	adc	r21, r21
    17a4:	59 f0       	breq	.+22     	; 0x17bc <__fp_splitA+0x10>
    17a6:	5f 3f       	cpi	r21, 0xFF	; 255
    17a8:	71 f0       	breq	.+28     	; 0x17c6 <__fp_splitA+0x1a>
    17aa:	47 95       	ror	r20

000017ac <__fp_splitA>:
    17ac:	88 0f       	add	r24, r24
    17ae:	97 fb       	bst	r25, 7
    17b0:	99 1f       	adc	r25, r25
    17b2:	61 f0       	breq	.+24     	; 0x17cc <__fp_splitA+0x20>
    17b4:	9f 3f       	cpi	r25, 0xFF	; 255
    17b6:	79 f0       	breq	.+30     	; 0x17d6 <__fp_splitA+0x2a>
    17b8:	87 95       	ror	r24
    17ba:	08 95       	ret
    17bc:	12 16       	cp	r1, r18
    17be:	13 06       	cpc	r1, r19
    17c0:	14 06       	cpc	r1, r20
    17c2:	55 1f       	adc	r21, r21
    17c4:	f2 cf       	rjmp	.-28     	; 0x17aa <__fp_split3+0xe>
    17c6:	46 95       	lsr	r20
    17c8:	f1 df       	rcall	.-30     	; 0x17ac <__fp_splitA>
    17ca:	08 c0       	rjmp	.+16     	; 0x17dc <__fp_splitA+0x30>
    17cc:	16 16       	cp	r1, r22
    17ce:	17 06       	cpc	r1, r23
    17d0:	18 06       	cpc	r1, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	f1 cf       	rjmp	.-30     	; 0x17b8 <__fp_splitA+0xc>
    17d6:	86 95       	lsr	r24
    17d8:	71 05       	cpc	r23, r1
    17da:	61 05       	cpc	r22, r1
    17dc:	08 94       	sec
    17de:	08 95       	ret

000017e0 <__fp_zero>:
    17e0:	e8 94       	clt

000017e2 <__fp_szero>:
    17e2:	bb 27       	eor	r27, r27
    17e4:	66 27       	eor	r22, r22
    17e6:	77 27       	eor	r23, r23
    17e8:	cb 01       	movw	r24, r22
    17ea:	97 f9       	bld	r25, 7
    17ec:	08 95       	ret

000017ee <__gesf2>:
    17ee:	65 df       	rcall	.-310    	; 0x16ba <__fp_cmp>
    17f0:	08 f4       	brcc	.+2      	; 0x17f4 <__gesf2+0x6>
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	08 95       	ret

000017f6 <inverse>:
    17f6:	9b 01       	movw	r18, r22
    17f8:	ac 01       	movw	r20, r24
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	80 e8       	ldi	r24, 0x80	; 128
    1800:	9f e3       	ldi	r25, 0x3F	; 63
    1802:	85 ce       	rjmp	.-758    	; 0x150e <__divsf3>

00001804 <__mulsf3>:
    1804:	0b d0       	rcall	.+22     	; 0x181c <__mulsf3x>
    1806:	b9 cf       	rjmp	.-142    	; 0x177a <__fp_round>
    1808:	aa df       	rcall	.-172    	; 0x175e <__fp_pscA>
    180a:	28 f0       	brcs	.+10     	; 0x1816 <__mulsf3+0x12>
    180c:	af df       	rcall	.-162    	; 0x176c <__fp_pscB>
    180e:	18 f0       	brcs	.+6      	; 0x1816 <__mulsf3+0x12>
    1810:	95 23       	and	r25, r21
    1812:	09 f0       	breq	.+2      	; 0x1816 <__mulsf3+0x12>
    1814:	76 cf       	rjmp	.-276    	; 0x1702 <__fp_inf>
    1816:	7b cf       	rjmp	.-266    	; 0x170e <__fp_nan>
    1818:	11 24       	eor	r1, r1
    181a:	e3 cf       	rjmp	.-58     	; 0x17e2 <__fp_szero>

0000181c <__mulsf3x>:
    181c:	bf df       	rcall	.-130    	; 0x179c <__fp_split3>
    181e:	a0 f3       	brcs	.-24     	; 0x1808 <__mulsf3+0x4>

00001820 <__mulsf3_pse>:
    1820:	95 9f       	mul	r25, r21
    1822:	d1 f3       	breq	.-12     	; 0x1818 <__mulsf3+0x14>
    1824:	95 0f       	add	r25, r21
    1826:	50 e0       	ldi	r21, 0x00	; 0
    1828:	55 1f       	adc	r21, r21
    182a:	62 9f       	mul	r22, r18
    182c:	f0 01       	movw	r30, r0
    182e:	72 9f       	mul	r23, r18
    1830:	bb 27       	eor	r27, r27
    1832:	f0 0d       	add	r31, r0
    1834:	b1 1d       	adc	r27, r1
    1836:	63 9f       	mul	r22, r19
    1838:	aa 27       	eor	r26, r26
    183a:	f0 0d       	add	r31, r0
    183c:	b1 1d       	adc	r27, r1
    183e:	aa 1f       	adc	r26, r26
    1840:	64 9f       	mul	r22, r20
    1842:	66 27       	eor	r22, r22
    1844:	b0 0d       	add	r27, r0
    1846:	a1 1d       	adc	r26, r1
    1848:	66 1f       	adc	r22, r22
    184a:	82 9f       	mul	r24, r18
    184c:	22 27       	eor	r18, r18
    184e:	b0 0d       	add	r27, r0
    1850:	a1 1d       	adc	r26, r1
    1852:	62 1f       	adc	r22, r18
    1854:	73 9f       	mul	r23, r19
    1856:	b0 0d       	add	r27, r0
    1858:	a1 1d       	adc	r26, r1
    185a:	62 1f       	adc	r22, r18
    185c:	83 9f       	mul	r24, r19
    185e:	a0 0d       	add	r26, r0
    1860:	61 1d       	adc	r22, r1
    1862:	22 1f       	adc	r18, r18
    1864:	74 9f       	mul	r23, r20
    1866:	33 27       	eor	r19, r19
    1868:	a0 0d       	add	r26, r0
    186a:	61 1d       	adc	r22, r1
    186c:	23 1f       	adc	r18, r19
    186e:	84 9f       	mul	r24, r20
    1870:	60 0d       	add	r22, r0
    1872:	21 1d       	adc	r18, r1
    1874:	82 2f       	mov	r24, r18
    1876:	76 2f       	mov	r23, r22
    1878:	6a 2f       	mov	r22, r26
    187a:	11 24       	eor	r1, r1
    187c:	9f 57       	subi	r25, 0x7F	; 127
    187e:	50 40       	sbci	r21, 0x00	; 0
    1880:	8a f0       	brmi	.+34     	; 0x18a4 <__mulsf3_pse+0x84>
    1882:	e1 f0       	breq	.+56     	; 0x18bc <__mulsf3_pse+0x9c>
    1884:	88 23       	and	r24, r24
    1886:	4a f0       	brmi	.+18     	; 0x189a <__mulsf3_pse+0x7a>
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	bb 1f       	adc	r27, r27
    188e:	66 1f       	adc	r22, r22
    1890:	77 1f       	adc	r23, r23
    1892:	88 1f       	adc	r24, r24
    1894:	91 50       	subi	r25, 0x01	; 1
    1896:	50 40       	sbci	r21, 0x00	; 0
    1898:	a9 f7       	brne	.-22     	; 0x1884 <__mulsf3_pse+0x64>
    189a:	9e 3f       	cpi	r25, 0xFE	; 254
    189c:	51 05       	cpc	r21, r1
    189e:	70 f0       	brcs	.+28     	; 0x18bc <__mulsf3_pse+0x9c>
    18a0:	30 cf       	rjmp	.-416    	; 0x1702 <__fp_inf>
    18a2:	9f cf       	rjmp	.-194    	; 0x17e2 <__fp_szero>
    18a4:	5f 3f       	cpi	r21, 0xFF	; 255
    18a6:	ec f3       	brlt	.-6      	; 0x18a2 <__mulsf3_pse+0x82>
    18a8:	98 3e       	cpi	r25, 0xE8	; 232
    18aa:	dc f3       	brlt	.-10     	; 0x18a2 <__mulsf3_pse+0x82>
    18ac:	86 95       	lsr	r24
    18ae:	77 95       	ror	r23
    18b0:	67 95       	ror	r22
    18b2:	b7 95       	ror	r27
    18b4:	f7 95       	ror	r31
    18b6:	e7 95       	ror	r30
    18b8:	9f 5f       	subi	r25, 0xFF	; 255
    18ba:	c1 f7       	brne	.-16     	; 0x18ac <__mulsf3_pse+0x8c>
    18bc:	fe 2b       	or	r31, r30
    18be:	88 0f       	add	r24, r24
    18c0:	91 1d       	adc	r25, r1
    18c2:	96 95       	lsr	r25
    18c4:	87 95       	ror	r24
    18c6:	97 f9       	bld	r25, 7
    18c8:	08 95       	ret

000018ca <square>:
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	9a cf       	rjmp	.-204    	; 0x1804 <__mulsf3>

000018d0 <__udivmodhi4>:
    18d0:	aa 1b       	sub	r26, r26
    18d2:	bb 1b       	sub	r27, r27
    18d4:	51 e1       	ldi	r21, 0x11	; 17
    18d6:	07 c0       	rjmp	.+14     	; 0x18e6 <__udivmodhi4_ep>

000018d8 <__udivmodhi4_loop>:
    18d8:	aa 1f       	adc	r26, r26
    18da:	bb 1f       	adc	r27, r27
    18dc:	a6 17       	cp	r26, r22
    18de:	b7 07       	cpc	r27, r23
    18e0:	10 f0       	brcs	.+4      	; 0x18e6 <__udivmodhi4_ep>
    18e2:	a6 1b       	sub	r26, r22
    18e4:	b7 0b       	sbc	r27, r23

000018e6 <__udivmodhi4_ep>:
    18e6:	88 1f       	adc	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	5a 95       	dec	r21
    18ec:	a9 f7       	brne	.-22     	; 0x18d8 <__udivmodhi4_loop>
    18ee:	80 95       	com	r24
    18f0:	90 95       	com	r25
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	08 95       	ret

000018f8 <__divmodhi4>:
    18f8:	97 fb       	bst	r25, 7
    18fa:	09 2e       	mov	r0, r25
    18fc:	07 26       	eor	r0, r23
    18fe:	0a d0       	rcall	.+20     	; 0x1914 <__divmodhi4_neg1>
    1900:	77 fd       	sbrc	r23, 7
    1902:	04 d0       	rcall	.+8      	; 0x190c <__divmodhi4_neg2>
    1904:	e5 df       	rcall	.-54     	; 0x18d0 <__udivmodhi4>
    1906:	06 d0       	rcall	.+12     	; 0x1914 <__divmodhi4_neg1>
    1908:	00 20       	and	r0, r0
    190a:	1a f4       	brpl	.+6      	; 0x1912 <__divmodhi4_exit>

0000190c <__divmodhi4_neg2>:
    190c:	70 95       	com	r23
    190e:	61 95       	neg	r22
    1910:	7f 4f       	sbci	r23, 0xFF	; 255

00001912 <__divmodhi4_exit>:
    1912:	08 95       	ret

00001914 <__divmodhi4_neg1>:
    1914:	f6 f7       	brtc	.-4      	; 0x1912 <__divmodhi4_exit>
    1916:	90 95       	com	r25
    1918:	81 95       	neg	r24
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	08 95       	ret

0000191e <__divmodsi4>:
    191e:	97 fb       	bst	r25, 7
    1920:	09 2e       	mov	r0, r25
    1922:	05 26       	eor	r0, r21
    1924:	0e d0       	rcall	.+28     	; 0x1942 <__divmodsi4_neg1>
    1926:	57 fd       	sbrc	r21, 7
    1928:	04 d0       	rcall	.+8      	; 0x1932 <__divmodsi4_neg2>
    192a:	14 d0       	rcall	.+40     	; 0x1954 <__udivmodsi4>
    192c:	0a d0       	rcall	.+20     	; 0x1942 <__divmodsi4_neg1>
    192e:	00 1c       	adc	r0, r0
    1930:	38 f4       	brcc	.+14     	; 0x1940 <__divmodsi4_exit>

00001932 <__divmodsi4_neg2>:
    1932:	50 95       	com	r21
    1934:	40 95       	com	r20
    1936:	30 95       	com	r19
    1938:	21 95       	neg	r18
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	4f 4f       	sbci	r20, 0xFF	; 255
    193e:	5f 4f       	sbci	r21, 0xFF	; 255

00001940 <__divmodsi4_exit>:
    1940:	08 95       	ret

00001942 <__divmodsi4_neg1>:
    1942:	f6 f7       	brtc	.-4      	; 0x1940 <__divmodsi4_exit>
    1944:	90 95       	com	r25
    1946:	80 95       	com	r24
    1948:	70 95       	com	r23
    194a:	61 95       	neg	r22
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	8f 4f       	sbci	r24, 0xFF	; 255
    1950:	9f 4f       	sbci	r25, 0xFF	; 255
    1952:	08 95       	ret

00001954 <__udivmodsi4>:
    1954:	a1 e2       	ldi	r26, 0x21	; 33
    1956:	1a 2e       	mov	r1, r26
    1958:	aa 1b       	sub	r26, r26
    195a:	bb 1b       	sub	r27, r27
    195c:	fd 01       	movw	r30, r26
    195e:	0d c0       	rjmp	.+26     	; 0x197a <__udivmodsi4_ep>

00001960 <__udivmodsi4_loop>:
    1960:	aa 1f       	adc	r26, r26
    1962:	bb 1f       	adc	r27, r27
    1964:	ee 1f       	adc	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	a2 17       	cp	r26, r18
    196a:	b3 07       	cpc	r27, r19
    196c:	e4 07       	cpc	r30, r20
    196e:	f5 07       	cpc	r31, r21
    1970:	20 f0       	brcs	.+8      	; 0x197a <__udivmodsi4_ep>
    1972:	a2 1b       	sub	r26, r18
    1974:	b3 0b       	sbc	r27, r19
    1976:	e4 0b       	sbc	r30, r20
    1978:	f5 0b       	sbc	r31, r21

0000197a <__udivmodsi4_ep>:
    197a:	66 1f       	adc	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	88 1f       	adc	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	1a 94       	dec	r1
    1984:	69 f7       	brne	.-38     	; 0x1960 <__udivmodsi4_loop>
    1986:	60 95       	com	r22
    1988:	70 95       	com	r23
    198a:	80 95       	com	r24
    198c:	90 95       	com	r25
    198e:	9b 01       	movw	r18, r22
    1990:	ac 01       	movw	r20, r24
    1992:	bd 01       	movw	r22, r26
    1994:	cf 01       	movw	r24, r30
    1996:	08 95       	ret

00001998 <_exit>:
    1998:	f8 94       	cli

0000199a <__stop_program>:
    199a:	ff cf       	rjmp	.-2      	; 0x199a <__stop_program>
