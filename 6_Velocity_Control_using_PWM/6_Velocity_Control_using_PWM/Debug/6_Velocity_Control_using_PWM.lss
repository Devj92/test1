
6_Velocity_Control_using_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006e4  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000a38  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000601  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000182  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003c1  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000114  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e4  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000041  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e7       	ldi	r30, 0x76	; 118
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
 122:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <motion_pin_config>:
#include <util/delay.h>

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
 12a:	81 b1       	in	r24, 0x01	; 1
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 130:	82 b1       	in	r24, 0x02	; 2
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 136:	ea e0       	ldi	r30, 0x0A	; 10
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	80 81       	ld	r24, Z
 13c:	88 61       	ori	r24, 0x18	; 24
 13e:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 140:	eb e0       	ldi	r30, 0x0B	; 11
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	80 81       	ld	r24, Z
 146:	88 61       	ori	r24, 0x18	; 24
 148:	80 83       	st	Z, r24
}
 14a:	08 95       	ret

0000014c <init_ports>:

//Function to initialize ports
void init_ports()
{
 motion_pin_config();
 14c:	0e 94 95 00 	call	0x12a	; 0x12a <motion_pin_config>
}
 150:	08 95       	ret

00000152 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 152:	e1 e2       	ldi	r30, 0x21	; 33
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x03;	//Counter lower 8-bit value to which OCR5xH value is compared with
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x03;	//Output compare register high value for Left Motor
 164:	90 93 29 01 	sts	0x0129, r25
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 168:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x03;	//Output compare register high value for Right Motor
 16c:	90 93 2b 01 	sts	0x012B, r25
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 170:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x03;	//Output compare register high value for Motor C1
 174:	90 93 2d 01 	sts	0x012D, r25
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 178:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xAB;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 17c:	8b ea       	ldi	r24, 0xAB	; 171
 17e:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x04;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 83       	st	Z, r24
}
 186:	08 95       	ret

00000188 <velocity>:

// Function for robot velocity control
void velocity (unsigned int left_motor, unsigned int right_motor)
{
	OCR5A = (unsigned int)left_motor;
 188:	90 93 29 01 	sts	0x0129, r25
 18c:	80 93 28 01 	sts	0x0128, r24
	OCR5B = (unsigned int)right_motor;
 190:	70 93 2b 01 	sts	0x012B, r23
 194:	60 93 2a 01 	sts	0x012A, r22
}
 198:	08 95       	ret

0000019a <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
 19a:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 19c:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 19e:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 			// reading the PORTA's original status
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 1a0:	98 2b       	or	r25, r24
 PORTA = PortARestore; 			// setting the command to the port
 1a2:	92 b9       	out	0x02, r25	; 2
}
 1a4:	08 95       	ret

000001a6 <forward>:


void forward (void) //both wheels forward
{
  motion_set(0x06);
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1ac:	08 95       	ret

000001ae <back>:

void back (void) //both wheels backward
{
  motion_set(0x09);
 1ae:	89 e0       	ldi	r24, 0x09	; 9
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1b4:	08 95       	ret

000001b6 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1bc:	08 95       	ret

000001be <right>:

void right (void) //Left wheel forward, Right wheel backward
{
  motion_set(0x0A);
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1c4:	08 95       	ret

000001c6 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1cc:	08 95       	ret

000001ce <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
 motion_set(0x02);
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1d4:	08 95       	ret

000001d6 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1dc:	08 95       	ret

000001de <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1e4:	08 95       	ret

000001e6 <stop>:

void stop (void)
{
  motion_set(0x00);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 cd 00 	call	0x19a	; 0x19a <motion_set>
}
 1ec:	08 95       	ret

000001ee <init_devices>:

void init_devices (void) //use this function to initialize all devices
{
 cli(); //disable all interrupts
 1ee:	f8 94       	cli
 init_ports();
 1f0:	0e 94 a6 00 	call	0x14c	; 0x14c <init_ports>
 timer5_init();
 1f4:	0e 94 a9 00 	call	0x152	; 0x152 <timer5_init>
 sei(); //re-enable interrupts
 1f8:	78 94       	sei
}
 1fa:	08 95       	ret

000001fc <main>:

//Main Function
int main()
{
	init_devices();
 1fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <init_devices>
	  
	while(1)
	{
		velocity (1023, 1023); //Smaller the value lesser will be the velocity.Try different valuse between 0 to 255
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	93 e0       	ldi	r25, 0x03	; 3
 204:	6f ef       	ldi	r22, 0xFF	; 255
 206:	73 e0       	ldi	r23, 0x03	; 3
 208:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
		forward(); //both wheels forward
 20c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <forward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	9f ef       	ldi	r25, 0xFF	; 255
 214:	a6 e8       	ldi	r26, 0x86	; 134
 216:	81 50       	subi	r24, 0x01	; 1
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	a0 40       	sbci	r26, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <main+0x1a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <main+0x24>
 220:	00 00       	nop
		_delay_ms(3000);

		stop();						
 222:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <stop>
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	9f e7       	ldi	r25, 0x7F	; 127
 22a:	a6 e1       	ldi	r26, 0x16	; 22
 22c:	81 50       	subi	r24, 0x01	; 1
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	a0 40       	sbci	r26, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x30>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x3a>
 236:	00 00       	nop
		_delay_ms(500);
	
		velocity (5000, 5000);
 238:	88 e8       	ldi	r24, 0x88	; 136
 23a:	93 e1       	ldi	r25, 0x13	; 19
 23c:	68 e8       	ldi	r22, 0x88	; 136
 23e:	73 e1       	ldi	r23, 0x13	; 19
 240:	0e 94 c4 00 	call	0x188	; 0x188 <velocity>
		forward(); //both wheels backward						
 244:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <forward>
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	9f ef       	ldi	r25, 0xFF	; 255
 24c:	a6 e8       	ldi	r26, 0x86	; 134
 24e:	81 50       	subi	r24, 0x01	; 1
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	a0 40       	sbci	r26, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0x52>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0x5c>
 258:	00 00       	nop
		_delay_ms(3000);
		
		stop();
 25a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <stop>
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	9f e7       	ldi	r25, 0x7F	; 127
 262:	a6 e1       	ldi	r26, 0x16	; 22
 264:	81 50       	subi	r24, 0x01	; 1
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	a0 40       	sbci	r26, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x68>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x72>
 26e:	00 00       	nop
 270:	c7 cf       	rjmp	.-114    	; 0x200 <main+0x4>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
